; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--thumb --list --debug -c --asm --interleave -o.\output\lpc2478_ea\debug_flash_j-link\obj\bsp.o --asm_dir=.\Output\LPC2478_EA\Debug_FLASH_J-Link\LST\ --list_dir=.\Output\LPC2478_EA\Debug_FLASH_J-Link\LST\ --depend=.\output\lpc2478_ea\debug_flash_j-link\obj\bsp.d --feedback=.\Output\LPC2478_EA\Debug_FLASH_J-Link\OBJ\Start_LPC2478_EA.fed --apcs=interwork -O0 -IApplication\SEGGERDEMO -IApplication\SEGGERDEMO\Src -ISetup -IInc -IConfig -IFS -IIP -IIP\IP_FS\FS_RO\Generated -IGUI -IOS -IUSB -IUSBH -I"C:\Program Files (x86)\Keil\V473\ARM\RV31\INC" -I"C:\Program Files (x86)\Keil\V473\ARM\CMSIS\Include" -I"C:\Program Files (x86)\Keil\V473\ARM\Inc\Philips" -DDEBUG=1 --omf_browse=.\output\lpc2478_ea\debug_flash_j-link\obj\bsp.crf Setup\BSP.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Delay PROC
;;;307    */
;;;308    static void _Delay(int ms) {
000000  b081              SUB      sp,sp,#4
;;;309      volatile int i;
;;;310    
;;;311      for (i = 0; i < (50 * ms); i++) {}  // Delay of x * 1ms
000002  2100              MOVS     r1,#0
000004  9100              STR      r1,[sp,#0]
000006  e002              B        |L1.14|
                  |L1.8|
000008  9900              LDR      r1,[sp,#0]
00000a  1c49              ADDS     r1,r1,#1
00000c  9100              STR      r1,[sp,#0]
                  |L1.14|
00000e  2132              MOVS     r1,#0x32
000010  4341              MULS     r1,r0,r1
000012  9a00              LDR      r2,[sp,#0]
000014  4291              CMP      r1,r2
000016  dcf7              BGT      |L1.8|
;;;312    }
000018  b001              ADD      sp,sp,#4
00001a  4770              BX       lr
;;;313    
                          ENDP

                  _SetLEDState PROC
;;;317    */
;;;318    static void _SetLEDState(unsigned char LED, unsigned char State) {
00001c  b57c              PUSH     {r2-r6,lr}
00001e  0004              MOVS     r4,r0
000020  000d              MOVS     r5,r1
;;;319      U8  acCommandString[2] = {0x08, 0x00};
000022  a0fe              ADR      r0,|L1.1052|
000024  6800              LDR      r0,[r0,#0]
000026  9001              STR      r0,[sp,#4]
;;;320      U8  Reg;
;;;321    
;;;322      if (LED > 7) {
000028  2c07              CMP      r4,#7
00002a  dd02              BLE      |L1.50|
                  |L1.44|
;;;323        return;
;;;324      }
;;;325      //
;;;326      // Adjust address if LED >= 5
;;;327      //
;;;328      if (LED >= 4) {
;;;329        acCommandString[0] = 0x09;
;;;330      }
;;;331      //
;;;332      // Read current register value
;;;333      //
;;;334      OS_IncDI();
;;;335      I2CPCA9532_WriteRead(acCommandString, 1, &Reg, 1);
;;;336      OS_DecRI();
;;;337      //
;;;338      // Set new LED state
;;;339      //
;;;340      if (LED >= 4) {
;;;341        LED -= 4;  // Address was already corrected above
;;;342      }
;;;343      if (State == LED_SET) {
;;;344        Reg |= (1 << (LED * 2)); //0x01;
;;;345      } else if (State == LED_TOGGLE) {
;;;346        if (Reg & (1 << (LED * 2))) {
;;;347          Reg &= ~(1 << (LED * 2));
;;;348        } else {
;;;349          Reg |= (1 << (LED * 2));
;;;350        }
;;;351      } else {
;;;352        Reg &= ~(1 << (LED * 2));
;;;353      }
;;;354      acCommandString[1] = Reg;
;;;355      OS_IncDI();
;;;356      I2CPCA9532_WriteRead(acCommandString, sizeof(acCommandString), 0, 0);
;;;357      OS_DecRI();
;;;358    }
00002c  bc7c              POP      {r2-r6}
00002e  bc08              POP      {r3}
000030  4718              BX       r3
                  |L1.50|
000032  2c04              CMP      r4,#4                 ;328
000034  db02              BLT      |L1.60|
000036  2009              MOVS     r0,#9                 ;329
000038  4669              MOV      r1,sp                 ;329
00003a  7108              STRB     r0,[r1,#4]            ;329
                  |L1.60|
00003c  48f8              LDR      r0,|L1.1056|
00003e  7840              LDRB     r0,[r0,#1]            ;334  ; OS_Counters
000040  21f0              MOVS     r1,#0xf0              ;334
000042  4208              TST      r0,r1                 ;334
000044  d002              BEQ      |L1.76|
000046  2099              MOVS     r0,#0x99              ;334
000048  f7fffffe          BL       OS_Error
                  |L1.76|
00004c  f7fffffe          BL       __ARM_common_disable_irq
000050  48f3              LDR      r0,|L1.1056|
000052  7840              LDRB     r0,[r0,#1]            ;334  ; OS_Counters
000054  1c40              ADDS     r0,r0,#1              ;334
000056  49f2              LDR      r1,|L1.1056|
000058  7048              STRB     r0,[r1,#1]            ;334
00005a  2301              MOVS     r3,#1                 ;335
00005c  466a              MOV      r2,sp                 ;335
00005e  0019              MOVS     r1,r3                 ;335
000060  a801              ADD      r0,sp,#4              ;335
000062  f7fffffe          BL       I2CPCA9532_WriteRead
000066  48ee              LDR      r0,|L1.1056|
000068  7840              LDRB     r0,[r0,#1]            ;336  ; OS_Counters
00006a  21f0              MOVS     r1,#0xf0              ;336
00006c  4208              TST      r0,r1                 ;336
00006e  d002              BEQ      |L1.118|
000070  2099              MOVS     r0,#0x99              ;336
000072  f7fffffe          BL       OS_Error
                  |L1.118|
000076  48ea              LDR      r0,|L1.1056|
000078  7840              LDRB     r0,[r0,#1]            ;336  ; OS_Counters
00007a  1e40              SUBS     r0,r0,#1              ;336
00007c  0600              LSLS     r0,r0,#24             ;336
00007e  0e00              LSRS     r0,r0,#24             ;336
000080  49e7              LDR      r1,|L1.1056|
000082  7048              STRB     r0,[r1,#1]            ;336
000084  d101              BNE      |L1.138|
000086  f7fffffe          BL       __ARM_common_enable_irq
                  |L1.138|
00008a  2c04              CMP      r4,#4                 ;340
00008c  db02              BLT      |L1.148|
00008e  1f20              SUBS     r0,r4,#4              ;341
000090  0604              LSLS     r4,r0,#24             ;341
000092  0e24              LSRS     r4,r4,#24             ;341
                  |L1.148|
000094  2d00              CMP      r5,#0                 ;343
000096  d109              BNE      |L1.172|
000098  0061              LSLS     r1,r4,#1              ;344
00009a  2001              MOVS     r0,#1                 ;344
00009c  4088              LSLS     r0,r0,r1              ;344
00009e  4669              MOV      r1,sp                 ;344
0000a0  7809              LDRB     r1,[r1,#0]            ;344
0000a2  4308              ORRS     r0,r0,r1              ;344
0000a4  0600              LSLS     r0,r0,#24             ;344
0000a6  0e00              LSRS     r0,r0,#24             ;344
0000a8  9000              STR      r0,[sp,#0]            ;344
0000aa  e021              B        |L1.240|
                  |L1.172|
0000ac  2d02              CMP      r5,#2                 ;345
0000ae  d118              BNE      |L1.226|
0000b0  0061              LSLS     r1,r4,#1              ;346
0000b2  2001              MOVS     r0,#1                 ;346
0000b4  4088              LSLS     r0,r0,r1              ;346
0000b6  4669              MOV      r1,sp                 ;346
0000b8  7809              LDRB     r1,[r1,#0]            ;346
0000ba  4208              TST      r0,r1                 ;346
0000bc  d007              BEQ      |L1.206|
0000be  0061              LSLS     r1,r4,#1              ;347
0000c0  2001              MOVS     r0,#1                 ;347
0000c2  4088              LSLS     r0,r0,r1              ;347
0000c4  4669              MOV      r1,sp                 ;347
0000c6  7809              LDRB     r1,[r1,#0]            ;347
0000c8  4381              BICS     r1,r1,r0              ;347
0000ca  9100              STR      r1,[sp,#0]            ;347
0000cc  e010              B        |L1.240|
                  |L1.206|
0000ce  0061              LSLS     r1,r4,#1              ;349
0000d0  2001              MOVS     r0,#1                 ;349
0000d2  4088              LSLS     r0,r0,r1              ;349
0000d4  4669              MOV      r1,sp                 ;349
0000d6  7809              LDRB     r1,[r1,#0]            ;349
0000d8  4308              ORRS     r0,r0,r1              ;349
0000da  0600              LSLS     r0,r0,#24             ;349
0000dc  0e00              LSRS     r0,r0,#24             ;349
0000de  9000              STR      r0,[sp,#0]            ;349
0000e0  e006              B        |L1.240|
                  |L1.226|
0000e2  0061              LSLS     r1,r4,#1              ;352
0000e4  2001              MOVS     r0,#1                 ;352
0000e6  4088              LSLS     r0,r0,r1              ;352
0000e8  4669              MOV      r1,sp                 ;352
0000ea  7809              LDRB     r1,[r1,#0]            ;352
0000ec  4381              BICS     r1,r1,r0              ;352
0000ee  9100              STR      r1,[sp,#0]            ;352
                  |L1.240|
0000f0  4668              MOV      r0,sp                 ;354
0000f2  7801              LDRB     r1,[r0,#0]            ;354
0000f4  7141              STRB     r1,[r0,#5]            ;354
0000f6  48ca              LDR      r0,|L1.1056|
0000f8  7840              LDRB     r0,[r0,#1]            ;355  ; OS_Counters
0000fa  21f0              MOVS     r1,#0xf0              ;355
0000fc  4208              TST      r0,r1                 ;355
0000fe  d002              BEQ      |L1.262|
000100  2099              MOVS     r0,#0x99              ;355
000102  f7fffffe          BL       OS_Error
                  |L1.262|
000106  f7fffffe          BL       __ARM_common_disable_irq
00010a  48c5              LDR      r0,|L1.1056|
00010c  7840              LDRB     r0,[r0,#1]            ;355  ; OS_Counters
00010e  1c40              ADDS     r0,r0,#1              ;355
000110  49c3              LDR      r1,|L1.1056|
000112  7048              STRB     r0,[r1,#1]            ;355
000114  2300              MOVS     r3,#0                 ;356
000116  001a              MOVS     r2,r3                 ;356
000118  2102              MOVS     r1,#2                 ;356
00011a  a801              ADD      r0,sp,#4              ;356
00011c  f7fffffe          BL       I2CPCA9532_WriteRead
000120  48bf              LDR      r0,|L1.1056|
000122  7840              LDRB     r0,[r0,#1]            ;357  ; OS_Counters
000124  21f0              MOVS     r1,#0xf0              ;357
000126  4208              TST      r0,r1                 ;357
000128  d002              BEQ      |L1.304|
00012a  2099              MOVS     r0,#0x99              ;357
00012c  f7fffffe          BL       OS_Error
                  |L1.304|
000130  48bb              LDR      r0,|L1.1056|
000132  7840              LDRB     r0,[r0,#1]            ;357  ; OS_Counters
000134  1e40              SUBS     r0,r0,#1              ;357
000136  0600              LSLS     r0,r0,#24             ;357
000138  0e00              LSRS     r0,r0,#24             ;357
00013a  49b9              LDR      r1,|L1.1056|
00013c  7048              STRB     r0,[r1,#1]            ;357
00013e  d101              BNE      |L1.324|
000140  f7fffffe          BL       __ARM_common_enable_irq
                  |L1.324|
000144  46c0              MOV      r8,r8
000146  e771              B        |L1.44|
;;;359    /*********************************************************************
                          ENDP

                  _LCD_HW_Init PROC
;;;362    */
;;;363    static void _LCD_HW_Init(void) {
000148  48b6              LDR      r0,|L1.1060|
;;;364      PCONP   |= (1 << 20);   // Enable peripheral clock for LCDC
00014a  6840              LDR      r0,[r0,#4]
00014c  2101              MOVS     r1,#1
00014e  0509              LSLS     r1,r1,#20
000150  4308              ORRS     r0,r0,r1
000152  49b4              LDR      r1,|L1.1060|
000154  6048              STR      r0,[r1,#4]
;;;365      //
;;;366      // Turn on LCD power
;;;367      //
;;;368      FIO2DIR |= (1 << 0);
000156  48b4              LDR      r0,|L1.1064|
000158  6800              LDR      r0,[r0,#0]
00015a  2101              MOVS     r1,#1
00015c  4308              ORRS     r0,r0,r1
00015e  49b2              LDR      r1,|L1.1064|
000160  6008              STR      r0,[r1,#0]
;;;369      FIO2SET  = (1 << 0);
000162  2001              MOVS     r0,#1
000164  6188              STR      r0,[r1,#0x18]
;;;370    
;;;371      //
;;;372      // Set P1.18 as PWM output
;;;373      //
;;;374      PINSEL3 &= ~(0x3 << 4);  // Clear P1[18]
000166  48b1              LDR      r0,|L1.1068|
000168  68c0              LDR      r0,[r0,#0xc]
00016a  2130              MOVS     r1,#0x30
00016c  4388              BICS     r0,r0,r1
00016e  49af              LDR      r1,|L1.1068|
000170  60c8              STR      r0,[r1,#0xc]
;;;375      PINSEL3 |= (1 << 5);     // PWM1[1]
000172  0008              MOVS     r0,r1
000174  68c0              LDR      r0,[r0,#0xc]
000176  2120              MOVS     r1,#0x20
000178  4308              ORRS     r0,r0,r1
00017a  49ac              LDR      r1,|L1.1068|
00017c  60c8              STR      r0,[r1,#0xc]
;;;376      PWM1PR  = 0x00;          // No prescaling
00017e  2000              MOVS     r0,#0
000180  49ab              LDR      r1,|L1.1072|
000182  60c8              STR      r0,[r1,#0xc]
;;;377      PWM1MCR = (1 << 1);      // Reset counter if MR0 match
000184  2002              MOVS     r0,#2
000186  6148              STR      r0,[r1,#0x14]
;;;378      PWM1MR0 = 0x3000;        // Period time equal about 5 ms
000188  2003              MOVS     r0,#3
00018a  0300              LSLS     r0,r0,#12
00018c  6188              STR      r0,[r1,#0x18]
;;;379      PWM1MR1 = 0x00;
00018e  2000              MOVS     r0,#0
000190  61c8              STR      r0,[r1,#0x1c]
;;;380      PWM1LER = 0
000192  2003              MOVS     r0,#3
000194  49a6              LDR      r1,|L1.1072|
000196  3140              ADDS     r1,r1,#0x40
000198  6108              STR      r0,[r1,#0x10]
;;;381                | (1 << 0)     // Latch MR0
;;;382                | (1 << 1)     // Latch MR1
;;;383                ;
;;;384      PWM1PCR = (1 << 9);      // Enable PWMENA1
00019a  2001              MOVS     r0,#1
00019c  0240              LSLS     r0,r0,#9
00019e  60c8              STR      r0,[r1,#0xc]
;;;385      PWM1TCR = 0
0001a0  2009              MOVS     r0,#9
0001a2  49a3              LDR      r1,|L1.1072|
0001a4  6048              STR      r0,[r1,#4]
;;;386                | (1 << 0)     // Enable counter
;;;387                | (1 << 3)     // Enable PWM
;;;388                ;
;;;389      //
;;;390      // Init SPI0
;;;391      //
;;;392      PINSEL0 |= (0x3uL << 30);   // SCK
0001a6  48a1              LDR      r0,|L1.1068|
0001a8  6800              LDR      r0,[r0,#0]
0001aa  03c9              LSLS     r1,r1,#15
0001ac  4308              ORRS     r0,r0,r1
0001ae  499f              LDR      r1,|L1.1068|
0001b0  6008              STR      r0,[r1,#0]
;;;393      PINSEL1 |= (0
0001b2  0008              MOVS     r0,r1
0001b4  6840              LDR      r0,[r0,#4]
0001b6  213c              MOVS     r1,#0x3c
0001b8  4308              ORRS     r0,r0,r1
0001ba  499c              LDR      r1,|L1.1068|
0001bc  6048              STR      r0,[r1,#4]
;;;394                  | (0x3 << 2)  // SSEL
;;;395                  | (0x3 << 4)  // MOSI
;;;396                 );
;;;397      IO0DIR  |= (0
0001be  489d              LDR      r0,|L1.1076|
0001c0  6880              LDR      r0,[r0,#8]
0001c2  2109              MOVS     r1,#9
0001c4  0409              LSLS     r1,r1,#16
0001c6  4308              ORRS     r0,r0,r1
0001c8  499a              LDR      r1,|L1.1076|
0001ca  6088              STR      r0,[r1,#8]
;;;398                  | (1 << 16)
;;;399                  | (1 << 19)
;;;400                 );
;;;401      IO0SET   =  0
0001cc  2009              MOVS     r0,#9
0001ce  0400              LSLS     r0,r0,#16
0001d0  6048              STR      r0,[r1,#4]
;;;402                  | (1 << 16)
;;;403                  | (1 << 19)
;;;404                  ;
;;;405      S0SPCCR  =  0xC;          // SPI0 clock counter setting
0001d2  200c              MOVS     r0,#0xc
0001d4  4998              LDR      r1,|L1.1080|
0001d6  60c8              STR      r0,[r1,#0xc]
;;;406      S0SPCR   =  0
0001d8  2038              MOVS     r0,#0x38
0001da  6008              STR      r0,[r1,#0]
;;;407                  | (1 << 3)    // Clock phase control, data is sampled on second clock edge of SCK
;;;408                  | (1 << 4)    // CPOL, SCK is active low
;;;409                  | (1 << 5)    // MSTR, SPI operates in master mode
;;;410                  ;
;;;411      PINSEL10 = 0x00;
0001dc  2000              MOVS     r0,#0
0001de  4993              LDR      r1,|L1.1068|
0001e0  6288              STR      r0,[r1,#0x28]
;;;412      PINSEL0  = (PINSEL0 & 0xFFF000FF)
0001e2  0008              MOVS     r0,r1
0001e4  6800              LDR      r0,[r0,#0]
0001e6  4995              LDR      r1,|L1.1084|
0001e8  4008              ANDS     r0,r0,r1
0001ea  30ff              ADDS     r0,r0,#0xff
0001ec  3001              ADDS     r0,#1
0001ee  4994              LDR      r1,|L1.1088|
0001f0  4308              ORRS     r0,r0,r1
0001f2  498e              LDR      r1,|L1.1068|
0001f4  6008              STR      r0,[r1,#0]
;;;413                 | (1 <<  8)    // I2SRX_CLK  / LCDVD[0]
;;;414                 | (1 << 10)    // I2SRX_WS   / LCDVD[1]
;;;415                 | (1 << 12)    // I2SRX_SDA  / LCDVD[8]
;;;416                 | (1 << 14)    // I2STX_CLK  / LCDVD[9]
;;;417                 | (1 << 16)    // I2STX_WS   / LCDVD[16]
;;;418                 | (1 << 18)    // I2STX_SDA  / LCDVD[17]
;;;419                 ;
;;;420      PINSEL3  = (PINSEL3 & 0xF00000FF)
0001f6  0008              MOVS     r0,r1
0001f8  68c0              LDR      r0,[r0,#0xc]
0001fa  4992              LDR      r1,|L1.1092|
0001fc  4008              ANDS     r0,r0,r1
0001fe  30ff              ADDS     r0,r0,#0xff
000200  3001              ADDS     r0,#1
000202  4991              LDR      r1,|L1.1096|
000204  4308              ORRS     r0,r0,r1
000206  4989              LDR      r1,|L1.1068|
000208  60c8              STR      r0,[r1,#0xc]
;;;421                 | (1 <<  8)    // USB_TX_DP1 / LCDVD[6]  / LCDVD[10]
;;;422                 | (1 << 10)    // USB_TX_DM1 / LCDVD[7]  / LCDVD[11]
;;;423                 | (1 << 12)    // USB_RCV1   / LCDVD[8]  / LCDVD[12]
;;;424                 | (1 << 14)    // USB_RX_DP1 / LCDVD[9]  / LCDVD[13]
;;;425                 | (1 << 16)    // USB_RX_DM1 / LCDVD[10] / LCDVD[14]
;;;426                 | (1 << 18)    // USB_LS1    / LCDVD[11] / LCDVD[15]
;;;427                 | (1 << 20)    // USB_SSPND1 / LCDVD[12] / LCDVD[20]
;;;428                 | (1 << 22)    // USB_INT1   / LCDVD[13] / LCDVD[21]
;;;429                 | (1 << 24)    // USB_SCL1   / LCDVD[14] / LCDVD[22]
;;;430                 | (1 << 26)    // USB_SDA1   / LCDVD[15] / LCDVD[23]
;;;431                 ;
;;;432      PINSEL4  = (PINSEL4 & 0xF0300000)
00020a  0008              MOVS     r0,r1
00020c  6900              LDR      r0,[r0,#0x10]
00020e  498f              LDR      r1,|L1.1100|
000210  4008              ANDS     r0,r0,r1
000212  1cc0              ADDS     r0,r0,#3
000214  498e              LDR      r1,|L1.1104|
000216  4308              ORRS     r0,r0,r1
000218  4984              LDR      r1,|L1.1068|
00021a  6108              STR      r0,[r1,#0x10]
;;;433                 | (0x3 <<  0)  // TRACECLK   / LCDPWR
;;;434                 | (0x3 <<  2)  // PIPESTAT0  / LCDLE
;;;435                 | (0x3 <<  4)  // PIPESTAT1  / LCDDCLK
;;;436                 | (0x3 <<  6)  // PIPESTAT2  / LCDFP
;;;437                 | (0x3 <<  8)  // TRACESYNC  / LCDENAB   / LCDM
;;;438                 | (0x3 << 10)  // TRACEPKT0  / LCDLP
;;;439                 | (0x3 << 12)  // TRACEPKT1  / LCDVD[0]  / LCDVD[4]
;;;440                 | (0x3 << 14)  // TRACEPKT2  / LCDVD[1]  / LCDVD[5]
;;;441                 | (0x3 << 16)  // TRACEPKT3  / LCDVD[2]  / LCDVD[6]
;;;442                 | (0x3 << 18)  // EXTIN0     / LCDVD[3]  / LCDVD[7]
;;;443                 | (1   << 22)  // EINT1      / LCDCLKIN
;;;444                 | (1   << 24)  // EINT2      / LCDVD[4]  / LCDVD[3]  / LCDVD[8]  / LCDVD[18]
;;;445                 | (1   << 24)  // EINT3      / LCDVD[5]  / LCDVD[9]  / LCDVD[19]
;;;446                 ;
;;;447      PINSEL9  = (PINSEL9 & 0xF0FFFFFF)
00021c  0008              MOVS     r0,r1
00021e  6a40              LDR      r0,[r0,#0x24]
000220  210f              MOVS     r1,#0xf
000222  0609              LSLS     r1,r1,#24
000224  4388              BICS     r0,r0,r1
000226  2101              MOVS     r1,#1
000228  0649              LSLS     r1,r1,#25
00022a  1840              ADDS     r0,r0,r1
00022c  0089              LSLS     r1,r1,#2
00022e  4308              ORRS     r0,r0,r1
000230  497e              LDR      r1,|L1.1068|
000232  6248              STR      r0,[r1,#0x24]
;;;448                 | (1 << 25)    // MAT2[0]    / LCDVD[6]  / LCDVD[10] / LCDVD[2]
;;;449                 | (1 << 27)    // MAT2[1]    / LCDVD[7]  / LCDVD[11] / LCDVD[3]
;;;450                 ;
;;;451      PINSEL11 = 0
000234  200d              MOVS     r0,#0xd
000236  62c8              STR      r0,[r1,#0x2c]
;;;452                 | (1   << 0)   // Enable LCD port
;;;453                 | (0x3 << 2)   // LCD Mode: TFT 16-bit (1:5:5:5 mode)
;;;454                 ;
;;;455    }
000238  4770              BX       lr
;;;456    
                          ENDP

                  _LCD_SetBacklight PROC
;;;460    */
;;;461    static void _LCD_SetBacklight(unsigned char Percent) {
00023a  b510              PUSH     {r4,lr}
00023c  0004              MOVS     r4,r0
;;;462      PWM1MR1 = ((unsigned long)0x3000 * (unsigned long)(100 - Percent)) / (unsigned long)100;
00023e  2164              MOVS     r1,#0x64
000240  1b09              SUBS     r1,r1,r4
000242  2203              MOVS     r2,#3
000244  0312              LSLS     r2,r2,#12
000246  4351              MULS     r1,r2,r1
000248  0008              MOVS     r0,r1
00024a  2164              MOVS     r1,#0x64
00024c  f7fffffe          BL       __aeabi_uidivmod
000250  4977              LDR      r1,|L1.1072|
000252  61c8              STR      r0,[r1,#0x1c]
;;;463      PWM1LER = (1 << 1);
000254  2002              MOVS     r0,#2
000256  4976              LDR      r1,|L1.1072|
000258  3140              ADDS     r1,r1,#0x40
00025a  6108              STR      r0,[r1,#0x10]
;;;464    }
00025c  bc10              POP      {r4}
00025e  bc08              POP      {r3}
000260  4718              BX       r3
;;;465    
                          ENDP

                  _LCD_Ctrl_Init PROC
;;;469    */
;;;470    static void _LCD_Ctrl_Init(void) {
000262  b570              PUSH     {r4-r6,lr}
;;;471      unsigned long* pPal = 0;
000264  2500              MOVS     r5,#0
;;;472      unsigned char  i;
;;;473    
;;;474      LCD_CTRL &= 0xFFFFFFFE;  // Disable the display
000266  487b              LDR      r0,|L1.1108|
000268  6980              LDR      r0,[r0,#0x18]
00026a  0840              LSRS     r0,r0,#1
00026c  0040              LSLS     r0,r0,#1
00026e  4979              LDR      r1,|L1.1108|
000270  6188              STR      r0,[r1,#0x18]
;;;475    
;;;476      // ppl value to set = ppl / 16 -1 (2:7)
;;;477      // hsw value to set = hsw - 1     (8:15)
;;;478      // hfp value to set = hfp - 1     (16:23)
;;;479      // hbp value to set = hbp - 1     (24:31)
;;;480      LCD_TIMH   = 0
000272  4879              LDR      r0,|L1.1112|
000274  6008              STR      r0,[r1,#0]
;;;481                   | (((240 / 16) - 1) <<  2)  // (Pixels per line / 16) - 1
;;;482                   | (( 2 - 1)         <<  8)  // Horizontal synchronization pulse width - 1
;;;483                   | ((10 - 1)         << 16)  // Horizontal front porch - 1
;;;484                   | ((28 - 1)         << 24)  // Horizontal back porch  - 1
;;;485                   ;
;;;486      LCD_TIMV   = 0
000276  4879              LDR      r0,|L1.1116|
000278  6048              STR      r0,[r1,#4]
;;;487                   | ((320 - 1)        <<  0)  // Lines per panel - 1
;;;488                   | ((  2 - 1)        << 10)  // Vertical synchronization pulse width - 1
;;;489                   | ((  2 - 1)        << 16)  // Vertical front porch
;;;490                   | ((  3 - 1)        << 24)  // Vertical back porch
;;;491                   ;
;;;492      LCD_POL    = 0
00027a  4879              LDR      r0,|L1.1120|
00027c  6088              STR      r0,[r1,#8]
;;;493                   | (( 13 - 2) <<  0)  // Lower five bits of panel clock divisor
;;;494                   |         (1 << 11)  // Invert vertical synchronization
;;;495                   |         (1 << 12)  // Invert horizontal synchronization
;;;496                   |         (1 << 13)  // Invert panel clock
;;;497                   | ((240 - 1) << 16)  // Clocks per line = (Pixels per line / 1) - 1
;;;498                   ;
;;;499      LCD_LE     = 0x00;                // skip line end control
00027e  2000              MOVS     r0,#0
000280  60c8              STR      r0,[r1,#0xc]
;;;500      LCD_INTMSK = 0;                   // Disable interrupts
000282  61c8              STR      r0,[r1,#0x1c]
;;;501      LCD_CTRL   = 0
000284  202c              MOVS     r0,#0x2c
000286  6188              STR      r0,[r1,#0x18]
;;;502                   | (0x06 << 1)        // 16 bits per pixel
;;;503                   | (   1 << 5)        // TFT
;;;504                   ;
;;;505      //
;;;506      // Clear palette
;;;507      //
;;;508      pPal = (unsigned long*)LCD_PAL_ADDR;
000288  4d76              LDR      r5,|L1.1124|
;;;509      for (i = 0; i < 128; i++) {
00028a  2400              MOVS     r4,#0
00028c  e004              B        |L1.664|
                  |L1.654|
;;;510        *pPal++ = 0;
00028e  2000              MOVS     r0,#0
000290  c501              STM      r5!,{r0}
000292  1c60              ADDS     r0,r4,#1              ;509
000294  0604              LSLS     r4,r0,#24             ;509
000296  0e24              LSRS     r4,r4,#24             ;509
                  |L1.664|
000298  2c80              CMP      r4,#0x80              ;509
00029a  dbf8              BLT      |L1.654|
;;;511      }
;;;512      LCD_CFG = 0x00;  // 0 = Divide by 1
00029c  2000              MOVS     r0,#0
00029e  4961              LDR      r1,|L1.1060|
0002a0  31c0              ADDS     r1,r1,#0xc0
0002a2  6388              STR      r0,[r1,#0x38]
;;;513      _Delay(20);
0002a4  2014              MOVS     r0,#0x14
0002a6  f7fffffe          BL       _Delay
;;;514    }
0002aa  bc70              POP      {r4-r6}
0002ac  bc08              POP      {r3}
0002ae  4718              BX       r3
;;;515    
                          ENDP

                  _SPI_Send PROC
;;;519    */
;;;520    static void _SPI_Send(unsigned char Data) {
0002b0  0001              MOVS     r1,r0
;;;521      unsigned long Failsafe = 0;
0002b2  2000              MOVS     r0,#0
;;;522    
;;;523      S0SPDR = Data;
0002b4  4a60              LDR      r2,|L1.1080|
0002b6  6091              STR      r1,[r2,#8]
;;;524      while (((S0SPSR & 0x80) == 0) && (Failsafe < 5000)) {  // while (SPI Transfer active)
0002b8  e000              B        |L1.700|
                  |L1.698|
;;;525        Failsafe++;
0002ba  1c40              ADDS     r0,r0,#1
                  |L1.700|
0002bc  4a5e              LDR      r2,|L1.1080|
0002be  6852              LDR      r2,[r2,#4]            ;524
0002c0  2380              MOVS     r3,#0x80              ;524
0002c2  421a              TST      r2,r3                 ;524
0002c4  d102              BNE      |L1.716|
0002c6  4a68              LDR      r2,|L1.1128|
0002c8  4290              CMP      r0,r2                 ;524
0002ca  d3f6              BCC      |L1.698|
                  |L1.716|
;;;526      }
;;;527      if (Failsafe >= 5000) {
0002cc  4a66              LDR      r2,|L1.1128|
0002ce  4290              CMP      r0,r2
0002d0  d304              BCC      |L1.732|
;;;528        S0SPCCR = 0x08;  // SPI0 clock counter setting
0002d2  2208              MOVS     r2,#8
0002d4  4b58              LDR      r3,|L1.1080|
0002d6  60da              STR      r2,[r3,#0xc]
;;;529        S0SPCR  = 0
0002d8  2238              MOVS     r2,#0x38
0002da  601a              STR      r2,[r3,#0]
                  |L1.732|
;;;530                 | (1 << 3)  // Clock phase control, data is sampled on second clock edge of SCK
;;;531                 | (1 << 4)  // CPOL, SCK is active low
;;;532                 | (1 << 5)  // MSTR, SPI operates in master mode
;;;533                 ;
;;;534      }
;;;535    }
0002dc  4770              BX       lr
;;;536    
                          ENDP

                  _LCD_WriteToReg PROC
;;;540    */
;;;541    static void _LCD_WriteToReg(unsigned short Addr, unsigned short Data) {
0002de  b570              PUSH     {r4-r6,lr}
0002e0  0005              MOVS     r5,r0
0002e2  000c              MOVS     r4,r1
;;;542      IO0CLR = (1 << 19);  // RESET_RS
0002e4  2001              MOVS     r0,#1
0002e6  04c0              LSLS     r0,r0,#19
0002e8  4952              LDR      r1,|L1.1076|
0002ea  60c8              STR      r0,[r1,#0xc]
;;;543      IO0CLR = (1 << 16);  // ACTIVATE_CS
0002ec  10c0              ASRS     r0,r0,#3
0002ee  60c8              STR      r0,[r1,#0xc]
;;;544      _SPI_Send(0);
0002f0  2000              MOVS     r0,#0
0002f2  f7fffffe          BL       _SPI_Send
;;;545      _SPI_Send(Addr);
0002f6  0628              LSLS     r0,r5,#24
0002f8  0e00              LSRS     r0,r0,#24
0002fa  f7fffffe          BL       _SPI_Send
;;;546      IO0SET = (1 << 16);  // DEACTIVATE_CS
0002fe  2001              MOVS     r0,#1
000300  0400              LSLS     r0,r0,#16
000302  494c              LDR      r1,|L1.1076|
000304  6048              STR      r0,[r1,#4]
;;;547      IO0SET = (1 << 19);  // SET_RS
000306  00c0              LSLS     r0,r0,#3
000308  6048              STR      r0,[r1,#4]
;;;548      IO0CLR = (1 << 16);  // ACTIVATE_CS
00030a  10c0              ASRS     r0,r0,#3
00030c  60c8              STR      r0,[r1,#0xc]
;;;549      _SPI_Send(Data >> 8);
00030e  1220              ASRS     r0,r4,#8
000310  f7fffffe          BL       _SPI_Send
;;;550      _SPI_Send(Data & 0xFF);
000314  0620              LSLS     r0,r4,#24
000316  0e00              LSRS     r0,r0,#24
000318  f7fffffe          BL       _SPI_Send
;;;551      IO0SET = (1 << 16);  // DEACTIVATE_CS
00031c  2001              MOVS     r0,#1
00031e  0400              LSLS     r0,r0,#16
000320  4944              LDR      r1,|L1.1076|
000322  6048              STR      r0,[r1,#4]
;;;552      IO0CLR = (1 << 19);  // RESET_RS
000324  00c0              LSLS     r0,r0,#3
000326  60c8              STR      r0,[r1,#0xc]
;;;553      IO0CLR = (1 << 16);  // ACTIVATE_CS
000328  10c0              ASRS     r0,r0,#3
00032a  60c8              STR      r0,[r1,#0xc]
;;;554      _SPI_Send(0);
00032c  2000              MOVS     r0,#0
00032e  f7fffffe          BL       _SPI_Send
;;;555      _SPI_Send(0x22);
000332  2022              MOVS     r0,#0x22
000334  f7fffffe          BL       _SPI_Send
;;;556      IO0SET = (1 << 16);  // DEACTIVATE_CS
000338  2001              MOVS     r0,#1
00033a  0400              LSLS     r0,r0,#16
00033c  493d              LDR      r1,|L1.1076|
00033e  6048              STR      r0,[r1,#4]
;;;557    }
000340  bc70              POP      {r4-r6}
000342  bc08              POP      {r3}
000344  4718              BX       r3
;;;558    
                          ENDP

                  _LCD_DisplayInit PROC
;;;562    */
;;;563    static void _LCD_DisplayInit(void) {
000346  b510              PUSH     {r4,lr}
;;;564      _LCD_WriteToReg(0x00,0x0001);
000348  2101              MOVS     r1,#1
00034a  2000              MOVS     r0,#0
00034c  f7fffffe          BL       _LCD_WriteToReg
;;;565      _Delay(20);
000350  2014              MOVS     r0,#0x14
000352  f7fffffe          BL       _Delay
;;;566      _LCD_WriteToReg(0x03,0xA2A4);
000356  4945              LDR      r1,|L1.1132|
000358  2003              MOVS     r0,#3
00035a  f7fffffe          BL       _LCD_WriteToReg
;;;567      _LCD_WriteToReg(0x0C,0x0004);
00035e  2104              MOVS     r1,#4
000360  200c              MOVS     r0,#0xc
000362  f7fffffe          BL       _LCD_WriteToReg
;;;568      _LCD_WriteToReg(0x0D,0x0308);
000366  2161              MOVS     r1,#0x61
000368  00c9              LSLS     r1,r1,#3
00036a  200d              MOVS     r0,#0xd
00036c  f7fffffe          BL       _LCD_WriteToReg
;;;569      _LCD_WriteToReg(0x0E,0x3000);
000370  2103              MOVS     r1,#3
000372  0309              LSLS     r1,r1,#12
000374  200e              MOVS     r0,#0xe
000376  f7fffffe          BL       _LCD_WriteToReg
;;;570      _Delay(50);
00037a  2032              MOVS     r0,#0x32
00037c  f7fffffe          BL       _Delay
;;;571      _LCD_WriteToReg(0x1E,0x00AF);
000380  21af              MOVS     r1,#0xaf
000382  201e              MOVS     r0,#0x1e
000384  f7fffffe          BL       _LCD_WriteToReg
;;;572      _LCD_WriteToReg(0x01,0x2B3F);
000388  4939              LDR      r1,|L1.1136|
00038a  2001              MOVS     r0,#1
00038c  f7fffffe          BL       _LCD_WriteToReg
;;;573      _LCD_WriteToReg(0x02,0x0600);
000390  2103              MOVS     r1,#3
000392  0249              LSLS     r1,r1,#9
000394  2002              MOVS     r0,#2
000396  f7fffffe          BL       _LCD_WriteToReg
;;;574      _LCD_WriteToReg(0x10,0x0000);
00039a  2100              MOVS     r1,#0
00039c  2010              MOVS     r0,#0x10
00039e  f7fffffe          BL       _LCD_WriteToReg
;;;575      _LCD_WriteToReg(0x07,0x0233);
0003a2  4934              LDR      r1,|L1.1140|
0003a4  2007              MOVS     r0,#7
0003a6  f7fffffe          BL       _LCD_WriteToReg
;;;576      _LCD_WriteToReg(0x0B,0x0039);
0003aa  2139              MOVS     r1,#0x39
0003ac  200b              MOVS     r0,#0xb
0003ae  f7fffffe          BL       _LCD_WriteToReg
;;;577      _LCD_WriteToReg(0x0F,0x0000);
0003b2  2100              MOVS     r1,#0
0003b4  200f              MOVS     r0,#0xf
0003b6  f7fffffe          BL       _LCD_WriteToReg
;;;578      _Delay(50);
0003ba  2032              MOVS     r0,#0x32
0003bc  f7fffffe          BL       _Delay
;;;579      _LCD_WriteToReg(0x30,0x0707);
0003c0  492d              LDR      r1,|L1.1144|
0003c2  2030              MOVS     r0,#0x30
0003c4  f7fffffe          BL       _LCD_WriteToReg
;;;580      _LCD_WriteToReg(0x31,0x0204);
0003c8  2181              MOVS     r1,#0x81
0003ca  0089              LSLS     r1,r1,#2
0003cc  2031              MOVS     r0,#0x31
0003ce  f7fffffe          BL       _LCD_WriteToReg
;;;581      _LCD_WriteToReg(0x32,0x0204);
0003d2  2181              MOVS     r1,#0x81
0003d4  0089              LSLS     r1,r1,#2
0003d6  2032              MOVS     r0,#0x32
0003d8  f7fffffe          BL       _LCD_WriteToReg
;;;582      _LCD_WriteToReg(0x33,0x0502);
0003dc  4927              LDR      r1,|L1.1148|
0003de  2033              MOVS     r0,#0x33
0003e0  f7fffffe          BL       _LCD_WriteToReg
;;;583      _LCD_WriteToReg(0x34,0x0507);
0003e4  4925              LDR      r1,|L1.1148|
0003e6  1d49              ADDS     r1,r1,#5
0003e8  2034              MOVS     r0,#0x34
0003ea  f7fffffe          BL       _LCD_WriteToReg
;;;584      _LCD_WriteToReg(0x35,0x0204);
0003ee  2181              MOVS     r1,#0x81
0003f0  0089              LSLS     r1,r1,#2
0003f2  2035              MOVS     r0,#0x35
0003f4  f7fffffe          BL       _LCD_WriteToReg
;;;585      _LCD_WriteToReg(0x36,0x0204);
0003f8  2181              MOVS     r1,#0x81
0003fa  0089              LSLS     r1,r1,#2
0003fc  2036              MOVS     r0,#0x36
0003fe  f7fffffe          BL       _LCD_WriteToReg
;;;586      _LCD_WriteToReg(0x37,0x0502);
000402  491e              LDR      r1,|L1.1148|
000404  2037              MOVS     r0,#0x37
000406  f7fffffe          BL       _LCD_WriteToReg
;;;587      _LCD_WriteToReg(0x3A,0x0302);
00040a  491a              LDR      r1,|L1.1140|
00040c  31cf              ADDS     r1,r1,#0xcf
00040e  203a              MOVS     r0,#0x3a
000410  f7fffffe          BL       _LCD_WriteToReg
;;;588      _LCD_WriteToReg(0x3B,0x0302);
000414  4917              LDR      r1,|L1.1140|
000416  31cf              ADDS     r1,r1,#0xcf
000418  203b              MOVS     r0,#0x3b
00041a  e031              B        |L1.1152|
                  |L1.1052|
00041c  0800              DCB      "\b",0
00041e  00                DCB      0
00041f  00                DCB      0
                  |L1.1056|
                          DCD      OS_Counters
                  |L1.1060|
                          DCD      0xe01fc0c0
                  |L1.1064|
                          DCD      0x3fffc040
                  |L1.1068|
                          DCD      0xe002c000
                  |L1.1072|
                          DCD      0xe0018000
                  |L1.1076|
                          DCD      0xe0028000
                  |L1.1080|
                          DCD      0xe0020000
                  |L1.1084|
                          DCD      0xfff000ff
                  |L1.1088|
                          DCD      0x00055400
                  |L1.1092|
                          DCD      0xf00000ff
                  |L1.1096|
                          DCD      0x05555400
                  |L1.1100|
                          DCD      0xf0300000
                  |L1.1104|
                          DCD      0x014ffffc
                  |L1.1108|
                          DCD      0xffe10000
                  |L1.1112|
                          DCD      0x1b090138
                  |L1.1116|
                          DCD      0x0201053f
                  |L1.1120|
                          DCD      0x00ef380b
                  |L1.1124|
                          DCD      0xffe10200
                  |L1.1128|
                          DCD      0x00001388
                  |L1.1132|
                          DCD      0x0000a2a4
                  |L1.1136|
                          DCD      0x00002b3f
                  |L1.1140|
                          DCD      0x00000233
                  |L1.1144|
                          DCD      0x00000707
                  |L1.1148|
                          DCD      0x00000502
                  |L1.1152|
000480  f7fffffe          BL       _LCD_WriteToReg
;;;589    
;;;590      _LCD_WriteToReg(0x23,0x0000);
000484  2100              MOVS     r1,#0
000486  2023              MOVS     r0,#0x23
000488  f7fffffe          BL       _LCD_WriteToReg
;;;591      _LCD_WriteToReg(0x24,0x0000);
00048c  2100              MOVS     r1,#0
00048e  2024              MOVS     r0,#0x24
000490  f7fffffe          BL       _LCD_WriteToReg
;;;592    
;;;593      _LCD_WriteToReg(0x48,0x0000);
000494  2100              MOVS     r1,#0
000496  2048              MOVS     r0,#0x48
000498  f7fffffe          BL       _LCD_WriteToReg
;;;594      _LCD_WriteToReg(0x49,0x013F);
00049c  21ff              MOVS     r1,#0xff
00049e  3140              ADDS     r1,r1,#0x40
0004a0  2049              MOVS     r0,#0x49
0004a2  f7fffffe          BL       _LCD_WriteToReg
;;;595      _LCD_WriteToReg(0x4A,0x0000);
0004a6  2100              MOVS     r1,#0
0004a8  204a              MOVS     r0,#0x4a
0004aa  f7fffffe          BL       _LCD_WriteToReg
;;;596      _LCD_WriteToReg(0x4B,0x0000);
0004ae  2100              MOVS     r1,#0
0004b0  204b              MOVS     r0,#0x4b
0004b2  f7fffffe          BL       _LCD_WriteToReg
;;;597    
;;;598      _LCD_WriteToReg(0x41,0x0000);
0004b6  2100              MOVS     r1,#0
0004b8  2041              MOVS     r0,#0x41
0004ba  f7fffffe          BL       _LCD_WriteToReg
;;;599      _LCD_WriteToReg(0x42,0x0000);
0004be  2100              MOVS     r1,#0
0004c0  2042              MOVS     r0,#0x42
0004c2  f7fffffe          BL       _LCD_WriteToReg
;;;600    
;;;601      _LCD_WriteToReg(0x44,0xEF00);
0004c6  21ef              MOVS     r1,#0xef
0004c8  0209              LSLS     r1,r1,#8
0004ca  2044              MOVS     r0,#0x44
0004cc  f7fffffe          BL       _LCD_WriteToReg
;;;602      _LCD_WriteToReg(0x45,0x0000);
0004d0  2100              MOVS     r1,#0
0004d2  2045              MOVS     r0,#0x45
0004d4  f7fffffe          BL       _LCD_WriteToReg
;;;603      _LCD_WriteToReg(0x46,0x013F);
0004d8  21ff              MOVS     r1,#0xff
0004da  3140              ADDS     r1,r1,#0x40
0004dc  2046              MOVS     r0,#0x46
0004de  f7fffffe          BL       _LCD_WriteToReg
;;;604      _Delay(50);
0004e2  2032              MOVS     r0,#0x32
0004e4  f7fffffe          BL       _Delay
;;;605      _LCD_WriteToReg(0x44,0xEF00);
0004e8  21ef              MOVS     r1,#0xef
0004ea  0209              LSLS     r1,r1,#8
0004ec  2044              MOVS     r0,#0x44
0004ee  f7fffffe          BL       _LCD_WriteToReg
;;;606      _LCD_WriteToReg(0x45,0x0000);
0004f2  2100              MOVS     r1,#0
0004f4  2045              MOVS     r0,#0x45
0004f6  f7fffffe          BL       _LCD_WriteToReg
;;;607      _LCD_WriteToReg(0x4E,0x0000);
0004fa  2100              MOVS     r1,#0
0004fc  204e              MOVS     r0,#0x4e
0004fe  f7fffffe          BL       _LCD_WriteToReg
;;;608      _LCD_WriteToReg(0x4F,0x0000);
000502  2100              MOVS     r1,#0
000504  204f              MOVS     r0,#0x4f
000506  f7fffffe          BL       _LCD_WriteToReg
;;;609      _LCD_WriteToReg(0x46,0x013F);
00050a  21ff              MOVS     r1,#0xff
00050c  3140              ADDS     r1,r1,#0x40
00050e  2046              MOVS     r0,#0x46
000510  f7fffffe          BL       _LCD_WriteToReg
;;;610    }
000514  bc10              POP      {r4}
000516  bc08              POP      {r3}
000518  4718              BX       r3
;;;611    
                          ENDP

                  _LCD_TurnOn PROC
;;;615    */
;;;616    static void _LCD_TurnOn(void) {
00051a  b510              PUSH     {r4,lr}
;;;617      LCD_CTRL |= (0
00051c  488a              LDR      r0,|L1.1864|
00051e  6980              LDR      r0,[r0,#0x18]
000520  498a              LDR      r1,|L1.1868|
000522  4308              ORRS     r0,r0,r1
000524  4988              LDR      r1,|L1.1864|
000526  6188              STR      r0,[r1,#0x18]
;;;618                   | (1 <<  0)  // Enable LCD
;;;619                   | (1 << 11)  // Power On
;;;620                  );
;;;621      _Delay(50);
000528  2032              MOVS     r0,#0x32
00052a  f7fffffe          BL       _Delay
;;;622      _LCD_DisplayInit();
00052e  f7fffffe          BL       _LCD_DisplayInit
;;;623      _LCD_SetBacklight(100);
000532  2064              MOVS     r0,#0x64
000534  f7fffffe          BL       _LCD_SetBacklight
;;;624    }
000538  bc10              POP      {r4}
00053a  bc08              POP      {r3}
00053c  4718              BX       r3
;;;625    
                          ENDP

                  _ExecTouch PROC
;;;629    */
;;;630    static void _ExecTouch(void) {
00053e  b510              PUSH     {r4,lr}
;;;631        GUI_TOUCH_Exec();
000540  f7fffffe          BL       GUI_TOUCH_Exec
;;;632        OS_RetriggerTimer(&_TouchTimer);
000544  4882              LDR      r0,|L1.1872|
000546  f7fffffe          BL       OS_RetriggerTimer
;;;633    }
00054a  bc10              POP      {r4}
00054c  bc08              POP      {r3}
00054e  4718              BX       r3
;;;634    
                          ENDP

                  _TouchInit PROC
;;;638    */
;;;639    static void _TouchInit(void) {
000550  4880              LDR      r0,|L1.1876|
;;;640      PINSEL0     |= 0xc0000000;
000552  6800              LDR      r0,[r0,#0]
000554  2103              MOVS     r1,#3
000556  0789              LSLS     r1,r1,#30
000558  4308              ORRS     r0,r0,r1
00055a  497e              LDR      r1,|L1.1876|
00055c  6008              STR      r0,[r1,#0]
;;;641      PINSEL1     |= 0x0000003c;
00055e  0008              MOVS     r0,r1
000560  6840              LDR      r0,[r0,#4]
000562  213c              MOVS     r1,#0x3c
000564  4308              ORRS     r0,r0,r1
000566  497b              LDR      r1,|L1.1876|
000568  6048              STR      r0,[r1,#4]
;;;642      IO0DIR      |= CS_PIN;
00056a  487b              LDR      r0,|L1.1880|
00056c  6880              LDR      r0,[r0,#8]
00056e  2101              MOVS     r1,#1
000570  0509              LSLS     r1,r1,#20
000572  4308              ORRS     r0,r0,r1
000574  4978              LDR      r1,|L1.1880|
000576  6088              STR      r0,[r1,#8]
;;;643      IO0SET       = CS_PIN;
000578  2001              MOVS     r0,#1
00057a  0500              LSLS     r0,r0,#20
00057c  6048              STR      r0,[r1,#4]
;;;644      SPI_S0SPCCR  = 57;
00057e  2039              MOVS     r0,#0x39
000580  4976              LDR      r1,|L1.1884|
000582  60c8              STR      r0,[r1,#0xc]
;;;645      SPI_S0SPCR   = 0x38;
000584  2038              MOVS     r0,#0x38
000586  6008              STR      r0,[r1,#0]
;;;646    }
000588  4770              BX       lr
;;;647    
                          ENDP

                  _Align PROC
;;;651    */
;;;652    static void * _Align(void * pMem, U32 NumBytes) {
00058a  0002              MOVS     r2,r0
;;;653     U32 Addr;
;;;654     Addr = (U32)pMem;
00058c  0010              MOVS     r0,r2
;;;655     NumBytes -= 1;
00058e  1e49              SUBS     r1,r1,#1
;;;656     Addr += NumBytes;
000590  1840              ADDS     r0,r0,r1
;;;657     Addr &= ~NumBytes;
000592  0003              MOVS     r3,r0
000594  438b              BICS     r3,r3,r1
000596  0018              MOVS     r0,r3
;;;658     return (void*)Addr;
;;;659    }
000598  4770              BX       lr
;;;660    
                          ENDP

                  _SetDisplayOrigin PROC
;;;664    */
;;;665    static void _SetDisplayOrigin(int x, int y) {
00059a  22ff              MOVS     r2,#0xff
;;;666      //
;;;667      // Set start address for display data and enable LCD controller
;;;668      //
;;;669      LCD_UPBASE  = (unsigned long) _VRAMAddr + (y * XSIZE_PHYS * PIXEL_WIDTH);   // Needs to be set, before LCDC is enabled
00059c  3241              ADDS     r2,r2,#0x41
00059e  434a              MULS     r2,r1,r2
0005a0  0052              LSLS     r2,r2,#1
0005a2  4b6f              LDR      r3,|L1.1888|
0005a4  681b              LDR      r3,[r3,#0]  ; _VRAMAddr
0005a6  18d2              ADDS     r2,r2,r3
0005a8  4b67              LDR      r3,|L1.1864|
0005aa  611a              STR      r2,[r3,#0x10]
;;;670    }
0005ac  4770              BX       lr
;;;671    
                          ENDP

                  BSP_Init PROC
;;;712    */
;;;713    void BSP_Init(void) {
0005ae  b510              PUSH     {r4,lr}
;;;714      //
;;;715      // Init I2C
;;;716      //
;;;717      I2CPCA9532_Init();
0005b0  f7fffffe          BL       I2CPCA9532_Init
;;;718    }
0005b4  bc10              POP      {r4}
0005b6  bc08              POP      {r3}
0005b8  4718              BX       r3
;;;719    
                          ENDP

                  BSP_SetLED PROC
;;;723    */
;;;724    void BSP_SetLED(int Index) {
0005ba  b510              PUSH     {r4,lr}
0005bc  0004              MOVS     r4,r0
;;;725      _SetLEDState(Index, LED_SET);
0005be  0620              LSLS     r0,r4,#24
0005c0  0e00              LSRS     r0,r0,#24
0005c2  2100              MOVS     r1,#0
0005c4  f7fffffe          BL       _SetLEDState
;;;726    }
0005c8  bc10              POP      {r4}
0005ca  bc08              POP      {r3}
0005cc  4718              BX       r3
;;;727    
                          ENDP

                  BSP_ToggleLED PROC
;;;731    
;;;732    void BSP_ToggleLED(int Index) {
0005ce  b510              PUSH     {r4,lr}
0005d0  0004              MOVS     r4,r0
;;;733      _SetLEDState(Index, LED_TOGGLE);
0005d2  0620              LSLS     r0,r4,#24
0005d4  0e00              LSRS     r0,r0,#24
0005d6  2102              MOVS     r1,#2
0005d8  f7fffffe          BL       _SetLEDState
;;;734    }
0005dc  bc10              POP      {r4}
0005de  bc08              POP      {r3}
0005e0  4718              BX       r3
;;;735    
                          ENDP

                  _InitLCDController PROC
;;;742    */
;;;743    static void _InitLCDController(unsigned LayerIndex) {
0005e2  b5f8              PUSH     {r3-r7,lr}
0005e4  0006              MOVS     r6,r0
;;;744      U32 TouchOrientation;
;;;745    
;;;746      //
;;;747      // Calibrate touch
;;;748      //
;;;749      TouchOrientation = (GUI_MIRROR_X * LCD_GetMirrorXEx(0)) |
0005e6  2000              MOVS     r0,#0
0005e8  f7fffffe          BL       LCD_GetMirrorXEx
0005ec  0005              MOVS     r5,r0
0005ee  2000              MOVS     r0,#0
0005f0  f7fffffe          BL       LCD_GetMirrorYEx
0005f4  0040              LSLS     r0,r0,#1
0005f6  4305              ORRS     r5,r5,r0
0005f8  2000              MOVS     r0,#0
0005fa  f7fffffe          BL       LCD_GetSwapXYEx
0005fe  0080              LSLS     r0,r0,#2
000600  4305              ORRS     r5,r5,r0
000602  002c              MOVS     r4,r5
;;;750                         (GUI_MIRROR_Y * LCD_GetMirrorYEx(0)) |
;;;751                         (GUI_SWAP_XY  * LCD_GetSwapXYEx (0)) ;
;;;752      GUI_TOUCH_SetOrientation(TouchOrientation);
000604  0020              MOVS     r0,r4
000606  f7fffffe          BL       GUI_TOUCH_SetOrientation
;;;753      GUI_TOUCH_Calibrate(GUI_COORD_X, 0, 240, TOUCH_AD_TOP , TOUCH_AD_BOTTOM);  // x axis
00060a  4856              LDR      r0,|L1.1892|
00060c  23b8              MOVS     r3,#0xb8
00060e  22f0              MOVS     r2,#0xf0
000610  2100              MOVS     r1,#0
000612  9000              STR      r0,[sp,#0]
000614  0008              MOVS     r0,r1
000616  f7fffffe          BL       GUI_TOUCH_Calibrate
;;;754      GUI_TOUCH_Calibrate(GUI_COORD_Y, 0, 320, TOUCH_AD_LEFT, TOUCH_AD_RIGHT);   // y axis
00061a  4852              LDR      r0,|L1.1892|
00061c  383c              SUBS     r0,r0,#0x3c
00061e  239a              MOVS     r3,#0x9a
000620  22ff              MOVS     r2,#0xff
000622  3241              ADDS     r2,r2,#0x41
000624  2100              MOVS     r1,#0
000626  9000              STR      r0,[sp,#0]
000628  2001              MOVS     r0,#1
00062a  f7fffffe          BL       GUI_TOUCH_Calibrate
;;;755      //
;;;756      // LCD Init
;;;757      //
;;;758      _VRAMAddr = (U32)_Align((void *)VRAM_ADDR, 8);
00062e  2108              MOVS     r1,#8
000630  484d              LDR      r0,|L1.1896|
000632  f7fffffe          BL       _Align
000636  494a              LDR      r1,|L1.1888|
000638  6008              STR      r0,[r1,#0]  ; _VRAMAddr
;;;759      _LCD_HW_Init();
00063a  f7fffffe          BL       _LCD_HW_Init
;;;760      _LCD_SetBacklight(0);
00063e  2000              MOVS     r0,#0
000640  f7fffffe          BL       _LCD_SetBacklight
;;;761      _LCD_Ctrl_Init();
000644  f7fffffe          BL       _LCD_Ctrl_Init
;;;762      LCD_UPBASE = _VRAMAddr;
000648  4845              LDR      r0,|L1.1888|
00064a  6800              LDR      r0,[r0,#0]  ; _VRAMAddr
00064c  493e              LDR      r1,|L1.1864|
00064e  6108              STR      r0,[r1,#0x10]
;;;763      _LCD_TurnOn();
000650  f7fffffe          BL       _LCD_TurnOn
;;;764      //
;;;765      // Setup LCD touch
;;;766      //
;;;767      _TouchInit();
000654  f7fffffe          BL       _TouchInit
;;;768      OS_CREATETIMER(&_TouchTimer, _ExecTouch, TOUCHTIMERINTERVAL);
000658  220a              MOVS     r2,#0xa
00065a  4944              LDR      r1,|L1.1900|
00065c  483c              LDR      r0,|L1.1872|
00065e  f7fffffe          BL       OS_CreateTimer
000662  483b              LDR      r0,|L1.1872|
000664  f7fffffe          BL       OS_StartTimer
;;;769    }
000668  bcf8              POP      {r3-r7}
00066a  bc08              POP      {r3}
00066c  4718              BX       r3
;;;770    
                          ENDP

                  LCD_X_DisplayDriver PROC
;;;786    */
;;;787    int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) {
00066e  b5f8              PUSH     {r3-r7,lr}
000670  0007              MOVS     r7,r0
000672  000e              MOVS     r6,r1
000674  0014              MOVS     r4,r2
;;;788      LCD_X_SETORG_INFO * pSetOrg;
;;;789    
;;;790      switch (Cmd) {
000676  2e01              CMP      r6,#1
000678  d002              BEQ      |L1.1664|
00067a  2e03              CMP      r6,#3
00067c  d10b              BNE      |L1.1686|
00067e  e003              B        |L1.1672|
                  |L1.1664|
;;;791      //
;;;792      // Required
;;;793      //
;;;794      case LCD_X_INITCONTROLLER:
;;;795        //
;;;796        // Called during the initialization process in order to set up the
;;;797        // display controller and put it into operation. If the display
;;;798        // controller is not initialized by any external routine this needs
;;;799        // to be adapted by the customer...
;;;800        //
;;;801        _InitLCDController(LayerIndex);
000680  0038              MOVS     r0,r7
000682  f7fffffe          BL       _InitLCDController
;;;802        break;
000686  e006              B        |L1.1686|
                  |L1.1672|
;;;803      case LCD_X_SETORG:
;;;804        //
;;;805        // Required for setting the display origin which is passed in the 'xPos' and 'yPos' element of p
;;;806        //
;;;807        pSetOrg = (LCD_X_SETORG_INFO *)pData;
000688  0025              MOVS     r5,r4
;;;808        _SetDisplayOrigin(pSetOrg->xPos, pSetOrg->yPos);
00068a  002c              MOVS     r4,r5
00068c  0028              MOVS     r0,r5
00068e  c803              LDM      r0,{r0,r1}
000690  f7fffffe          BL       _SetDisplayOrigin
000694  46c0              MOV      r8,r8                 ;790
                  |L1.1686|
000696  46c0              MOV      r8,r8                 ;802
;;;809      }
;;;810      return 0;
000698  2000              MOVS     r0,#0
;;;811    }
00069a  bcf8              POP      {r3-r7}
00069c  bc08              POP      {r3}
00069e  4718              BX       r3
;;;812    
                          ENDP

                  BSP_USBH_InstallISR PROC
;;;845    */
;;;846    void BSP_USBH_InstallISR(void (*pfISR)(void)) {
0006a0  b510              PUSH     {r4,lr}
0006a2  0004              MOVS     r4,r0
;;;847      OS_ARM_InstallISRHandler(INT_INDEX_USB, pfISR);     // Timer/counter interrupt vector.
0006a4  0021              MOVS     r1,r4
0006a6  2016              MOVS     r0,#0x16
0006a8  f7fffffe          BL       OS_ARM_InstallISRHandler
;;;848      OS_ARM_EnableISR(INT_INDEX_USB);                    // Enable timer/counter 0 interrupt.
0006ac  2016              MOVS     r0,#0x16
0006ae  f7fffffe          BL       OS_ARM_EnableISR
;;;849      OS_ARM_ISRSetPrio(INT_INDEX_USB, 2);               // lowest priority
0006b2  2102              MOVS     r1,#2
0006b4  2016              MOVS     r0,#0x16
0006b6  f7fffffe          BL       OS_ARM_ISRSetPrio
;;;850    }
0006ba  bc10              POP      {r4}
0006bc  bc08              POP      {r3}
0006be  4718              BX       r3
;;;851    
                          ENDP

                  BSP_USBH_Init PROC
;;;883    */
;;;884    void BSP_USBH_Init(void) {
0006c0  482b              LDR      r0,|L1.1904|
;;;885      //
;;;886      // power the USB block
;;;887      //
;;;888      PCONP |= PCUSB;
0006c2  6840              LDR      r0,[r0,#4]
0006c4  2101              MOVS     r1,#1
0006c6  07c9              LSLS     r1,r1,#31
0006c8  4308              ORRS     r0,r0,r1
0006ca  4929              LDR      r1,|L1.1904|
0006cc  6048              STR      r0,[r1,#4]
;;;889      //
;;;890      // Enable USB host and USB OTG clock
;;;891      //
;;;892      OTG_CLK_CTRL  |= USB_HOST_CLK_EN | USB_OTG_CLK_EN | USB_AHB_CLK_EN;
0006ce  4829              LDR      r0,|L1.1908|
0006d0  6b40              LDR      r0,[r0,#0x34]
0006d2  2119              MOVS     r1,#0x19
0006d4  4308              ORRS     r0,r0,r1
0006d6  4927              LDR      r1,|L1.1908|
0006d8  6348              STR      r0,[r1,#0x34]
;;;893      while( (OTG_CLK_STAT & (USB_HOST_CLK_EN | USB_OTG_CLK_EN | USB_AHB_CLK_EN)) != (USB_HOST_CLK_EN | USB_OTG_CLK_EN | USB_AHB_CLK_EN));
0006da  46c0              MOV      r8,r8
                  |L1.1756|
0006dc  4825              LDR      r0,|L1.1908|
0006de  6b80              LDR      r0,[r0,#0x38]
0006e0  2119              MOVS     r1,#0x19
0006e2  4008              ANDS     r0,r0,r1
0006e4  2819              CMP      r0,#0x19
0006e6  d1f9              BNE      |L1.1756|
;;;894    	//
;;;895      // Configure the pins for port1 OTG
;;;896    	// The USB device is connected to port 1 	
;;;897    	// port2 Host port
;;;898    	// P0.12    = USB-2:PORT_PWRn
;;;899    	// P0.13    = USB-2:LEDn
;;;900    	// P0.13    = USB-2:HostEN2 enable the 15k pull downs, static +5V
;;;901    	// P0.15 = GPIO
;;;902      //
;;;903    	PINSEL0 |= PS0_P012_USB_PPWR2 | PS0_P013_USB_UP_LED2;
0006e8  481a              LDR      r0,|L1.1876|
0006ea  6800              LDR      r0,[r0,#0]
0006ec  2105              MOVS     r1,#5
0006ee  0609              LSLS     r1,r1,#24
0006f0  4308              ORRS     r0,r0,r1
0006f2  4918              LDR      r1,|L1.1876|
0006f4  6008              STR      r0,[r1,#0]
;;;904    	//
;;;905      // if P0.14 does not correct switch disable P0.14 function
;;;906      //  configure P014 as GPIO Output */
;;;907    	IO0DIR |= (1 << 14); /* P0.14 is an output */
0006f6  4818              LDR      r0,|L1.1880|
0006f8  6880              LDR      r0,[r0,#8]
0006fa  2101              MOVS     r1,#1
0006fc  0389              LSLS     r1,r1,#14
0006fe  4308              ORRS     r0,r0,r1
000700  4915              LDR      r1,|L1.1880|
000702  6088              STR      r0,[r1,#8]
;;;908    	IO0CLR  = (1 << 14); /* P0.14 is 0, enabling the pull-downs */
000704  2001              MOVS     r0,#1
000706  0380              LSLS     r0,r0,#14
000708  60c8              STR      r0,[r1,#0xc]
;;;909    	//		
;;;910    	// P0.29 = USB1:D+
;;;911      // P0.30 = USB1:D-
;;;912      // P0.31 = USB2:D+
;;;913      //
;;;914    	PINSEL1 |= PS1_P029_USB_DP1 | PS1_P030_USB_DM1 | PS1_P031_USB_DP2;
00070a  4812              LDR      r0,|L1.1876|
00070c  6840              LDR      r0,[r0,#4]
00070e  2115              MOVS     r1,#0x15
000710  0689              LSLS     r1,r1,#26
000712  4308              ORRS     r0,r0,r1
000714  490f              LDR      r1,|L1.1876|
000716  6048              STR      r0,[r1,#4]
;;;915    	PINSEL3 |= PS3_P118_USB_UP_LED1 // P1.18 = USBOTG:LEDn
000718  0008              MOVS     r0,r1
00071a  68c0              LDR      r0,[r0,#0xc]
00071c  4916              LDR      r1,|L1.1912|
00071e  4308              ORRS     r0,r0,r1
000720  490c              LDR      r1,|L1.1876|
000722  60c8              STR      r0,[r1,#0xc]
;;;916              |  PS3_P130_USB_PWRD2		// P1.30 = USB2:POWEREDn
;;;917              |  PS3_P131_USB_OVECR2;	// P1.31 = USB2:OVR_CRNTn
;;;918    
;;;919      /* In all configurations,
;;;920         disable the pull ups on P1.27 (OTG interrupt input)
;;;921         and P1.30 (Host Port 2 Power status)
;;;922      */
;;;923      PINMODE3 &=~ (PINMODE_GET_16_TO_31(27,PIN_MODE_MASK)
000724  480b              LDR      r0,|L1.1876|
000726  3040              ADDS     r0,r0,#0x40
000728  68c0              LDR      r0,[r0,#0xc]
00072a  211b              MOVS     r1,#0x1b
00072c  02c9              LSLS     r1,r1,#11
00072e  4388              BICS     r0,r0,r1
000730  4908              LDR      r1,|L1.1876|
000732  3140              ADDS     r1,r1,#0x40
000734  60c8              STR      r0,[r1,#0xc]
;;;924    						   | PINMODE_GET_16_TO_31(30,PIN_MODE_MASK) );
;;;925      PINMODE3 |= PINMODE_GET_16_TO_31(27,PIN_MODE_NO_PULLS)
000736  0008              MOVS     r0,r1
000738  68c0              LDR      r0,[r0,#0xc]
00073a  2109              MOVS     r1,#9
00073c  0309              LSLS     r1,r1,#12
00073e  4308              ORRS     r0,r0,r1
000740  4904              LDR      r1,|L1.1876|
000742  3140              ADDS     r1,r1,#0x40
000744  60c8              STR      r0,[r1,#0xc]
;;;926      					  | PINMODE_GET_16_TO_31(30,PIN_MODE_NO_PULLS);
;;;927    }
000746  4770              BX       lr
;;;928    
                          ENDP

                  |L1.1864|
                          DCD      0xffe10000
                  |L1.1868|
                          DCD      0x00000801
                  |L1.1872|
                          DCD      _TouchTimer
                  |L1.1876|
                          DCD      0xe002c000
                  |L1.1880|
                          DCD      0xe0028000
                  |L1.1884|
                          DCD      0xe0020000
                  |L1.1888|
                          DCD      _VRAMAddr
                  |L1.1892|
                          DCD      0x00000f36
                  |L1.1896|
                          DCD      _aVRAM
                  |L1.1900|
                          DCD      _ExecTouch
                  |L1.1904|
                          DCD      0xe01fc0c0
                  |L1.1908|
                          DCD      0xffe0cfc0
                  |L1.1912|
                          DCD      0x50000010

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  BSP_ETH_Init PROC
;;;307    */
;;;308    static void _Delay(int ms) {
000000  4909              LDR      r1,|L2.40|
;;;309      volatile int i;
;;;310    
;;;311      for (i = 0; i < (50 * ms); i++) {}  // Delay of x * 1ms
000002  6bc9              LDR      r1,[r1,#0x3c]
000004  4a09              LDR      r2,|L2.44|
000006  4291              CMP      r1,r2
000008  d103              BNE      |L2.18|
00000a  4909              LDR      r1,|L2.48|
00000c  4a09              LDR      r2,|L2.52|
00000e  6091              STR      r1,[r2,#8]
000010  e002              B        |L2.24|
                  |L2.18|
000012  4909              LDR      r1,|L2.56|
000014  4a07              LDR      r2,|L2.52|
000016  6091              STR      r1,[r2,#8]
                  |L2.24|
;;;312    }
000018  4906              LDR      r1,|L2.52|
00001a  68c9              LDR      r1,[r1,#0xc]
00001c  0909              LSRS     r1,r1,#4
00001e  0109              LSLS     r1,r1,#4
000020  1d49              ADDS     r1,r1,#5
000022  4a04              LDR      r2,|L2.52|
000024  60d1              STR      r1,[r2,#0xc]
000026  4770              BX       lr
;;;313    
                          ENDP

                  |L2.40|
                          DCD      0xffe00fc0
                  |L2.44|
                          DCD      0x39022000
                  |L2.48|
                          DCD      0x50151105
                  |L2.52|
                          DCD      0xe002c000
                  |L2.56|
                          DCD      0x50150105

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.3||, ||.text||
                  BSP_ETH_InstallISR PROC
;;;307    */
;;;308    static void _Delay(int ms) {
000000  b510              PUSH     {r4,lr}
;;;309      volatile int i;
;;;310    
;;;311      for (i = 0; i < (50 * ms); i++) {}  // Delay of x * 1ms
000002  0004              MOVS     r4,r0
000004  0021              MOVS     r1,r4
000006  2015              MOVS     r0,#0x15
000008  f7fffffe          BL       OS_ARM_InstallISRHandler
00000c  2015              MOVS     r0,#0x15
00000e  f7fffffe          BL       OS_ARM_EnableISR
000012  210f              MOVS     r1,#0xf
000014  2015              MOVS     r0,#0x15
000016  f7fffffe          BL       OS_ARM_ISRSetPrio
;;;312    }
00001a  bc10              POP      {r4}
00001c  bc08              POP      {r3}
00001e  4718              BX       r3
;;;313    
                          ENDP


                          AREA ||area_number.4||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.4||, ||.text||
                  BSP_ClrLED PROC
;;;307    */
;;;308    static void _Delay(int ms) {
000000  b510              PUSH     {r4,lr}
;;;309      volatile int i;
;;;310    
;;;311      for (i = 0; i < (50 * ms); i++) {}  // Delay of x * 1ms
000002  0004              MOVS     r4,r0
000004  0620              LSLS     r0,r4,#24
000006  0e00              LSRS     r0,r0,#24
000008  2101              MOVS     r1,#1
00000a  f7fffffe          BL       _SetLEDState
00000e  bc10              POP      {r4}
000010  bc08              POP      {r3}
000012  4718              BX       r3
;;;312    }
;;;313    
                          ENDP


                          AREA ||area_number.5||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.text||
                  LCD_X_Config PROC
;;;307    */
;;;308    static void _Delay(int ms) {
000000  b510              PUSH     {r4,lr}
;;;309      volatile int i;
;;;310    
;;;311      for (i = 0; i < (50 * ms); i++) {}  // Delay of x * 1ms
000002  2108              MOVS     r1,#8
000004  480f              LDR      r0,|L5.68|
000006  f7fffffe          BL       _Align
00000a  490f              LDR      r1,|L5.72|
00000c  6008              STR      r0,[r1,#0]  ; _VRAMAddr
00000e  2300              MOVS     r3,#0
000010  001a              MOVS     r2,r3
000012  490e              LDR      r1,|L5.76|
000014  480e              LDR      r0,|L5.80|
000016  f7fffffe          BL       GUI_DEVICE_CreateAndLink
;;;312    }
00001a  22f0              MOVS     r2,#0xf0
00001c  21ff              MOVS     r1,#0xff
00001e  3141              ADDS     r1,r1,#0x41
000020  2000              MOVS     r0,#0
000022  f7fffffe          BL       LCD_SetSizeEx
000026  22f0              MOVS     r2,#0xf0
000028  2105              MOVS     r1,#5
00002a  01c9              LSLS     r1,r1,#7
00002c  2000              MOVS     r0,#0
00002e  f7fffffe          BL       LCD_SetVSizeEx
000032  4805              LDR      r0,|L5.72|
000034  6801              LDR      r1,[r0,#0]  ; _VRAMAddr
000036  2000              MOVS     r0,#0
000038  f7fffffe          BL       LCD_SetVRAMAddrEx
00003c  bc10              POP      {r4}
00003e  bc08              POP      {r3}
000040  4718              BX       r3
;;;313    
                          ENDP

000042  0000              DCW      0x0000
                  |L5.68|
                          DCD      _aVRAM
                  |L5.72|
                          DCD      _VRAMAddr
                  |L5.76|
                          DCD      LCD_API_ColorConv_565
                  |L5.80|
                          DCD      GUIDRV_Lin_OSX_16_API

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  _aVRAM
                          %        307232
                  _TouchTimer
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  _VRAMAddr
                          DCD      0x00000000

                          AREA ||i.__ARM_common_enable_irq||, COMGROUP=__ARM_common_enable_irq, CODE, READONLY, ALIGN=2

                          ARM
                  __ARM_common_enable_irq PROC
000000  e10f0000          MRS      r0,APSR ; formerly CPSR
000004  e3c00080          BIC      r0,r0,#0x80
000008  e121f000          MSR      CPSR_c,r0
00000c  e12fff1e          BX       lr
                          ENDP


                          AREA ||i.__ARM_common_disable_irq||, COMGROUP=__ARM_common_disable_irq, CODE, READONLY, ALIGN=2

                  __ARM_common_disable_irq PROC
000000  e10f0000          MRS      r0,APSR ; formerly CPSR
000004  e3801080          ORR      r1,r0,#0x80
000008  e121f001          MSR      CPSR_c,r1
00000c  e2000080          AND      r0,r0,#0x80
000010  e12fff1e          BX       lr
                          ENDP

