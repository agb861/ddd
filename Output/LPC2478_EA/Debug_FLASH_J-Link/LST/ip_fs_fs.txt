; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--thumb --list --debug -c --asm --interleave -o.\output\lpc2478_ea\debug_flash_j-link\obj\ip_fs_fs.o --asm_dir=.\Output\LPC2478_EA\Debug_FLASH_J-Link\LST\ --list_dir=.\Output\LPC2478_EA\Debug_FLASH_J-Link\LST\ --depend=.\output\lpc2478_ea\debug_flash_j-link\obj\ip_fs_fs.d --apcs=interwork -O0 -IApplication\SEGGERDEMO -IApplication\SEGGERDEMO\Src -ISetup -IInc -IConfig -IFS -IIP -IIP\IP_FS\FS_RO\Generated -IGUI -IOS -IUSB -IUSBH -I"C:\Program Files (x86)\Keil\V473\ARM\RV31\INC" -I"C:\Program Files (x86)\Keil\V473\ARM\CMSIS\Include" -I"C:\Program Files (x86)\Keil\V473\ARM\Inc\Philips" -DDEBUG=1 --omf_browse=.\output\lpc2478_ea\debug_flash_j-link\obj\ip_fs_fs.crf IP\IP_FS\emFile\IP_FS_FS.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  _InitIfRequired PROC
;;;45     */
;;;46     static void _InitIfRequired(void) {
000000  b510              PUSH     {r4,lr}
;;;47       if (_IsInited == 0) {
000002  489e              LDR      r0,|L1.636|
000004  7800              LDRB     r0,[r0,#0]  ; _IsInited
000006  2800              CMP      r0,#0
000008  d118              BNE      |L1.60|
;;;48         FS_Init();
00000a  f7fffffe          BL       FS_Init
;;;49         FS_FormatLLIfRequired(_sVolumeName);
00000e  489c              LDR      r0,|L1.640|
000010  6800              LDR      r0,[r0,#0]  ; _sVolumeName
000012  f7fffffe          BL       FS_FormatLLIfRequired
;;;50         //
;;;51         // Check if volume needs to be high level formatted.
;;;52         //
;;;53         if (FS_IsHLFormatted(_sVolumeName) == 0) {
000016  489a              LDR      r0,|L1.640|
000018  6800              LDR      r0,[r0,#0]  ; _sVolumeName
00001a  f7fffffe          BL       FS_IsHLFormatted
00001e  2800              CMP      r0,#0
000020  d109              BNE      |L1.54|
;;;54           printf("High level formatting: %s\n", _sVolumeName);
000022  4897              LDR      r0,|L1.640|
000024  6801              LDR      r1,[r0,#0]  ; _sVolumeName
000026  a097              ADR      r0,|L1.644|
000028  f7fffffe          BL       __2printf
;;;55           FS_Format(_sVolumeName, NULL);
00002c  2100              MOVS     r1,#0
00002e  4894              LDR      r0,|L1.640|
000030  6800              LDR      r0,[r0,#0]  ; _sVolumeName
000032  f7fffffe          BL       FS_Format
                  |L1.54|
;;;56         }
;;;57         //
;;;58         // Enable long file name support if LFN package is available.
;;;59         // LFN is an optional emFile package!
;;;60         //
;;;61     //    FS_FAT_SupportLFN();
;;;62         _IsInited = 1;
000036  2001              MOVS     r0,#1
000038  4990              LDR      r1,|L1.636|
00003a  7008              STRB     r0,[r1,#0]
                  |L1.60|
;;;63       }
;;;64     }
00003c  bc10              POP      {r4}
00003e  bc08              POP      {r3}
000040  4718              BX       r3
;;;65     
                          ENDP

                  _ConvertPath PROC
;;;85     */
;;;86     static int _ConvertPath(const char * sFilename, char * sOutFilename, U32 BufferSize) {
000042  b410              PUSH     {r4}
000044  0003              MOVS     r3,r0
000046  0014              MOVS     r4,r2
;;;87       char c;
;;;88     
;;;89       do {
000048  46c0              MOV      r8,r8
                  |L1.74|
;;;90         if (--BufferSize <= 0) {
00004a  1e60              SUBS     r0,r4,#1
00004c  0004              MOVS     r4,r0
00004e  d100              BNE      |L1.82|
;;;91           break;                  // Buffer full. We have to stop.
000050  e00a              B        |L1.104|
                  |L1.82|
;;;92         }
;;;93         c = *sFilename++;
000052  781a              LDRB     r2,[r3,#0]
000054  1c5b              ADDS     r3,r3,#1
;;;94         if (c == 0) {
000056  2a00              CMP      r2,#0
000058  d100              BNE      |L1.92|
;;;95           break;                  // End of string
00005a  e005              B        |L1.104|
                  |L1.92|
;;;96         }
;;;97         if (c == '/') {
00005c  2a2f              CMP      r2,#0x2f
00005e  d100              BNE      |L1.98|
;;;98           c = '\\';
000060  225c              MOVS     r2,#0x5c
                  |L1.98|
;;;99         }
;;;100        *sOutFilename++ = c;
000062  700a              STRB     r2,[r1,#0]
000064  1c49              ADDS     r1,r1,#1
;;;101      } while (1);
000066  e7f0              B        |L1.74|
                  |L1.104|
000068  46c0              MOV      r8,r8                 ;91
;;;102      *sOutFilename++ = 0;
00006a  2000              MOVS     r0,#0
00006c  7008              STRB     r0,[r1,#0]
00006e  1c49              ADDS     r1,r1,#1
;;;103      return 0;
;;;104    }
000070  bc10              POP      {r4}
000072  4770              BX       lr
;;;105    
                          ENDP

                  _FS_Open PROC
;;;110    */
;;;111    static void * _FS_Open  (const char *sFilename) {
000074  b510              PUSH     {r4,lr}
000076  b0a0              SUB      sp,sp,#0x80
000078  0004              MOVS     r4,r0
;;;112      char acAbsFilename[MAX_PATH];
;;;113    
;;;114      _InitIfRequired();         // Perform automatic initialisation so that explicit call to FS_Init is not required
00007a  f7fffffe          BL       _InitIfRequired
;;;115      _ConvertPath(sFilename, acAbsFilename, sizeof(acAbsFilename));
00007e  2280              MOVS     r2,#0x80
000080  4669              MOV      r1,sp
000082  0020              MOVS     r0,r4
000084  f7fffffe          BL       _ConvertPath
;;;116      return FS_FOpen(acAbsFilename, "r");
000088  a185              ADR      r1,|L1.672|
00008a  4668              MOV      r0,sp
00008c  f7fffffe          BL       FS_FOpen
;;;117    }
000090  b020              ADD      sp,sp,#0x80
000092  bc10              POP      {r4}
000094  bc08              POP      {r3}
000096  4718              BX       r3
;;;118    
                          ENDP

                  _Close PROC
;;;122    */
;;;123    static int _Close (void * hFile) {
000098  b510              PUSH     {r4,lr}
00009a  0004              MOVS     r4,r0
;;;124      _InitIfRequired();         // Perform automatic initialisation so that explicit call to FS_Init is not required
00009c  f7fffffe          BL       _InitIfRequired
;;;125      return FS_FClose((FS_FILE*) hFile);
0000a0  0020              MOVS     r0,r4
0000a2  f7fffffe          BL       FS_FClose
;;;126    }
0000a6  bc10              POP      {r4}
0000a8  bc08              POP      {r3}
0000aa  4718              BX       r3
;;;127    
                          ENDP

                  _ReadAt PROC
;;;131    */
;;;132    static int _ReadAt(void * hFile, void *pDest, U32 Pos, U32 NumBytes) {
0000ac  b5f8              PUSH     {r3-r7,lr}
0000ae  0006              MOVS     r6,r0
0000b0  000f              MOVS     r7,r1
0000b2  0014              MOVS     r4,r2
0000b4  001d              MOVS     r5,r3
;;;133      _InitIfRequired();         // Perform automatic initialisation so that explicit call to FS_Init is not required
0000b6  f7fffffe          BL       _InitIfRequired
;;;134      FS_FSeek((FS_FILE*) hFile, Pos, FS_SEEK_SET);
0000ba  2200              MOVS     r2,#0
0000bc  0021              MOVS     r1,r4
0000be  0030              MOVS     r0,r6
0000c0  f7fffffe          BL       FS_FSeek
;;;135      FS_Read((FS_FILE*) hFile, pDest, NumBytes);
0000c4  002a              MOVS     r2,r5
0000c6  0039              MOVS     r1,r7
0000c8  0030              MOVS     r0,r6
0000ca  f7fffffe          BL       FS_Read
;;;136      return 0;
0000ce  2000              MOVS     r0,#0
;;;137    }
0000d0  bcf8              POP      {r3-r7}
0000d2  bc08              POP      {r3}
0000d4  4718              BX       r3
;;;138    
                          ENDP

                  _GetLen PROC
;;;142    */
;;;143    static long _GetLen(void * hFile) {
0000d6  b510              PUSH     {r4,lr}
0000d8  0004              MOVS     r4,r0
;;;144      _InitIfRequired();         // Perform automatic initialisation so that explicit call to FS_Init is not required
0000da  f7fffffe          BL       _InitIfRequired
;;;145      return FS_GetFileSize((FS_FILE*) hFile);
0000de  0020              MOVS     r0,r4
0000e0  f7fffffe          BL       FS_GetFileSize
;;;146    
;;;147    }
0000e4  bc10              POP      {r4}
0000e6  bc08              POP      {r3}
0000e8  4718              BX       r3
;;;148    
                          ENDP

                  _ForEachDirEntry PROC
;;;152    */
;;;153    static void _ForEachDirEntry (void * pContext, const char * sDir, void (*pf) (void * pContext, void * pFileEntry)) {
0000ea  b570              PUSH     {r4-r6,lr}
0000ec  b0d0              SUB      sp,sp,#0x140
0000ee  0006              MOVS     r6,r0
0000f0  000c              MOVS     r4,r1
0000f2  0015              MOVS     r5,r2
;;;154      FS_FIND_DATA fd;
;;;155      char acDirname[MAX_PATH];
;;;156      char acFilename[MAX_PATH];
;;;157    
;;;158      _InitIfRequired();         // Perform automatic initialisation so that explicit call to FS_Init is not required
0000f4  f7fffffe          BL       _InitIfRequired
;;;159      _ConvertPath(sDir, acDirname, sizeof(acDirname));
0000f8  2280              MOVS     r2,#0x80
0000fa  a921              ADD      r1,sp,#0x84
0000fc  0020              MOVS     r0,r4
0000fe  f7fffffe          BL       _ConvertPath
;;;160      if (FS_FindFirstFile(&fd, acDirname, acFilename, sizeof(acFilename)) == 0) {
000102  2380              MOVS     r3,#0x80
000104  aa01              ADD      r2,sp,#4
000106  a921              ADD      r1,sp,#0x84
000108  a841              ADD      r0,sp,#0x104
00010a  f7fffffe          BL       FS_FindFirstFile
00010e  2800              CMP      r0,#0
000110  d109              BNE      |L1.294|
;;;161        do {
000112  46c0              MOV      r8,r8
                  |L1.276|
;;;162          pf(pContext, &fd);
000114  a941              ADD      r1,sp,#0x104
000116  0030              MOVS     r0,r6
000118  f7fffffe          BL       __ARM_common_call_via_r5
;;;163        } while (FS_FindNextFile (&fd));
00011c  a841              ADD      r0,sp,#0x104
00011e  f7fffffe          BL       FS_FindNextFile
000122  2800              CMP      r0,#0
000124  d1f6              BNE      |L1.276|
                  |L1.294|
;;;164      }
;;;165      FS_FindClose(&fd);
000126  a841              ADD      r0,sp,#0x104
000128  f7fffffe          BL       FS_FindClose
;;;166    }
00012c  b050              ADD      sp,sp,#0x140
00012e  bc70              POP      {r4-r6}
000130  bc08              POP      {r3}
000132  4718              BX       r3
;;;167    
                          ENDP

                  _GetDirEntryFilename PROC
;;;171    */
;;;172    static void _GetDirEntryFilename(void * pFileEntry, char * sFilename, U32 SizeofBuffer) {
000134  b5f8              PUSH     {r3-r7,lr}
000136  0004              MOVS     r4,r0
000138  000d              MOVS     r5,r1
00013a  0016              MOVS     r6,r2
;;;173      FS_FIND_DATA * pFD;
;;;174    
;;;175      _InitIfRequired();         // Perform automatic initialisation so that explicit call to FS_Init is not required
00013c  f7fffffe          BL       _InitIfRequired
;;;176      pFD = (FS_FIND_DATA *)pFileEntry;
000140  0027              MOVS     r7,r4
;;;177      strncpy(sFilename, pFD->sFileName, SizeofBuffer);
000142  0032              MOVS     r2,r6
000144  0028              MOVS     r0,r5
000146  6979              LDR      r1,[r7,#0x14]
000148  f7fffffe          BL       strncpy
;;;178      * (sFilename + SizeofBuffer - 1) = 0;
00014c  2100              MOVS     r1,#0
00014e  19a8              ADDS     r0,r5,r6
000150  3820              SUBS     r0,r0,#0x20
000152  77c1              STRB     r1,[r0,#0x1f]
;;;179    }
000154  bcf8              POP      {r3-r7}
000156  bc08              POP      {r3}
000158  4718              BX       r3
;;;180    
                          ENDP

                  _GetDirEntryFileSize PROC
;;;184    */
;;;185    static U32 _GetDirEntryFileSize (void * pFileEntry, U32 * pFileSizeHigh) {
00015a  b570              PUSH     {r4-r6,lr}
00015c  0004              MOVS     r4,r0
00015e  000e              MOVS     r6,r1
;;;186      FS_FIND_DATA * pFD;
;;;187    
;;;188      _InitIfRequired();         // Perform automatic initialisation so that explicit call to FS_Init is not required
000160  f7fffffe          BL       _InitIfRequired
;;;189      pFD = (FS_FIND_DATA *)pFileEntry;
000164  0025              MOVS     r5,r4
;;;190      return pFD->FileSize;
000166  6928              LDR      r0,[r5,#0x10]
;;;191    }
000168  bc70              POP      {r4-r6}
00016a  bc08              POP      {r3}
00016c  4718              BX       r3
;;;192    
                          ENDP

                  _GetDirEntryFileTime PROC
;;;196    */
;;;197    static U32 _GetDirEntryFileTime (void * pFileEntry) {
00016e  b570              PUSH     {r4-r6,lr}
000170  0004              MOVS     r4,r0
;;;198      FS_FIND_DATA * pFD;
;;;199    
;;;200      _InitIfRequired();         // Perform automatic initialisation so that explicit call to FS_Init is not required
000172  f7fffffe          BL       _InitIfRequired
;;;201      pFD = (FS_FIND_DATA *)pFileEntry;
000176  0025              MOVS     r5,r4
;;;202      return pFD->LastWriteTime;
000178  68e8              LDR      r0,[r5,#0xc]
;;;203    }
00017a  bc70              POP      {r4-r6}
00017c  bc08              POP      {r3}
00017e  4718              BX       r3
;;;204    
                          ENDP

                  _GetDirEntryAttributes PROC
;;;211    */
;;;212    static int  _GetDirEntryAttributes (void * pFileEntry) {
000180  b570              PUSH     {r4-r6,lr}
000182  0004              MOVS     r4,r0
;;;213      FS_FIND_DATA * pFD;
;;;214    
;;;215      _InitIfRequired();         // Perform automatic initialisation so that explicit call to FS_Init is not required
000184  f7fffffe          BL       _InitIfRequired
;;;216      pFD = (FS_FIND_DATA *)pFileEntry;
000188  0025              MOVS     r5,r4
;;;217      return (pFD->Attributes & FS_ATTR_DIRECTORY) ? 1 : 0;
00018a  7828              LDRB     r0,[r5,#0]
00018c  2110              MOVS     r1,#0x10
00018e  4008              ANDS     r0,r0,r1
000190  0900              LSRS     r0,r0,#4
;;;218    }
000192  bc70              POP      {r4-r6}
000194  bc08              POP      {r3}
000196  4718              BX       r3
;;;219    
                          ENDP

                  _Create PROC
;;;223    */
;;;224    static void * _Create (const char * sFilename) {
000198  b510              PUSH     {r4,lr}
00019a  b0a0              SUB      sp,sp,#0x80
00019c  0004              MOVS     r4,r0
;;;225      char acAbsFilename[MAX_PATH];
;;;226    
;;;227      _InitIfRequired();         // Perform automatic initialisation so that explicit call to FS_Init is not required
00019e  f7fffffe          BL       _InitIfRequired
;;;228      _ConvertPath(sFilename, acAbsFilename, sizeof(acAbsFilename));
0001a2  2280              MOVS     r2,#0x80
0001a4  4669              MOV      r1,sp
0001a6  0020              MOVS     r0,r4
0001a8  f7fffffe          BL       _ConvertPath
;;;229      return FS_FOpen(acAbsFilename, "wb");
0001ac  a13d              ADR      r1,|L1.676|
0001ae  4668              MOV      r0,sp
0001b0  f7fffffe          BL       FS_FOpen
;;;230    }
0001b4  b020              ADD      sp,sp,#0x80
0001b6  bc10              POP      {r4}
0001b8  bc08              POP      {r3}
0001ba  4718              BX       r3
;;;231    
                          ENDP

                  _DeleteFile PROC
;;;236    */
;;;237    static void * _DeleteFile (const char *sFilename) {
0001bc  b510              PUSH     {r4,lr}
0001be  b0a0              SUB      sp,sp,#0x80
0001c0  0004              MOVS     r4,r0
;;;238      char acAbsFilename[MAX_PATH];
;;;239    
;;;240      _InitIfRequired();         // Perform automatic initialisation so that explicit call to FS_Init is not required
0001c2  f7fffffe          BL       _InitIfRequired
;;;241      _ConvertPath(sFilename, acAbsFilename, sizeof(acAbsFilename));
0001c6  2280              MOVS     r2,#0x80
0001c8  4669              MOV      r1,sp
0001ca  0020              MOVS     r0,r4
0001cc  f7fffffe          BL       _ConvertPath
;;;242      return (void*)FS_Remove(acAbsFilename);
0001d0  4668              MOV      r0,sp
0001d2  f7fffffe          BL       FS_Remove
;;;243    }
0001d6  b020              ADD      sp,sp,#0x80
0001d8  bc10              POP      {r4}
0001da  bc08              POP      {r3}
0001dc  4718              BX       r3
;;;244    
                          ENDP

                  _RenameFile PROC
;;;248    */
;;;249    static int _RenameFile (const char *sOldFilename, const char *sNewFilename) {
0001de  b530              PUSH     {r4,r5,lr}
0001e0  b0c1              SUB      sp,sp,#0x104
0001e2  0005              MOVS     r5,r0
0001e4  000c              MOVS     r4,r1
;;;250      char acAbsOldFilename[MAX_PATH];
;;;251      char acAbsNewFilename[MAX_PATH];
;;;252    
;;;253      _InitIfRequired();         // Perform automatic initialisation so that explicit call to FS_Init is not required
0001e6  f7fffffe          BL       _InitIfRequired
;;;254      _ConvertPath(sOldFilename, acAbsOldFilename, sizeof(acAbsOldFilename));
0001ea  2280              MOVS     r2,#0x80
0001ec  a921              ADD      r1,sp,#0x84
0001ee  0028              MOVS     r0,r5
0001f0  f7fffffe          BL       _ConvertPath
;;;255      _ConvertPath(sNewFilename, acAbsNewFilename, sizeof(acAbsNewFilename));
0001f4  2280              MOVS     r2,#0x80
0001f6  a901              ADD      r1,sp,#4
0001f8  0020              MOVS     r0,r4
0001fa  f7fffffe          BL       _ConvertPath
;;;256      return FS_Rename(acAbsOldFilename, acAbsNewFilename);
0001fe  a901              ADD      r1,sp,#4
000200  a821              ADD      r0,sp,#0x84
000202  f7fffffe          BL       FS_Rename
;;;257    }
000206  b041              ADD      sp,sp,#0x104
000208  bc30              POP      {r4,r5}
00020a  bc08              POP      {r3}
00020c  4718              BX       r3
;;;258    
                          ENDP

                  _WriteAt PROC
;;;262    */
;;;263    static int    _WriteAt (void * hFile, void *pBuffer, U32 Pos, U32 NumBytes) {
00020e  b5f8              PUSH     {r3-r7,lr}
000210  0006              MOVS     r6,r0
000212  000f              MOVS     r7,r1
000214  0014              MOVS     r4,r2
000216  001d              MOVS     r5,r3
;;;264      _InitIfRequired();         // Perform automatic initialisation so that explicit call to FS_Init is not required
000218  f7fffffe          BL       _InitIfRequired
;;;265      FS_FSeek((FS_FILE*) hFile, Pos, FS_SEEK_SET);
00021c  2200              MOVS     r2,#0
00021e  0021              MOVS     r1,r4
000220  0030              MOVS     r0,r6
000222  f7fffffe          BL       FS_FSeek
;;;266      return FS_Write((FS_FILE*) hFile, pBuffer, NumBytes);
000226  002a              MOVS     r2,r5
000228  0039              MOVS     r1,r7
00022a  0030              MOVS     r0,r6
00022c  f7fffffe          BL       FS_Write
;;;267    }
000230  bcf8              POP      {r3-r7}
000232  bc08              POP      {r3}
000234  4718              BX       r3
;;;268    
                          ENDP

                  _MKDir PROC
;;;272    */
;;;273    static int _MKDir (const char * sDirname) {
000236  b510              PUSH     {r4,lr}
000238  b0a0              SUB      sp,sp,#0x80
00023a  0004              MOVS     r4,r0
;;;274      char acAbsDirname[MAX_PATH];
;;;275    
;;;276      _InitIfRequired();         // Perform automatic initialisation so that explicit call to FS_Init is not required
00023c  f7fffffe          BL       _InitIfRequired
;;;277      _ConvertPath(sDirname, acAbsDirname, sizeof(acAbsDirname));
000240  2280              MOVS     r2,#0x80
000242  4669              MOV      r1,sp
000244  0020              MOVS     r0,r4
000246  f7fffffe          BL       _ConvertPath
;;;278      return FS_MkDir(acAbsDirname);
00024a  4668              MOV      r0,sp
00024c  f7fffffe          BL       FS_MkDir
;;;279    }
000250  b020              ADD      sp,sp,#0x80
000252  bc10              POP      {r4}
000254  bc08              POP      {r3}
000256  4718              BX       r3
;;;280    
                          ENDP

                  _RMDir PROC
;;;284    */
;;;285    static int _RMDir (const char * sDirname) {
000258  b510              PUSH     {r4,lr}
00025a  b0a0              SUB      sp,sp,#0x80
00025c  0004              MOVS     r4,r0
;;;286      char acAbsDirname[MAX_PATH];
;;;287    
;;;288      _InitIfRequired();         // Perform automatic initialisation so that explicit call to FS_Init is not required
00025e  f7fffffe          BL       _InitIfRequired
;;;289      _ConvertPath(sDirname, acAbsDirname, sizeof(acAbsDirname));
000262  2280              MOVS     r2,#0x80
000264  4669              MOV      r1,sp
000266  0020              MOVS     r0,r4
000268  f7fffffe          BL       _ConvertPath
;;;290      return FS_RmDir(acAbsDirname);
00026c  4668              MOV      r0,sp
00026e  f7fffffe          BL       FS_RmDir
;;;291    }
000272  b020              ADD      sp,sp,#0x80
000274  bc10              POP      {r4}
000276  bc08              POP      {r3}
000278  4718              BX       r3
;;;292    
                          ENDP

00027a  0000              DCW      0x0000
                  |L1.636|
                          DCD      _IsInited
                  |L1.640|
                          DCD      _sVolumeName
                  |L1.644|
000284  48696768          DCB      "High level formatting: %s\n",0
000288  206c6576
00028c  656c2066
000290  6f726d61
000294  7474696e
000298  673a2025
00029c  730a00  
00029f  00                DCB      0
                  |L1.672|
0002a0  7200              DCB      "r",0
0002a2  00                DCB      0
0002a3  00                DCB      0
                  |L1.676|
0002a4  776200            DCB      "wb",0
0002a7  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  IP_FS_FS
                          DCD      _FS_Open
                          DCD      _Close
                          DCD      _ReadAt
                          DCD      _GetLen
                          DCD      _ForEachDirEntry
                          DCD      _GetDirEntryFilename
                          DCD      _GetDirEntryFileSize
                          DCD      _GetDirEntryFileTime
                          DCD      _GetDirEntryAttributes
                          DCD      _Create
                          DCD      _DeleteFile
                          DCD      _RenameFile
                          DCD      _WriteAt
                          DCD      _MKDir
                          DCD      _RMDir

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=0

000000  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=2

                  _sVolumeName
                          DCD      ||.conststring||
                  _IsInited
000004  00                DCB      0x00

                          AREA ||i.__ARM_common_call_via_r5||, COMGROUP=__ARM_common_call_via_r5, CODE, READONLY, ALIGN=1

                  __ARM_common_call_via_r5 PROC
000000  4728              BX       r5
                          ENDP

