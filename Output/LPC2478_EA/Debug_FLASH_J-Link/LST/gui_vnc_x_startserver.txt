; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--thumb --list --debug -c --asm --interleave -o.\output\lpc2478_ea\debug_flash_j-link\obj\gui_vnc_x_startserver.o --asm_dir=.\Output\LPC2478_EA\Debug_FLASH_J-Link\LST\ --list_dir=.\Output\LPC2478_EA\Debug_FLASH_J-Link\LST\ --depend=.\output\lpc2478_ea\debug_flash_j-link\obj\gui_vnc_x_startserver.d --feedback=.\Output\LPC2478_EA\Debug_FLASH_J-Link\OBJ\Start_LPC2478_EA.fed --apcs=interwork -O0 -IApplication\SEGGERDEMO -IApplication\SEGGERDEMO\Src -ISetup -IInc -IConfig -IFS -IIP -IIP\IP_FS\FS_RO\Generated -IGUI -IOS -IUSB -IUSBH -I"C:\Program Files (x86)\Keil\V473\ARM\RV31\INC" -I"C:\Program Files (x86)\Keil\V473\ARM\CMSIS\Include" -I"C:\Program Files (x86)\Keil\V473\ARM\Inc\Philips" -DDEBUG=1 --omf_browse=.\output\lpc2478_ea\debug_flash_j-link\obj\gui_vnc_x_startserver.crf GUI\GUI_VNC_X_StartServer.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Send PROC
;;;62     */
;;;63     static int _Send(const U8 * buf, int len, void * pConnectionInfo) {
000000  b5f8              PUSH     {r3-r7,lr}
000002  0004              MOVS     r4,r0
000004  000d              MOVS     r5,r1
000006  0016              MOVS     r6,r2
;;;64       int r;
;;;65     
;;;66       r = send((long)pConnectionInfo, (const char *)buf, len, 0);
000008  2300              MOVS     r3,#0
00000a  002a              MOVS     r2,r5
00000c  0021              MOVS     r1,r4
00000e  0030              MOVS     r0,r6
000010  f7fffffe          BL       t_send
000014  0007              MOVS     r7,r0
;;;67       return r;
000016  0038              MOVS     r0,r7
;;;68     }
000018  bcf8              POP      {r3-r7}
00001a  bc08              POP      {r3}
00001c  4718              BX       r3
;;;69     
                          ENDP

                  _Recv PROC
;;;78     */
;;;79     static int _Recv(U8 * buf, int len, void * pConnectionInfo) {
00001e  b570              PUSH     {r4-r6,lr}
000020  0004              MOVS     r4,r0
000022  000d              MOVS     r5,r1
000024  0016              MOVS     r6,r2
;;;80       return recv((long)pConnectionInfo, (char *)buf, len, 0);
000026  2300              MOVS     r3,#0
000028  002a              MOVS     r2,r5
00002a  0021              MOVS     r1,r4
00002c  0030              MOVS     r0,r6
00002e  f7fffffe          BL       t_recv
;;;81     }
000032  bc70              POP      {r4-r6}
000034  bc08              POP      {r3}
000036  4718              BX       r3
;;;82     
                          ENDP

                  _ListenAtTcpAddr PROC
;;;88     */
;;;89     static int _ListenAtTcpAddr(U16 Port) {
000038  b57f              PUSH     {r0-r6,lr}
00003a  0004              MOVS     r4,r0
;;;90       int sock;
;;;91       struct sockaddr_in addr;
;;;92     
;;;93       sock = socket(AF_INET, SOCK_STREAM, 0);
00003c  2200              MOVS     r2,#0
00003e  2101              MOVS     r1,#1
000040  2002              MOVS     r0,#2
000042  f7fffffe          BL       t_socket
000046  0005              MOVS     r5,r0
;;;94       memset(&addr, 0, sizeof(addr));
000048  2000              MOVS     r0,#0
00004a  9000              STR      r0,[sp,#0]
00004c  9001              STR      r0,[sp,#4]
00004e  9002              STR      r0,[sp,#8]
000050  9003              STR      r0,[sp,#0xc]
;;;95       addr.sin_family      = AF_INET;
000052  2002              MOVS     r0,#2
000054  4669              MOV      r1,sp
000056  8008              STRH     r0,[r1,#0]
;;;96       addr.sin_port        = htons(Port);
000058  1220              ASRS     r0,r4,#8
00005a  0621              LSLS     r1,r4,#24
00005c  0c09              LSRS     r1,r1,#16
00005e  4308              ORRS     r0,r0,r1
000060  4669              MOV      r1,sp
000062  8048              STRH     r0,[r1,#2]
;;;97       addr.sin_addr.s_addr = INADDR_ANY;
000064  2000              MOVS     r0,#0
000066  9001              STR      r0,[sp,#4]
;;;98       bind(sock, (struct sockaddr *)&addr, sizeof(addr));
000068  2210              MOVS     r2,#0x10
00006a  0028              MOVS     r0,r5
00006c  f7fffffe          BL       t_bind
;;;99       listen(sock, 1);
000070  2101              MOVS     r1,#1
000072  0028              MOVS     r0,r5
000074  f7fffffe          BL       t_listen
;;;100      return sock;
000078  0028              MOVS     r0,r5
;;;101    }
00007a  b004              ADD      sp,sp,#0x10
00007c  bc70              POP      {r4-r6}
00007e  bc08              POP      {r3}
000080  4718              BX       r3
;;;102    
                          ENDP

                  _ServerTask PROC
;;;115    */
;;;116    static void _ServerTask(void) {
000082  b082              SUB      sp,sp,#8
;;;117      int s, Sock, AddrLen;
;;;118      U16 Port;
;;;119    
;;;120      //
;;;121      // Prepare socket (one time setup)
;;;122      //
;;;123      Port = 5900 + _Context.ServerIndex; // Default port for VNC is is 590x, where x is the 0-based layer index
000084  4817              LDR      r0,|L1.228|
000086  8c00              LDRH     r0,[r0,#0x20]  ; _Context
000088  4917              LDR      r1,|L1.232|
00008a  1840              ADDS     r0,r0,r1
00008c  0405              LSLS     r5,r0,#16
00008e  0c2d              LSRS     r5,r5,#16
;;;124      //
;;;125      // Loop until we get a socket into listening state
;;;126      //
;;;127      do {
000090  46c0              MOV      r8,r8
                  |L1.146|
;;;128        s = _ListenAtTcpAddr(Port);
000092  0028              MOVS     r0,r5
000094  f7fffffe          BL       _ListenAtTcpAddr
000098  0004              MOVS     r4,r0
;;;129        if (s != -1) {
00009a  1c60              ADDS     r0,r4,#1
00009c  d000              BEQ      |L1.160|
;;;130          break;
00009e  e003              B        |L1.168|
                  |L1.160|
;;;131        }
;;;132        OS_Delay(100); // Try again
0000a0  2064              MOVS     r0,#0x64
0000a2  f7fffffe          BL       OS_Delay
;;;133      } while (1);
0000a6  e7f4              B        |L1.146|
                  |L1.168|
0000a8  46c0              MOV      r8,r8                 ;130
;;;134      //
;;;135      // Loop once per client and create a thread for the actual server
;;;136      //
;;;137      while (1) {
0000aa  e01a              B        |L1.226|
                  |L1.172|
;;;138        //
;;;139        // Wait for an incoming connection
;;;140        //
;;;141        AddrLen = sizeof(_Addr);
0000ac  2010              MOVS     r0,#0x10
0000ae  9001              STR      r0,[sp,#4]
;;;142        if ((Sock = accept(s, (struct sockaddr*)&_Addr, &AddrLen)) == SOCKET_ERROR) {
0000b0  aa01              ADD      r2,sp,#4
0000b2  490e              LDR      r1,|L1.236|
0000b4  0020              MOVS     r0,r4
0000b6  f7fffffe          BL       t_accept
0000ba  0006              MOVS     r6,r0
0000bc  1c40              ADDS     r0,r0,#1
0000be  d100              BNE      |L1.194|
;;;143          continue; // Error
0000c0  e00f              B        |L1.226|
                  |L1.194|
;;;144        }
;;;145        //
;;;146        // Run the actual server
;;;147        //
;;;148        GUI_VNC_Process(&_Context, _Send, _Recv, (void *)Sock);
0000c2  0033              MOVS     r3,r6
0000c4  4a0a              LDR      r2,|L1.240|
0000c6  490b              LDR      r1,|L1.244|
0000c8  4806              LDR      r0,|L1.228|
0000ca  f7fffffe          BL       GUI_VNC_Process
;;;149        //
;;;150        // Close the connection
;;;151        //
;;;152        closesocket(Sock);
0000ce  0030              MOVS     r0,r6
0000d0  f7fffffe          BL       t_socketclose
;;;153        memset(&_Addr, 0, sizeof(struct sockaddr_in));
0000d4  4805              LDR      r0,|L1.236|
0000d6  2100              MOVS     r1,#0
0000d8  6001              STR      r1,[r0,#0]  ; _Addr
0000da  6041              STR      r1,[r0,#4]  ; _Addr
0000dc  6081              STR      r1,[r0,#8]  ; _Addr
0000de  60c1              STR      r1,[r0,#0xc]  ; _Addr
0000e0  46c0              MOV      r8,r8                 ;143
                  |L1.226|
0000e2  e7e3              B        |L1.172|
;;;154      }
;;;155    }
;;;156    
                          ENDP

                  |L1.228|
                          DCD      _Context
                  |L1.232|
                          DCD      0x0000170c
                  |L1.236|
                          DCD      _Addr
                  |L1.240|
                          DCD      _Recv
                  |L1.244|
                          DCD      _Send

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  GUI_VNC_X_StartServer PROC
;;;177    */
;;;178    int GUI_VNC_X_StartServer(int LayerIndex, int ServerIndex) {
000000  b53e              PUSH     {r1-r5,lr}
000002  0004              MOVS     r4,r0
000004  000d              MOVS     r5,r1
;;;179      //
;;;180      // Init VNC context and attach to layer (so context is updated if the display-layer-contents change
;;;181      //
;;;182      GUI_VNC_AttachToLayer(&_Context, LayerIndex);
000006  0021              MOVS     r1,r4
000008  480a              LDR      r0,|L2.52|
00000a  f7fffffe          BL       GUI_VNC_AttachToLayer
;;;183      _Context.ServerIndex = ServerIndex;
00000e  4909              LDR      r1,|L2.52|
000010  840d              STRH     r5,[r1,#0x20]
;;;184      //
;;;185      // Create task for VNC Server
;;;186      //
;;;187      OS_CREATETASK(&_VNCServer_TCB, "VNC Server", _ServerTask, TASKPRIO_VNC, _StackVNCServer);
000012  2002              MOVS     r0,#2
000014  217d              MOVS     r1,#0x7d
000016  0149              LSLS     r1,r1,#5
000018  4a07              LDR      r2,|L2.56|
00001a  4b08              LDR      r3,|L2.60|
00001c  9200              STR      r2,[sp,#0]
00001e  9101              STR      r1,[sp,#4]
000020  9002              STR      r0,[sp,#8]
000022  226e              MOVS     r2,#0x6e
000024  a106              ADR      r1,|L2.64|
000026  4809              LDR      r0,|L2.76|
000028  f7fffffe          BL       OS_CreateTask_DP
;;;188      //
;;;189      // O.k., server has been started
;;;190      //
;;;191      return 0;
00002c  2000              MOVS     r0,#0
;;;192    }
00002e  bc3e              POP      {r1-r5}
000030  bc08              POP      {r3}
000032  4718              BX       r3
;;;193    
                          ENDP

                  |L2.52|
                          DCD      _Context
                  |L2.56|
                          DCD      _StackVNCServer
                  |L2.60|
                          DCD      _ServerTask
                  |L2.64|
000040  564e4320          DCB      "VNC Server",0
000044  53657276
000048  657200  
00004b  00                DCB      0
                  |L2.76|
                          DCD      _VNCServer_TCB

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  GUI_VNC_X_getpeername PROC
;;;177    */
;;;178    int GUI_VNC_X_StartServer(int LayerIndex, int ServerIndex) {
000000  4901              LDR      r1,|L3.8|
000002  6849              LDR      r1,[r1,#4]  ; _Addr
000004  6001              STR      r1,[r0,#0]
;;;179      //
;;;180      // Init VNC context and attach to layer (so context is updated if the display-layer-contents change
;;;181      //
;;;182      GUI_VNC_AttachToLayer(&_Context, LayerIndex);
000006  4770              BX       lr
;;;183      _Context.ServerIndex = ServerIndex;
;;;184      //
;;;185      // Create task for VNC Server
;;;186      //
;;;187      OS_CREATETASK(&_VNCServer_TCB, "VNC Server", _ServerTask, TASKPRIO_VNC, _StackVNCServer);
;;;188      //
;;;189      // O.k., server has been started
;;;190      //
;;;191      return 0;
;;;192    }
;;;193    
                          ENDP

                  |L3.8|
                          DCD      _Addr

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  _Context
                          %        84
                  _Addr
                          %        16
                  _StackVNCServer
                          %        4000
                  _VNCServer_TCB
                          %        68
