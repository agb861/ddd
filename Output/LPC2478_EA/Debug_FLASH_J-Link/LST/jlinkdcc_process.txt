; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--thumb --list --debug -c --asm --interleave -o.\output\lpc2478_ea\debug_flash_j-link\obj\jlinkdcc_process.o --asm_dir=.\Output\LPC2478_EA\Debug_FLASH_J-Link\LST\ --list_dir=.\Output\LPC2478_EA\Debug_FLASH_J-Link\LST\ --depend=.\output\lpc2478_ea\debug_flash_j-link\obj\jlinkdcc_process.d --feedback=.\Output\LPC2478_EA\Debug_FLASH_J-Link\OBJ\Start_LPC2478_EA.fed --apcs=interwork -O0 -IApplication\SEGGERDEMO -IApplication\SEGGERDEMO\Src -ISetup -IInc -IConfig -IFS -IIP -IIP\IP_FS\FS_RO\Generated -IGUI -IOS -IUSB -IUSBH -I"C:\Program Files (x86)\Keil\V473\ARM\RV31\INC" -I"C:\Program Files (x86)\Keil\V473\ARM\CMSIS\Include" -I"C:\Program Files (x86)\Keil\V473\ARM\Inc\Philips" -DDEBUG=1 --omf_browse=.\output\lpc2478_ea\debug_flash_j-link\obj\jlinkdcc_process.crf Util\JLINKDCC_Process.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _HandleRead PROC
;;;239    */
;;;240    static void _HandleRead(void) {
000000  b570              PUSH     {r4-r6,lr}
;;;241      U32 Data;
;;;242    
;;;243      if ((_ReadDCCStat() & 1) == 0) {       // Data or command received ?
000002  f7fffffe          BL       CP14_ReadDCCStat
000006  07c0              LSLS     r0,r0,#31
000008  0fc0              LSRS     r0,r0,#31
00000a  d102              BNE      |L1.18|
                  |L1.12|
;;;244        return;      // Nothing received
;;;245      }
;;;246    
;;;247      Data = _ReadDCC();
;;;248      //
;;;249      // If item received does not have the command-flag set, it is the new addr.
;;;250      //
;;;251      if ((Data & DCC_OP_COMMAND) == 0) {
;;;252        _Addr = Data;
;;;253        return;
;;;254      }
;;;255      //
;;;256      // If item received is a terminal out command,
;;;257      //
;;;258      if ((Data & 0xFF000000) == 0x93000000) {
;;;259        unsigned Channel;
;;;260        Channel = (Data >> 19) & 0x1F;
;;;261        if (_pfOnRx[Channel]) {
;;;262          _pfOnRx[Channel](Channel, (Data >> 1) & 0xFF);
;;;263        }
;;;264        return;
;;;265      }
;;;266      //
;;;267      // We received a new command.
;;;268      //
;;;269      _Command = Data;
;;;270      if (_Command & DCC_OP_ODD_ADDR) {
;;;271        _Addr |= 1;
;;;272      }
;;;273      if (_Command & (DCC_OP_READ_U32 | DCC_OP_READ_U16 | DCC_OP_READ_U8 | DCC_OP_GET_CAPS)) {
;;;274        _NumReadItems = (_Command >> 2) & 0xffff;
;;;275      } else {
;;;276        // Clear before write
;;;277        JLINKDCC_AbortOccurred = 0;
;;;278    
;;;279        if (_Command & DCC_OP_WRITE_U32) {
;;;280          _Data |= (_Command << 14) & 0xffff0000;
;;;281        } else {
;;;282          _Data = (_Command >> 2) & 0xffff;
;;;283        }
;;;284        if (_Command & DCC_OP_WRITE_U8) {
;;;285          *(U8*)_Addr = _Data;
;;;286          _Addr += 1;
;;;287        }
;;;288        if (_Command & DCC_OP_WRITE_U16) {
;;;289          *(U16*)_Addr = _Data;
;;;290          _Addr += 2;
;;;291        }
;;;292        if (_Command & DCC_OP_WRITE_U32) {
;;;293          *(U32*)_Addr =_Data;
;;;294          _Addr += 4;
;;;295        }
;;;296      }
;;;297    }
00000c  bc70              POP      {r4-r6}
00000e  bc08              POP      {r3}
000010  4718              BX       r3
                  |L1.18|
000012  f7fffffe          BL       CP14_ReadDCC
000016  0004              MOVS     r4,r0                 ;247
000018  07e0              LSLS     r0,r4,#31             ;251
00001a  0fc0              LSRS     r0,r0,#31             ;251
00001c  d102              BNE      |L1.36|
00001e  48c6              LDR      r0,|L1.824|
000020  6004              STR      r4,[r0,#0]            ;252  ; _Addr
000022  e7f3              B        |L1.12|
                  |L1.36|
000024  0e20              LSRS     r0,r4,#24             ;258
000026  0600              LSLS     r0,r0,#24             ;258
000028  2193              MOVS     r1,#0x93              ;258
00002a  0609              LSLS     r1,r1,#24             ;258
00002c  4288              CMP      r0,r1                 ;258
00002e  d10f              BNE      |L1.80|
000030  0220              LSLS     r0,r4,#8              ;260
000032  0ec5              LSRS     r5,r0,#27             ;260
000034  00a8              LSLS     r0,r5,#2              ;261
000036  49c1              LDR      r1,|L1.828|
000038  5808              LDR      r0,[r1,r0]            ;261
00003a  2800              CMP      r0,#0                 ;261
00003c  d007              BEQ      |L1.78|
00003e  05e0              LSLS     r0,r4,#23             ;262
000040  0e01              LSRS     r1,r0,#24             ;262
000042  00a8              LSLS     r0,r5,#2              ;262
000044  4bbd              LDR      r3,|L1.828|
000046  581a              LDR      r2,[r3,r0]            ;262
000048  0028              MOVS     r0,r5                 ;262
00004a  f7fffffe          BL       __ARM_common_call_via_r2
                  |L1.78|
00004e  e7dd              B        |L1.12|
                  |L1.80|
000050  48bb              LDR      r0,|L1.832|
000052  6004              STR      r4,[r0,#0]            ;269  ; _Command
000054  6800              LDR      r0,[r0,#0]            ;270  ; _Command
000056  0fc0              LSRS     r0,r0,#31             ;270
000058  07c0              LSLS     r0,r0,#31             ;270
00005a  d005              BEQ      |L1.104|
00005c  48b6              LDR      r0,|L1.824|
00005e  6800              LDR      r0,[r0,#0]            ;271  ; _Addr
000060  2101              MOVS     r1,#1                 ;271
000062  4308              ORRS     r0,r0,r1              ;271
000064  49b4              LDR      r1,|L1.824|
000066  6008              STR      r0,[r1,#0]            ;271  ; _Addr
                  |L1.104|
000068  48b5              LDR      r0,|L1.832|
00006a  6800              LDR      r0,[r0,#0]            ;273  ; _Command
00006c  210f              MOVS     r1,#0xf               ;273
00006e  0609              LSLS     r1,r1,#24             ;273
000070  4208              TST      r0,r1                 ;273
000072  d006              BEQ      |L1.130|
000074  48b2              LDR      r0,|L1.832|
000076  6800              LDR      r0,[r0,#0]            ;274  ; _Command
000078  0380              LSLS     r0,r0,#14             ;274
00007a  0c00              LSRS     r0,r0,#16             ;274
00007c  49b1              LDR      r1,|L1.836|
00007e  8008              STRH     r0,[r1,#0]            ;274
000080  e049              B        |L1.278|
                  |L1.130|
000082  2000              MOVS     r0,#0                 ;277
000084  49b0              LDR      r1,|L1.840|
000086  7008              STRB     r0,[r1,#0]            ;277
000088  48ad              LDR      r0,|L1.832|
00008a  6800              LDR      r0,[r0,#0]            ;279  ; _Command
00008c  2101              MOVS     r1,#1                 ;279
00008e  0709              LSLS     r1,r1,#28             ;279
000090  4208              TST      r0,r1                 ;279
000092  d00a              BEQ      |L1.170|
000094  48aa              LDR      r0,|L1.832|
000096  6800              LDR      r0,[r0,#0]            ;280  ; _Command
000098  0380              LSLS     r0,r0,#14             ;280
00009a  0c00              LSRS     r0,r0,#16             ;280
00009c  0400              LSLS     r0,r0,#16             ;280
00009e  49ab              LDR      r1,|L1.844|
0000a0  6809              LDR      r1,[r1,#0]            ;280  ; _Data
0000a2  4308              ORRS     r0,r0,r1              ;280
0000a4  49a9              LDR      r1,|L1.844|
0000a6  6008              STR      r0,[r1,#0]            ;280  ; _Data
0000a8  e005              B        |L1.182|
                  |L1.170|
0000aa  48a5              LDR      r0,|L1.832|
0000ac  6800              LDR      r0,[r0,#0]            ;282  ; _Command
0000ae  0380              LSLS     r0,r0,#14             ;282
0000b0  0c00              LSRS     r0,r0,#16             ;282
0000b2  49a6              LDR      r1,|L1.844|
0000b4  6008              STR      r0,[r1,#0]            ;282  ; _Data
                  |L1.182|
0000b6  48a2              LDR      r0,|L1.832|
0000b8  6800              LDR      r0,[r0,#0]            ;284  ; _Command
0000ba  2101              MOVS     r1,#1                 ;284
0000bc  0789              LSLS     r1,r1,#30             ;284
0000be  4208              TST      r0,r1                 ;284
0000c0  d009              BEQ      |L1.214|
0000c2  48a2              LDR      r0,|L1.844|
0000c4  7800              LDRB     r0,[r0,#0]            ;285  ; _Data
0000c6  499c              LDR      r1,|L1.824|
0000c8  6809              LDR      r1,[r1,#0]            ;285  ; _Addr
0000ca  7008              STRB     r0,[r1,#0]            ;285
0000cc  489a              LDR      r0,|L1.824|
0000ce  6800              LDR      r0,[r0,#0]            ;286  ; _Addr
0000d0  1c40              ADDS     r0,r0,#1              ;286
0000d2  4999              LDR      r1,|L1.824|
0000d4  6008              STR      r0,[r1,#0]            ;286  ; _Addr
                  |L1.214|
0000d6  489a              LDR      r0,|L1.832|
0000d8  6800              LDR      r0,[r0,#0]            ;288  ; _Command
0000da  2101              MOVS     r1,#1                 ;288
0000dc  0749              LSLS     r1,r1,#29             ;288
0000de  4208              TST      r0,r1                 ;288
0000e0  d009              BEQ      |L1.246|
0000e2  489a              LDR      r0,|L1.844|
0000e4  8800              LDRH     r0,[r0,#0]            ;289  ; _Data
0000e6  4994              LDR      r1,|L1.824|
0000e8  6809              LDR      r1,[r1,#0]            ;289  ; _Addr
0000ea  8008              STRH     r0,[r1,#0]            ;289
0000ec  4892              LDR      r0,|L1.824|
0000ee  6800              LDR      r0,[r0,#0]            ;290  ; _Addr
0000f0  1c80              ADDS     r0,r0,#2              ;290
0000f2  4991              LDR      r1,|L1.824|
0000f4  6008              STR      r0,[r1,#0]            ;290  ; _Addr
                  |L1.246|
0000f6  4892              LDR      r0,|L1.832|
0000f8  6800              LDR      r0,[r0,#0]            ;292  ; _Command
0000fa  2101              MOVS     r1,#1                 ;292
0000fc  0709              LSLS     r1,r1,#28             ;292
0000fe  4208              TST      r0,r1                 ;292
000100  d009              BEQ      |L1.278|
000102  4892              LDR      r0,|L1.844|
000104  6800              LDR      r0,[r0,#0]            ;293  ; _Data
000106  498c              LDR      r1,|L1.824|
000108  6809              LDR      r1,[r1,#0]            ;293  ; _Addr
00010a  6008              STR      r0,[r1,#0]            ;293
00010c  488a              LDR      r0,|L1.824|
00010e  6800              LDR      r0,[r0,#0]            ;294  ; _Addr
000110  1d00              ADDS     r0,r0,#4              ;294
000112  4989              LDR      r1,|L1.824|
000114  6008              STR      r0,[r1,#0]            ;294  ; _Addr
                  |L1.278|
000116  46c0              MOV      r8,r8
000118  e778              B        |L1.12|
;;;298    
                          ENDP

                  _HandleWrite PROC
;;;305    */
;;;306    static void _HandleWrite(void) {
00011a  b5f8              PUSH     {r3-r7,lr}
;;;307      U32 Data;
;;;308      int DCCBusy;
;;;309      int NumBytes;
;;;310    
;;;311      Data = 0;
00011c  2500              MOVS     r5,#0
;;;312      DCCBusy = _ReadDCCStat() & 2;
00011e  f7fffffe          BL       CP14_ReadDCCStat
000122  2102              MOVS     r1,#2
000124  4008              ANDS     r0,r0,r1
000126  0007              MOVS     r7,r0
;;;313      if (DCCBusy) {                  // Can we send data ?
000128  2f00              CMP      r7,#0
00012a  d002              BEQ      |L1.306|
                  |L1.300|
;;;314        return;                       // If not, we are done.
;;;315      }
;;;316    
;;;317      if (_ActiveChannel) {
;;;318        U32 Channel;
;;;319    
;;;320        Channel = _ActiveChannel;
;;;321        _ActiveChannel = 0;
;;;322        if (_WritePendingNB) {
;;;323          _WriteDCC(_PendingPacketNB);
;;;324          _WritePendingNB = 0;
;;;325        }
;;;326        if (_pfOnTx[Channel]) {
;;;327          _pfOnTx[Channel](Channel);
;;;328        }
;;;329        return;
;;;330      }
;;;331    
;;;332      //
;;;333      // Check if a data item is pending
;;;334      //
;;;335      if (_WritePending) {
;;;336        _WriteDCC(_Data);
;;;337        _WritePending = 0;
;;;338        return;
;;;339      }
;;;340      //
;;;341      // Check if a read command is pending
;;;342      //
;;;343      if (_NumReadItems) {
;;;344        if (_Command & DCC_OP_GET_CAPS) {
;;;345          Data = (DCC_CONFIG | DCC_SIGNATURE);
;;;346          Data |= (JLINKDCC_AbortOccurred << 8);  // write abort status
;;;347          JLINKDCC_AbortOccurred = 0;
;;;348        } else {
;;;349    
;;;350          // Clear before next read
;;;351          JLINKDCC_AbortOccurred = 0;
;;;352    
;;;353          if (_Command & DCC_OP_READ_U8) {
;;;354            Data = *(U8*)_Addr;
;;;355            _Addr += 1;
;;;356          } else if (_Command & DCC_OP_READ_U16) {
;;;357            Data = *(U16*)_Addr;
;;;358            _Addr += 2;
;;;359          } else if (_Command & DCC_OP_READ_U32) {
;;;360            Data = *(U32*)_Addr;
;;;361            _Addr += 4;
;;;362            if ((Data & 0xFF800000) == 0x93800000) {    // Do we need to use the escape sequence and split it up into 2 transfers ?
;;;363              _Data = 0x93c10000 | (Data >> 16);
;;;364              Data  = 0x93c00000 | (Data & 0xFFFF);
;;;365              _WritePending = 1;
;;;366            }
;;;367          }
;;;368          if (JLINKDCC_AbortOccurred) {
;;;369            Data = 0x93c20000;          // read abort status
;;;370            _WritePending = 0;
;;;371            JLINKDCC_AbortOccurred = 0; // clear it
;;;372          }
;;;373        }
;;;374    
;;;375        _WriteDCC(Data);
;;;376        _NumReadItems--;
;;;377        return;
;;;378      }
;;;379      //
;;;380      // Handle terminal out. Up to 2 bytes in one 32-bit unit
;;;381      //
;;;382      NumBytes = _WrPos - _RdPos;
;;;383      if (NumBytes < 0) {
;;;384        NumBytes += sizeof(_acBuffer);
;;;385      }
;;;386      if (NumBytes) {
;;;387        int i;
;;;388        if (NumBytes > 2) {
;;;389          NumBytes = 2;
;;;390        }
;;;391        if (NumBytes == 2) {
;;;392          Data = 0x93A00000;
;;;393        } else {
;;;394          Data = 0x93800000;
;;;395        }
;;;396        for (i = 0; i < NumBytes; i++) {
;;;397          Data |= _acBuffer[_RdPos] << (8*i);
;;;398          _RdPos++;
;;;399          if (_RdPos == sizeof(_acBuffer)) {
;;;400            _RdPos = 0;
;;;401          }
;;;402        }
;;;403        _WriteDCC(Data);
;;;404      }
;;;405    }
00012c  bcf8              POP      {r3-r7}
00012e  bc08              POP      {r3}
000130  4718              BX       r3
                  |L1.306|
000132  4887              LDR      r0,|L1.848|
000134  6800              LDR      r0,[r0,#0]            ;317  ; _ActiveChannel
000136  2800              CMP      r0,#0                 ;317
000138  d01b              BEQ      |L1.370|
00013a  4885              LDR      r0,|L1.848|
00013c  6806              LDR      r6,[r0,#0]            ;320  ; _ActiveChannel
00013e  2000              MOVS     r0,#0                 ;321
000140  4983              LDR      r1,|L1.848|
000142  6008              STR      r0,[r1,#0]            ;321  ; _ActiveChannel
000144  4883              LDR      r0,|L1.852|
000146  7800              LDRB     r0,[r0,#0]            ;322  ; _WritePendingNB
000148  2800              CMP      r0,#0                 ;322
00014a  d006              BEQ      |L1.346|
00014c  4882              LDR      r0,|L1.856|
00014e  6800              LDR      r0,[r0,#0]            ;323  ; _PendingPacketNB
000150  f7fffffe          BL       CP14_WriteDCC
000154  2000              MOVS     r0,#0                 ;324
000156  497f              LDR      r1,|L1.852|
000158  7008              STRB     r0,[r1,#0]            ;324
                  |L1.346|
00015a  00b0              LSLS     r0,r6,#2              ;326
00015c  497f              LDR      r1,|L1.860|
00015e  5808              LDR      r0,[r1,r0]            ;326
000160  2800              CMP      r0,#0                 ;326
000162  d005              BEQ      |L1.368|
000164  00b0              LSLS     r0,r6,#2              ;327
000166  000a              MOVS     r2,r1                 ;327
000168  5811              LDR      r1,[r2,r0]            ;327
00016a  0030              MOVS     r0,r6                 ;327
00016c  f7fffffe          BL       __ARM_common_call_via_r1
                  |L1.368|
000170  e7dc              B        |L1.300|
                  |L1.370|
000172  487b              LDR      r0,|L1.864|
000174  7800              LDRB     r0,[r0,#0]            ;335  ; _WritePending
000176  2800              CMP      r0,#0                 ;335
000178  d007              BEQ      |L1.394|
00017a  4874              LDR      r0,|L1.844|
00017c  6800              LDR      r0,[r0,#0]            ;336  ; _Data
00017e  f7fffffe          BL       CP14_WriteDCC
000182  2000              MOVS     r0,#0                 ;337
000184  4976              LDR      r1,|L1.864|
000186  7008              STRB     r0,[r1,#0]            ;337
000188  e7d0              B        |L1.300|
                  |L1.394|
00018a  486e              LDR      r0,|L1.836|
00018c  8800              LDRH     r0,[r0,#0]            ;343  ; _NumReadItems
00018e  2800              CMP      r0,#0                 ;343
000190  d062              BEQ      |L1.600|
000192  486b              LDR      r0,|L1.832|
000194  6800              LDR      r0,[r0,#0]            ;344  ; _Command
000196  2101              MOVS     r1,#1                 ;344
000198  06c9              LSLS     r1,r1,#27             ;344
00019a  4208              TST      r0,r1                 ;344
00019c  d008              BEQ      |L1.432|
00019e  4d71              LDR      r5,|L1.868|
0001a0  4869              LDR      r0,|L1.840|
0001a2  7800              LDRB     r0,[r0,#0]            ;346  ; JLINKDCC_AbortOccurred
0001a4  0200              LSLS     r0,r0,#8              ;346
0001a6  4305              ORRS     r5,r5,r0              ;346
0001a8  2000              MOVS     r0,#0                 ;347
0001aa  4967              LDR      r1,|L1.840|
0001ac  7008              STRB     r0,[r1,#0]            ;347
0001ae  e04a              B        |L1.582|
                  |L1.432|
0001b0  2000              MOVS     r0,#0                 ;351
0001b2  4965              LDR      r1,|L1.840|
0001b4  7008              STRB     r0,[r1,#0]            ;351
0001b6  4862              LDR      r0,|L1.832|
0001b8  6800              LDR      r0,[r0,#0]            ;353  ; _Command
0001ba  2101              MOVS     r1,#1                 ;353
0001bc  0689              LSLS     r1,r1,#26             ;353
0001be  4208              TST      r0,r1                 ;353
0001c0  d008              BEQ      |L1.468|
0001c2  485d              LDR      r0,|L1.824|
0001c4  6800              LDR      r0,[r0,#0]            ;354  ; _Addr
0001c6  7805              LDRB     r5,[r0,#0]            ;354
0001c8  485b              LDR      r0,|L1.824|
0001ca  6800              LDR      r0,[r0,#0]            ;355  ; _Addr
0001cc  1c40              ADDS     r0,r0,#1              ;355
0001ce  495a              LDR      r1,|L1.824|
0001d0  6008              STR      r0,[r1,#0]            ;355  ; _Addr
0001d2  e02e              B        |L1.562|
                  |L1.468|
0001d4  485a              LDR      r0,|L1.832|
0001d6  6800              LDR      r0,[r0,#0]            ;356  ; _Command
0001d8  2101              MOVS     r1,#1                 ;356
0001da  0649              LSLS     r1,r1,#25             ;356
0001dc  4208              TST      r0,r1                 ;356
0001de  d008              BEQ      |L1.498|
0001e0  4855              LDR      r0,|L1.824|
0001e2  6800              LDR      r0,[r0,#0]            ;357  ; _Addr
0001e4  8805              LDRH     r5,[r0,#0]            ;357
0001e6  4854              LDR      r0,|L1.824|
0001e8  6800              LDR      r0,[r0,#0]            ;358  ; _Addr
0001ea  1c80              ADDS     r0,r0,#2              ;358
0001ec  4952              LDR      r1,|L1.824|
0001ee  6008              STR      r0,[r1,#0]            ;358  ; _Addr
0001f0  e01f              B        |L1.562|
                  |L1.498|
0001f2  4853              LDR      r0,|L1.832|
0001f4  6800              LDR      r0,[r0,#0]            ;359  ; _Command
0001f6  2101              MOVS     r1,#1                 ;359
0001f8  0609              LSLS     r1,r1,#24             ;359
0001fa  4208              TST      r0,r1                 ;359
0001fc  d019              BEQ      |L1.562|
0001fe  484e              LDR      r0,|L1.824|
000200  6800              LDR      r0,[r0,#0]            ;360  ; _Addr
000202  6805              LDR      r5,[r0,#0]            ;360
000204  484c              LDR      r0,|L1.824|
000206  6800              LDR      r0,[r0,#0]            ;361  ; _Addr
000208  1d00              ADDS     r0,r0,#4              ;361
00020a  494b              LDR      r1,|L1.824|
00020c  6008              STR      r0,[r1,#0]            ;361  ; _Addr
00020e  0de8              LSRS     r0,r5,#23             ;362
000210  05c0              LSLS     r0,r0,#23             ;362
000212  4955              LDR      r1,|L1.872|
000214  4288              CMP      r0,r1                 ;362
000216  d10c              BNE      |L1.562|
000218  0c28              LSRS     r0,r5,#16             ;363
00021a  4954              LDR      r1,|L1.876|
00021c  4308              ORRS     r0,r0,r1              ;363
00021e  494b              LDR      r1,|L1.844|
000220  6008              STR      r0,[r1,#0]            ;363  ; _Data
000222  0428              LSLS     r0,r5,#16             ;364
000224  0c00              LSRS     r0,r0,#16             ;364
000226  4952              LDR      r1,|L1.880|
000228  4308              ORRS     r0,r0,r1              ;364
00022a  0005              MOVS     r5,r0                 ;364
00022c  2001              MOVS     r0,#1                 ;365
00022e  494c              LDR      r1,|L1.864|
000230  7008              STRB     r0,[r1,#0]            ;365
                  |L1.562|
000232  4845              LDR      r0,|L1.840|
000234  7800              LDRB     r0,[r0,#0]            ;368  ; JLINKDCC_AbortOccurred
000236  2800              CMP      r0,#0                 ;368
000238  d005              BEQ      |L1.582|
00023a  4d4e              LDR      r5,|L1.884|
00023c  2000              MOVS     r0,#0                 ;370
00023e  4948              LDR      r1,|L1.864|
000240  7008              STRB     r0,[r1,#0]            ;370
000242  4941              LDR      r1,|L1.840|
000244  7008              STRB     r0,[r1,#0]            ;371
                  |L1.582|
000246  0028              MOVS     r0,r5                 ;375
000248  f7fffffe          BL       CP14_WriteDCC
00024c  483d              LDR      r0,|L1.836|
00024e  8800              LDRH     r0,[r0,#0]            ;376  ; _NumReadItems
000250  1e40              SUBS     r0,r0,#1              ;376
000252  493c              LDR      r1,|L1.836|
000254  8008              STRH     r0,[r1,#0]            ;376
000256  e769              B        |L1.300|
                  |L1.600|
000258  4847              LDR      r0,|L1.888|
00025a  6800              LDR      r0,[r0,#0]            ;382  ; _WrPos
00025c  4947              LDR      r1,|L1.892|
00025e  6809              LDR      r1,[r1,#0]            ;382  ; _RdPos
000260  1a44              SUBS     r4,r0,r1              ;382
000262  2c00              CMP      r4,#0                 ;383
000264  da02              BGE      |L1.620|
000266  2001              MOVS     r0,#1                 ;384
000268  0280              LSLS     r0,r0,#10             ;384
00026a  1824              ADDS     r4,r4,r0              ;384
                  |L1.620|
00026c  2c00              CMP      r4,#0                 ;386
00026e  d025              BEQ      |L1.700|
000270  2c02              CMP      r4,#2                 ;388
000272  dd00              BLE      |L1.630|
000274  2402              MOVS     r4,#2                 ;389
                  |L1.630|
000276  2c02              CMP      r4,#2                 ;391
000278  d101              BNE      |L1.638|
00027a  4d41              LDR      r5,|L1.896|
00027c  e000              B        |L1.640|
                  |L1.638|
00027e  4d3a              LDR      r5,|L1.872|
                  |L1.640|
000280  2600              MOVS     r6,#0                 ;396
000282  e015              B        |L1.688|
                  |L1.644|
000284  483f              LDR      r0,|L1.900|
000286  493d              LDR      r1,|L1.892|
000288  6809              LDR      r1,[r1,#0]            ;397  ; _RdPos
00028a  5c40              LDRB     r0,[r0,r1]            ;397
00028c  00f1              LSLS     r1,r6,#3              ;397
00028e  4088              LSLS     r0,r0,r1              ;397
000290  4305              ORRS     r5,r5,r0              ;397
000292  483a              LDR      r0,|L1.892|
000294  6800              LDR      r0,[r0,#0]            ;398  ; _RdPos
000296  1c40              ADDS     r0,r0,#1              ;398
000298  4938              LDR      r1,|L1.892|
00029a  6008              STR      r0,[r1,#0]            ;398  ; _RdPos
00029c  0008              MOVS     r0,r1                 ;399
00029e  6800              LDR      r0,[r0,#0]            ;399  ; _RdPos
0002a0  2101              MOVS     r1,#1                 ;399
0002a2  0289              LSLS     r1,r1,#10             ;399
0002a4  4288              CMP      r0,r1                 ;399
0002a6  d102              BNE      |L1.686|
0002a8  2000              MOVS     r0,#0                 ;400
0002aa  4934              LDR      r1,|L1.892|
0002ac  6008              STR      r0,[r1,#0]            ;400  ; _RdPos
                  |L1.686|
0002ae  1c76              ADDS     r6,r6,#1              ;396
                  |L1.688|
0002b0  42a6              CMP      r6,r4                 ;396
0002b2  dbe7              BLT      |L1.644|
0002b4  0028              MOVS     r0,r5                 ;403
0002b6  f7fffffe          BL       CP14_WriteDCC
0002ba  46c0              MOV      r8,r8                 ;404
                  |L1.700|
0002bc  46c0              MOV      r8,r8
0002be  e735              B        |L1.300|
;;;406    
                          ENDP

                  JLINKDCC_Process PROC
;;;423    */
;;;424    void JLINKDCC_Process(void) {
0002c0  b510              PUSH     {r4,lr}
;;;425      //
;;;426      // Avoid problems if this code is called from multiple threads or interrupts
;;;427      //
;;;428      if (JLINKDCC_IsInHandler) {
0002c2  4831              LDR      r0,|L1.904|
0002c4  7800              LDRB     r0,[r0,#0]  ; JLINKDCC_IsInHandler
0002c6  2800              CMP      r0,#0
0002c8  d002              BEQ      |L1.720|
                  |L1.714|
;;;429        return;
;;;430      }
;;;431      JLINKDCC_IsInHandler = 1;
;;;432      _HandleRead();
;;;433      _HandleWrite();
;;;434       JLINKDCC_IsInHandler = 0;
;;;435    }
0002ca  bc10              POP      {r4}
0002cc  bc08              POP      {r3}
0002ce  4718              BX       r3
                  |L1.720|
0002d0  2001              MOVS     r0,#1                 ;431
0002d2  492d              LDR      r1,|L1.904|
0002d4  7008              STRB     r0,[r1,#0]            ;431
0002d6  f7fffffe          BL       _HandleRead
0002da  f7fffffe          BL       _HandleWrite
0002de  2000              MOVS     r0,#0                 ;434
0002e0  4929              LDR      r1,|L1.904|
0002e2  7008              STRB     r0,[r1,#0]            ;434
0002e4  46c0              MOV      r8,r8
0002e6  e7f0              B        |L1.714|
;;;436    
                          ENDP

                  JLINKDCC_SendCharOnChannelNB PROC
;;;485    */
;;;486    void JLINKDCC_SendCharOnChannelNB(unsigned Channel, U8 Data) {
0002e8  b5f8              PUSH     {r3-r7,lr}
0002ea  0004              MOVS     r4,r0
0002ec  000e              MOVS     r6,r1
;;;487      U32 DCCPacket;
;;;488      int DCCBusy;
;;;489    
;;;490      DCCPacket = 0x93800000 | (Channel << 16);
0002ee  0420              LSLS     r0,r4,#16
0002f0  491d              LDR      r1,|L1.872|
0002f2  4308              ORRS     r0,r0,r1
0002f4  0005              MOVS     r5,r0
;;;491      DCCPacket |= Data;
0002f6  0028              MOVS     r0,r5
0002f8  4330              ORRS     r0,r0,r6
0002fa  0005              MOVS     r5,r0
;;;492      DCCBusy = _ReadDCCStat() & 2;
0002fc  f7fffffe          BL       CP14_ReadDCCStat
000300  2102              MOVS     r1,#2
000302  4008              ANDS     r0,r0,r1
000304  0007              MOVS     r7,r0
;;;493      if (DCCBusy == 0) {
000306  2f00              CMP      r7,#0
000308  d103              BNE      |L1.786|
;;;494        _WriteDCC(DCCPacket);
00030a  0028              MOVS     r0,r5
00030c  f7fffffe          BL       CP14_WriteDCC
000310  e004              B        |L1.796|
                  |L1.786|
;;;495      } else {
;;;496        _WritePendingNB = 1;
000312  2001              MOVS     r0,#1
000314  490f              LDR      r1,|L1.852|
000316  7008              STRB     r0,[r1,#0]
;;;497        _PendingPacketNB = DCCPacket;
000318  480f              LDR      r0,|L1.856|
00031a  6005              STR      r5,[r0,#0]  ; _PendingPacketNB
                  |L1.796|
;;;498      }
;;;499      _ActiveChannel = Channel;
00031c  480c              LDR      r0,|L1.848|
00031e  6004              STR      r4,[r0,#0]  ; _ActiveChannel
;;;500    }
000320  bcf8              POP      {r3-r7}
000322  bc08              POP      {r3}
000324  4718              BX       r3
;;;501    
                          ENDP

                  JLINKDCC_SetpfOnRx PROC
;;;539    */
;;;540    void JLINKDCC_SetpfOnRx(unsigned Channel, void (* pf)(unsigned Channel, U8 Data)) {
000326  0082              LSLS     r2,r0,#2
;;;541      _pfOnRx[Channel] = pf;
000328  4b04              LDR      r3,|L1.828|
00032a  5099              STR      r1,[r3,r2]
;;;542    }
00032c  4770              BX       lr
;;;543    
                          ENDP

                  JLINKDCC_SetpfOnTx PROC
;;;548    */
;;;549    void JLINKDCC_SetpfOnTx(unsigned Channel, void (* pf)(unsigned Channel)) {
00032e  0082              LSLS     r2,r0,#2
;;;550      _pfOnTx[Channel] = pf;
000330  4b0a              LDR      r3,|L1.860|
000332  5099              STR      r1,[r3,r2]
;;;551    }
000334  4770              BX       lr
;;;552    
                          ENDP

000336  0000              DCW      0x0000
                  |L1.824|
                          DCD      _Addr
                  |L1.828|
                          DCD      _pfOnRx
                  |L1.832|
                          DCD      _Command
                  |L1.836|
                          DCD      _NumReadItems
                  |L1.840|
                          DCD      JLINKDCC_AbortOccurred
                  |L1.844|
                          DCD      _Data
                  |L1.848|
                          DCD      _ActiveChannel
                  |L1.852|
                          DCD      _WritePendingNB
                  |L1.856|
                          DCD      _PendingPacketNB
                  |L1.860|
                          DCD      _pfOnTx
                  |L1.864|
                          DCD      _WritePending
                  |L1.868|
                          DCD      0x91ca00ff
                  |L1.872|
                          DCD      0x93800000
                  |L1.876|
                          DCD      0x93c10000
                  |L1.880|
                          DCD      0x93c00000
                  |L1.884|
                          DCD      0x93c20000
                  |L1.888|
                          DCD      _WrPos
                  |L1.892|
                          DCD      _RdPos
                  |L1.896|
                          DCD      0x93a00000
                  |L1.900|
                          DCD      _acBuffer
                  |L1.904|
                          DCD      JLINKDCC_IsInHandler

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  JLINKDCC_SendChar PROC
;;;239    */
;;;240    static void _HandleRead(void) {
000000  0001              MOVS     r1,r0
;;;241      U32 Data;
;;;242    
;;;243      if ((_ReadDCCStat() & 1) == 0) {       // Data or command received ?
000002  4a0a              LDR      r2,|L2.44|
000004  6812              LDR      r2,[r2,#0]  ; _WrPos
000006  1c50              ADDS     r0,r2,#1
000008  2201              MOVS     r2,#1
00000a  0292              LSLS     r2,r2,#10
;;;244        return;      // Nothing received
;;;245      }
;;;246    
;;;247      Data = _ReadDCC();
;;;248      //
;;;249      // If item received does not have the command-flag set, it is the new addr.
;;;250      //
;;;251      if ((Data & DCC_OP_COMMAND) == 0) {
;;;252        _Addr = Data;
;;;253        return;
;;;254      }
;;;255      //
;;;256      // If item received is a terminal out command,
;;;257      //
;;;258      if ((Data & 0xFF000000) == 0x93000000) {
;;;259        unsigned Channel;
;;;260        Channel = (Data >> 19) & 0x1F;
;;;261        if (_pfOnRx[Channel]) {
;;;262          _pfOnRx[Channel](Channel, (Data >> 1) & 0xFF);
;;;263        }
;;;264        return;
;;;265      }
;;;266      //
;;;267      // We received a new command.
;;;268      //
;;;269      _Command = Data;
;;;270      if (_Command & DCC_OP_ODD_ADDR) {
;;;271        _Addr |= 1;
;;;272      }
;;;273      if (_Command & (DCC_OP_READ_U32 | DCC_OP_READ_U16 | DCC_OP_READ_U8 | DCC_OP_GET_CAPS)) {
;;;274        _NumReadItems = (_Command >> 2) & 0xffff;
;;;275      } else {
;;;276        // Clear before write
;;;277        JLINKDCC_AbortOccurred = 0;
;;;278    
;;;279        if (_Command & DCC_OP_WRITE_U32) {
;;;280          _Data |= (_Command << 14) & 0xffff0000;
;;;281        } else {
;;;282          _Data = (_Command >> 2) & 0xffff;
;;;283        }
;;;284        if (_Command & DCC_OP_WRITE_U8) {
;;;285          *(U8*)_Addr = _Data;
;;;286          _Addr += 1;
;;;287        }
;;;288        if (_Command & DCC_OP_WRITE_U16) {
;;;289          *(U16*)_Addr = _Data;
;;;290          _Addr += 2;
;;;291        }
;;;292        if (_Command & DCC_OP_WRITE_U32) {
;;;293          *(U32*)_Addr =_Data;
;;;294          _Addr += 4;
;;;295        }
;;;296      }
;;;297    }
00000c  4290              CMP      r0,r2
00000e  d100              BNE      |L2.18|
000010  2000              MOVS     r0,#0
                  |L2.18|
000012  4a07              LDR      r2,|L2.48|
000014  6812              LDR      r2,[r2,#0]            ;247  ; _RdPos
000016  4290              CMP      r0,r2                 ;247
000018  d100              BNE      |L2.28|
                  |L2.26|
00001a  4770              BX       lr                    ;251
                  |L2.28|
00001c  4a05              LDR      r2,|L2.52|
00001e  4b03              LDR      r3,|L2.44|
000020  681b              LDR      r3,[r3,#0]            ;252  ; _WrPos
000022  54d1              STRB     r1,[r2,r3]            ;253
000024  4a01              LDR      r2,|L2.44|
000026  6010              STR      r0,[r2,#0]            ;258  ; _WrPos
000028  46c0              MOV      r8,r8                 ;258
00002a  e7f6              B        |L2.26|
;;;298    
                          ENDP

                  |L2.44|
                          DCD      _WrPos
                  |L2.48|
                          DCD      _RdPos
                  |L2.52|
                          DCD      _acBuffer

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.3||, ||.text||
                  JLINKDCC_SendString PROC
;;;239    */
;;;240    static void _HandleRead(void) {
000000  b530              PUSH     {r4,r5,lr}
;;;241      U32 Data;
;;;242    
;;;243      if ((_ReadDCCStat() & 1) == 0) {       // Data or command received ?
000002  0004              MOVS     r4,r0
000004  e007              B        |L3.22|
                  |L3.6|
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  2d00              CMP      r5,#0
;;;244        return;      // Nothing received
;;;245      }
;;;246    
;;;247      Data = _ReadDCC();
;;;248      //
;;;249      // If item received does not have the command-flag set, it is the new addr.
;;;250      //
;;;251      if ((Data & DCC_OP_COMMAND) == 0) {
;;;252        _Addr = Data;
;;;253        return;
;;;254      }
;;;255      //
;;;256      // If item received is a terminal out command,
;;;257      //
;;;258      if ((Data & 0xFF000000) == 0x93000000) {
;;;259        unsigned Channel;
;;;260        Channel = (Data >> 19) & 0x1F;
;;;261        if (_pfOnRx[Channel]) {
;;;262          _pfOnRx[Channel](Channel, (Data >> 1) & 0xFF);
;;;263        }
;;;264        return;
;;;265      }
;;;266      //
;;;267      // We received a new command.
;;;268      //
;;;269      _Command = Data;
;;;270      if (_Command & DCC_OP_ODD_ADDR) {
;;;271        _Addr |= 1;
;;;272      }
;;;273      if (_Command & (DCC_OP_READ_U32 | DCC_OP_READ_U16 | DCC_OP_READ_U8 | DCC_OP_GET_CAPS)) {
;;;274        _NumReadItems = (_Command >> 2) & 0xffff;
;;;275      } else {
;;;276        // Clear before write
;;;277        JLINKDCC_AbortOccurred = 0;
;;;278    
;;;279        if (_Command & DCC_OP_WRITE_U32) {
;;;280          _Data |= (_Command << 14) & 0xffff0000;
;;;281        } else {
;;;282          _Data = (_Command >> 2) & 0xffff;
;;;283        }
;;;284        if (_Command & DCC_OP_WRITE_U8) {
;;;285          *(U8*)_Addr = _Data;
;;;286          _Addr += 1;
;;;287        }
;;;288        if (_Command & DCC_OP_WRITE_U16) {
;;;289          *(U16*)_Addr = _Data;
;;;290          _Addr += 2;
;;;291        }
;;;292        if (_Command & DCC_OP_WRITE_U32) {
;;;293          *(U32*)_Addr =_Data;
;;;294          _Addr += 4;
;;;295        }
;;;296      }
;;;297    }
00000c  d100              BNE      |L3.16|
00000e  e003              B        |L3.24|
                  |L3.16|
000010  0028              MOVS     r0,r5
000012  f7fffffe          BL       JLINKDCC_SendChar
                  |L3.22|
000016  e7f6              B        |L3.6|
                  |L3.24|
000018  46c0              MOV      r8,r8                 ;251
00001a  bc30              POP      {r4,r5}               ;251
00001c  bc08              POP      {r3}                  ;251
00001e  4718              BX       r3                    ;252
;;;298    
                          ENDP


                          AREA ||area_number.4||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.text||
                  JLINKDCC_SendOnChannel PROC
;;;239    */
;;;240    static void _HandleRead(void) {
000000  b5f8              PUSH     {r3-r7,lr}
;;;241      U32 Data;
;;;242    
;;;243      if ((_ReadDCCStat() & 1) == 0) {       // Data or command received ?
000002  0007              MOVS     r7,r0
000004  000d              MOVS     r5,r1
000006  0016              MOVS     r6,r2
000008  2f00              CMP      r7,#0
00000a  d10a              BNE      |L4.34|
;;;244        return;      // Nothing received
;;;245      }
;;;246    
;;;247      Data = _ReadDCC();
;;;248      //
;;;249      // If item received does not have the command-flag set, it is the new addr.
;;;250      //
;;;251      if ((Data & DCC_OP_COMMAND) == 0) {
;;;252        _Addr = Data;
;;;253        return;
;;;254      }
;;;255      //
;;;256      // If item received is a terminal out command,
;;;257      //
;;;258      if ((Data & 0xFF000000) == 0x93000000) {
;;;259        unsigned Channel;
;;;260        Channel = (Data >> 19) & 0x1F;
;;;261        if (_pfOnRx[Channel]) {
;;;262          _pfOnRx[Channel](Channel, (Data >> 1) & 0xFF);
;;;263        }
;;;264        return;
;;;265      }
;;;266      //
;;;267      // We received a new command.
;;;268      //
;;;269      _Command = Data;
;;;270      if (_Command & DCC_OP_ODD_ADDR) {
;;;271        _Addr |= 1;
;;;272      }
;;;273      if (_Command & (DCC_OP_READ_U32 | DCC_OP_READ_U16 | DCC_OP_READ_U8 | DCC_OP_GET_CAPS)) {
;;;274        _NumReadItems = (_Command >> 2) & 0xffff;
;;;275      } else {
;;;276        // Clear before write
;;;277        JLINKDCC_AbortOccurred = 0;
;;;278    
;;;279        if (_Command & DCC_OP_WRITE_U32) {
;;;280          _Data |= (_Command << 14) & 0xffff0000;
;;;281        } else {
;;;282          _Data = (_Command >> 2) & 0xffff;
;;;283        }
;;;284        if (_Command & DCC_OP_WRITE_U8) {
;;;285          *(U8*)_Addr = _Data;
;;;286          _Addr += 1;
;;;287        }
;;;288        if (_Command & DCC_OP_WRITE_U16) {
;;;289          *(U16*)_Addr = _Data;
;;;290          _Addr += 2;
;;;291        }
;;;292        if (_Command & DCC_OP_WRITE_U32) {
;;;293          *(U32*)_Addr =_Data;
;;;294          _Addr += 4;
;;;295        }
;;;296      }
;;;297    }
00000c  e004              B        |L4.24|
                  |L4.14|
00000e  782c              LDRB     r4,[r5,#0]
000010  1c6d              ADDS     r5,r5,#1
000012  0020              MOVS     r0,r4                 ;247
000014  f7fffffe          BL       JLINKDCC_SendChar
                  |L4.24|
000018  0030              MOVS     r0,r6                 ;251
00001a  1e76              SUBS     r6,r6,#1              ;251
00001c  2800              CMP      r0,#0                 ;251
00001e  dcf6              BGT      |L4.14|
000020  e01d              B        |L4.94|
                  |L4.34|
000022  e018              B        |L4.86|
                  |L4.36|
000024  782c              LDRB     r4,[r5,#0]            ;258
000026  1c6d              ADDS     r5,r5,#1              ;258
000028  2e00              CMP      r6,#0                 ;258
00002a  dd07              BLE      |L4.60|
00002c  7829              LDRB     r1,[r5,#0]            ;258
00002e  1c6d              ADDS     r5,r5,#1              ;258
000030  0208              LSLS     r0,r1,#8              ;260
000032  4304              ORRS     r4,r4,r0              ;260
000034  1e76              SUBS     r6,r6,#1              ;261
000036  2001              MOVS     r0,#1                 ;261
000038  0540              LSLS     r0,r0,#21             ;261
00003a  4304              ORRS     r4,r4,r0              ;261
                  |L4.60|
00003c  4809              LDR      r0,|L4.100|
00003e  4304              ORRS     r4,r4,r0              ;262
000040  0438              LSLS     r0,r7,#16             ;262
000042  4304              ORRS     r4,r4,r0              ;262
000044  46c0              MOV      r8,r8                 ;262
                  |L4.70|
000046  f7fffffe          BL       CP14_ReadDCCStat
00004a  2102              MOVS     r1,#2                 ;262
00004c  4208              TST      r0,r1                 ;262
00004e  d1fa              BNE      |L4.70|
000050  0020              MOVS     r0,r4                 ;269
000052  f7fffffe          BL       CP14_WriteDCC
                  |L4.86|
000056  0030              MOVS     r0,r6                 ;270
000058  1e76              SUBS     r6,r6,#1              ;270
00005a  2800              CMP      r0,#0                 ;270
00005c  dce2              BGT      |L4.36|
                  |L4.94|
00005e  bcf8              POP      {r3-r7}               ;271
000060  bc08              POP      {r3}                  ;271
000062  4718              BX       r3                    ;271
;;;298    
                          ENDP

                  |L4.100|
                          DCD      0x93800000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  _acBuffer
                          %        1024

                          AREA ||.data||, DATA, ALIGN=2

                  _ActiveChannel
                          DCD      0x00000000
                  _WritePendingNB
000004  00000000          DCB      0x00,0x00,0x00,0x00
                  _PendingPacketNB
                          DCD      0x00000000
                  JLINKDCC_IsInHandler
00000c  00                DCB      0x00
                  JLINKDCC_AbortOccurred
00000d  000000            DCB      0x00,0x00,0x00
                  _pfOnRx
                          %        8
                  _pfOnTx
                          %        8
                  _NumReadItems
000020  00000000          DCB      0x00,0x00,0x00,0x00
                  _Command
                          DCD      0x00000000
                  _Addr
                          DCD      0x00000000
                  _RdPos
                          DCD      0x00000000
                  _WrPos
                          DCD      0x00000000
                  _WritePending
000034  00000000          DCB      0x00,0x00,0x00,0x00
                  _Data
                          DCD      0x00000000

                          AREA ||i.__ARM_common_call_via_r1||, COMGROUP=__ARM_common_call_via_r1, CODE, READONLY, ALIGN=1

                  __ARM_common_call_via_r1 PROC
000000  4708              BX       r1
                          ENDP


                          AREA ||i.__ARM_common_call_via_r2||, COMGROUP=__ARM_common_call_via_r2, CODE, READONLY, ALIGN=1

                  __ARM_common_call_via_r2 PROC
000000  4710              BX       r2
                          ENDP

