; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--thumb --list --debug -c --asm --interleave -o.\output\lpc2478_ea\debug_flash_j-link\obj\gui_x_embos.o --asm_dir=.\Output\LPC2478_EA\Debug_FLASH_J-Link\LST\ --list_dir=.\Output\LPC2478_EA\Debug_FLASH_J-Link\LST\ --depend=.\output\lpc2478_ea\debug_flash_j-link\obj\gui_x_embos.d --feedback=.\Output\LPC2478_EA\Debug_FLASH_J-Link\OBJ\Start_LPC2478_EA.fed --apcs=interwork -O0 -IApplication\SEGGERDEMO -IApplication\SEGGERDEMO\Src -ISetup -IInc -IConfig -IFS -IIP -IIP\IP_FS\FS_RO\Generated -IGUI -IOS -IUSB -IUSBH -I"C:\Program Files (x86)\Keil\V473\ARM\RV31\INC" -I"C:\Program Files (x86)\Keil\V473\ARM\CMSIS\Include" -I"C:\Program Files (x86)\Keil\V473\ARM\Inc\Philips" -DDEBUG=1 --omf_browse=.\output\lpc2478_ea\debug_flash_j-link\obj\gui_x_embos.crf GUI\GUI_X_embOS.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  GUI_X_GetTime PROC
;;;35     
;;;36     int GUI_X_GetTime(void) {
000000  480e              LDR      r0,|L1.60|
;;;37       return OS_GetTime();
000002  6800              LDR      r0,[r0,#0]  ; OS_Time
;;;38     }
000004  4770              BX       lr
;;;39     
                          ENDP

                  GUI_X_Unlock PROC
;;;40     void GUI_X_Delay(int Period) {
;;;41       OS_Delay(Period);
000006  b510              PUSH     {r4,lr}
000008  480d              LDR      r0,|L1.64|
;;;42     }
00000a  f7fffffe          BL       OS_Unuse
00000e  bc10              POP      {r4}
000010  bc08              POP      {r3}
000012  4718              BX       r3
;;;43     
                          ENDP

                  GUI_X_Lock PROC
;;;75     void GUI_X_Unlock(void)    { OS_Unuse(&RSema); }
;;;76     void GUI_X_Lock(void)      { OS_Use(&RSema);  }
000014  b510              PUSH     {r4,lr}
000016  480a              LDR      r0,|L1.64|
000018  f7fffffe          BL       OS_Use
00001c  bc10              POP      {r4}
00001e  bc08              POP      {r3}
000020  4718              BX       r3
;;;77     U32  GUI_X_GetTaskId(void) { return (U32)OS_GetTaskID(); }
                          ENDP

                  GUI_X_GetTaskId PROC
000022  4808              LDR      r0,|L1.68|
000024  6800              LDR      r0,[r0,#0]  ; OS_pCurrentTask
000026  4770              BX       lr
;;;78     
                          ENDP

                  _OnRx PROC
;;;112    
;;;113    static void _OnRx(OS_U8 Data) {
000028  b510              PUSH     {r4,lr}
00002a  0004              MOVS     r4,r0
;;;114      #if 0
;;;115        int Key;
;;;116        switch (Data) {
;;;117        case 'y':
;;;118          Key = GUI_KEY_LEFT;
;;;119          break;
;;;120        case 'x':
;;;121          Key = GUI_KEY_RIGHT;
;;;122          break;
;;;123        case 'q':
;;;124          Key = GUI_KEY_UP;
;;;125          break;
;;;126        case 'a':
;;;127          Key = GUI_KEY_DOWN;
;;;128          break;
;;;129        case 'w':
;;;130          Key = GUI_KEY_BACKSPACE;
;;;131          break;
;;;132        default:
;;;133          Key = Data;
;;;134        }
;;;135        GUI_StoreKeyMsg(Key, 1);
;;;136      #else
;;;137        GUI_StoreKeyMsg(Data, 1);
00002c  2101              MOVS     r1,#1
00002e  0020              MOVS     r0,r4
000030  f7fffffe          BL       GUI_StoreKeyMsg
;;;138      #endif
;;;139    }
000034  bc10              POP      {r4}
000036  bc08              POP      {r3}
000038  4718              BX       r3
;;;140    
                          ENDP

00003a  0000              DCW      0x0000
                  |L1.60|
                          DCD      OS_Time
                  |L1.64|
                          DCD      RSema
                  |L1.68|
                          DCD      OS_pCurrentTask

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.2||, ||.text||
                  GUI_X_Delay PROC
;;;140    
;;;141    void GUI_X_Init(void) {
000000  b510              PUSH     {r4,lr}
;;;142      OS_SetRxCallback(_OnRx);
000002  0004              MOVS     r4,r0
000004  0020              MOVS     r0,r4
000006  f7fffffe          BL       OS_Delay
;;;143    }
00000a  bc10              POP      {r4}
00000c  bc08              POP      {r3}
00000e  4718              BX       r3
;;;144    
                          ENDP


                          AREA ||area_number.3||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.3||, ||.text||
                  GUI_X_ExecIdle PROC
;;;140    
;;;141    void GUI_X_Init(void) {
000000  b510              PUSH     {r4,lr}
;;;142      OS_SetRxCallback(_OnRx);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       OS_Delay
;;;143    }
000008  bc10              POP      {r4}
00000a  bc08              POP      {r3}
00000c  4718              BX       r3
;;;144    
                          ENDP


                          AREA ||area_number.4||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.text||
                  GUI_X_InitOS PROC
;;;140    
;;;141    void GUI_X_Init(void) {
000000  b510              PUSH     {r4,lr}
;;;142      OS_SetRxCallback(_OnRx);
000002  4803              LDR      r0,|L4.16|
000004  f7fffffe          BL       OS_CreateRSema
;;;143    }
000008  bc10              POP      {r4}
00000a  bc08              POP      {r3}
00000c  4718              BX       r3
;;;144    
                          ENDP

00000e  0000              DCW      0x0000
                  |L4.16|
                          DCD      RSema

                          AREA ||area_number.5||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.text||
                  GUI_X_WaitEvent PROC
;;;140    
;;;141    void GUI_X_Init(void) {
000000  b510              PUSH     {r4,lr}
;;;142      OS_SetRxCallback(_OnRx);
000002  4805              LDR      r0,|L5.24|
000004  6800              LDR      r0,[r0,#0]  ; OS_pCurrentTask
000006  4905              LDR      r1,|L5.28|
;;;143    }
000008  6008              STR      r0,[r1,#0]  ; _pGUITask
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       OS_WaitEvent
000010  bc10              POP      {r4}
000012  bc08              POP      {r3}
000014  4718              BX       r3
;;;144    
                          ENDP

000016  0000              DCW      0x0000
                  |L5.24|
                          DCD      OS_pCurrentTask
                  |L5.28|
                          DCD      _pGUITask

                          AREA ||area_number.6||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.text||
                  GUI_X_SignalEvent PROC
;;;140    
;;;141    void GUI_X_Init(void) {
000000  b510              PUSH     {r4,lr}
;;;142      OS_SetRxCallback(_OnRx);
000002  4806              LDR      r0,|L6.28|
000004  6800              LDR      r0,[r0,#0]  ; _pGUITask
000006  2800              CMP      r0,#0
;;;143    }
000008  d004              BEQ      |L6.20|
00000a  4804              LDR      r0,|L6.28|
00000c  6801              LDR      r1,[r0,#0]  ; _pGUITask
00000e  2001              MOVS     r0,#1
000010  f7fffffe          BL       OS_SignalEvent
                  |L6.20|
000014  bc10              POP      {r4}
000016  bc08              POP      {r3}
000018  4718              BX       r3
;;;144    
                          ENDP

00001a  0000              DCW      0x0000
                  |L6.28|
                          DCD      _pGUITask

                          AREA ||area_number.7||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.text||
                  GUI_X_Init PROC
;;;140    
;;;141    void GUI_X_Init(void) {
000000  b510              PUSH     {r4,lr}
;;;142      OS_SetRxCallback(_OnRx);
000002  4803              LDR      r0,|L7.16|
000004  f7fffffe          BL       OS_SetRxCallback
;;;143    }
000008  bc10              POP      {r4}
00000a  bc08              POP      {r3}
00000c  4718              BX       r3
;;;144    
                          ENDP

00000e  0000              DCW      0x0000
                  |L7.16|
                          DCD      _OnRx

                          AREA ||area_number.8||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.8||, ||.text||
                  GUI_X_Log PROC
;;;140    
;;;141    void GUI_X_Init(void) {
000000  46c0              MOV      r8,r8
;;;142      OS_SetRxCallback(_OnRx);
000002  4770              BX       lr
;;;143    }
;;;144    
                          ENDP


                          AREA ||area_number.9||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.9||, ||.text||
                  GUI_X_Warn PROC
;;;140    
;;;141    void GUI_X_Init(void) {
000000  46c0              MOV      r8,r8
;;;142      OS_SetRxCallback(_OnRx);
000002  4770              BX       lr
;;;143    }
;;;144    
                          ENDP


                          AREA ||area_number.10||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.10||, ||.text||
                  GUI_X_ErrorOut PROC
;;;140    
;;;141    void GUI_X_Init(void) {
000000  46c0              MOV      r8,r8
;;;142      OS_SetRxCallback(_OnRx);
000002  4770              BX       lr
;;;143    }
;;;144    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  RSema
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  _pGUITask
                          DCD      0x00000000
