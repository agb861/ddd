; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--thumb --list --debug -c --asm --interleave -o.\output\lpc2478_ea\debug_flash_j-link\obj\usbh_configio.o --asm_dir=.\Output\LPC2478_EA\Debug_FLASH_J-Link\LST\ --list_dir=.\Output\LPC2478_EA\Debug_FLASH_J-Link\LST\ --depend=.\output\lpc2478_ea\debug_flash_j-link\obj\usbh_configio.d --apcs=interwork -O0 -IApplication\SEGGERDEMO -IApplication\SEGGERDEMO\Src -ISetup -IInc -IConfig -IFS -IIP -IIP\IP_FS\FS_RO\Generated -IGUI -IOS -IUSB -IUSBH -I"C:\Program Files (x86)\Keil\V473\ARM\RV31\INC" -I"C:\Program Files (x86)\Keil\V473\ARM\CMSIS\Include" -I"C:\Program Files (x86)\Keil\V473\ARM\Inc\Philips" -DDEBUG=1 --omf_browse=.\output\lpc2478_ea\debug_flash_j-link\obj\usbh_configio.crf Config\USBH_ConfigIO.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _puts PROC
;;;50     */
;;;51     static void _puts(const char * s) {
000000  b570              PUSH     {r4-r6,lr}
000002  0004              MOVS     r4,r0
;;;52       char c;
;;;53     
;;;54     #if USE_EMBOS_VIEW
;;;55       OS_SendString(s);
;;;56     #else
;;;57       for (;;) {
000004  46c0              MOV      r8,r8
                  |L1.6|
;;;58         c = *s++;
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
;;;59         if (c == 0) {
00000a  2d00              CMP      r5,#0
00000c  d100              BNE      |L1.16|
;;;60           break;
00000e  e004              B        |L1.26|
                  |L1.16|
;;;61         }
;;;62     #if USE_DCC
;;;63         JLINKDCC_SendChar(c);
;;;64     #else
;;;65         putchar(c);
000010  4956              LDR      r1,|L1.364|
000012  0028              MOVS     r0,r5
000014  f7fffffe          BL       putc
000018  e7f5              B        |L1.6|
                  |L1.26|
00001a  46c0              MOV      r8,r8                 ;60
;;;66     #endif
;;;67       }
;;;68     #endif
;;;69     }
00001c  bc70              POP      {r4-r6}
00001e  bc08              POP      {r3}
000020  4718              BX       r3
;;;70     
                          ENDP

                  _WriteUnsigned PROC
;;;76     */
;;;77     static char * _WriteUnsigned(char * s, U32 v, int NumDigits) {
000022  b5f7              PUSH     {r0-r2,r4-r7,lr}
000024  b082              SUB      sp,sp,#8
000026  0005              MOVS     r5,r0
000028  000e              MOVS     r6,r1
;;;78       unsigned   Base;
;;;79       unsigned   Div;
;;;80       U32        Digit;
;;;81       Digit    = 1;
00002a  2401              MOVS     r4,#1
;;;82       Base     = 10;
00002c  200a              MOVS     r0,#0xa
00002e  9001              STR      r0,[sp,#4]
;;;83       //
;;;84       // Count how many digits are required
;;;85       //
;;;86       while (((v / Digit) >= Base) | (NumDigits-- > 1)) {
000030  e001              B        |L1.54|
                  |L1.50|
;;;87         Digit *= Base;
000032  9801              LDR      r0,[sp,#4]
000034  4344              MULS     r4,r0,r4
                  |L1.54|
000036  0021              MOVS     r1,r4                 ;86
000038  0030              MOVS     r0,r6                 ;86
00003a  f7fffffe          BL       __aeabi_uidivmod
00003e  9901              LDR      r1,[sp,#4]            ;86
000040  4288              CMP      r0,r1                 ;86
000042  d301              BCC      |L1.72|
000044  2101              MOVS     r1,#1                 ;86
000046  e000              B        |L1.74|
                  |L1.72|
000048  2100              MOVS     r1,#0                 ;86
                  |L1.74|
00004a  9804              LDR      r0,[sp,#0x10]         ;86
00004c  1e42              SUBS     r2,r0,#1              ;86
00004e  9204              STR      r2,[sp,#0x10]         ;86
000050  2801              CMP      r0,#1                 ;86
000052  dd01              BLE      |L1.88|
000054  2001              MOVS     r0,#1                 ;86
000056  e000              B        |L1.90|
                  |L1.88|
000058  2000              MOVS     r0,#0                 ;86
                  |L1.90|
00005a  4301              ORRS     r1,r1,r0              ;86
00005c  d1e9              BNE      |L1.50|
;;;88       }
;;;89       //
;;;90       // Output digits
;;;91       //
;;;92       do {
00005e  46c0              MOV      r8,r8
                  |L1.96|
;;;93         Div = v / Digit;
000060  0021              MOVS     r1,r4
000062  0030              MOVS     r0,r6
000064  f7fffffe          BL       __aeabi_uidivmod
000068  0007              MOVS     r7,r0
;;;94         v  -= Div * Digit;
00006a  0038              MOVS     r0,r7
00006c  4360              MULS     r0,r4,r0
00006e  1a36              SUBS     r6,r6,r0
;;;95         *s++ = (char)('0' + Div);
000070  0038              MOVS     r0,r7
000072  3030              ADDS     r0,r0,#0x30
000074  7028              STRB     r0,[r5,#0]
000076  1c6d              ADDS     r5,r5,#1
;;;96         Digit /= Base;
000078  0020              MOVS     r0,r4
00007a  9901              LDR      r1,[sp,#4]
00007c  f7fffffe          BL       __aeabi_uidivmod
000080  0004              MOVS     r4,r0
;;;97       } while (Digit);
000082  2c00              CMP      r4,#0
000084  d1ec              BNE      |L1.96|
;;;98       *s = 0;
000086  7028              STRB     r0,[r5,#0]
;;;99       return s;
000088  0028              MOVS     r0,r5
;;;100    }
00008a  b005              ADD      sp,sp,#0x14
00008c  bcf0              POP      {r4-r7}
00008e  bc08              POP      {r3}
000090  4718              BX       r3
;;;101    
                          ENDP

                  _ShowStamp PROC
;;;107    */
;;;108    static void _ShowStamp(void) {
000092  b570              PUSH     {r4-r6,lr}
000094  b086              SUB      sp,sp,#0x18
;;;109    #if SHOW_TIME
;;;110      I32    Time;
;;;111      char   ac[20];
;;;112      char * sBuffer = &ac[0];
000096  ac01              ADD      r4,sp,#4
;;;113      Time           = OS_GetTime32();
000098  4835              LDR      r0,|L1.368|
00009a  6806              LDR      r6,[r0,#0]  ; OS_Time
;;;114      sBuffer        = _WriteUnsigned(sBuffer, Time / 1000, 0);
00009c  217d              MOVS     r1,#0x7d
00009e  00c9              LSLS     r1,r1,#3
0000a0  0030              MOVS     r0,r6
0000a2  f7fffffe          BL       __aeabi_idivmod
0000a6  0005              MOVS     r5,r0
0000a8  2200              MOVS     r2,#0
0000aa  0029              MOVS     r1,r5
0000ac  0020              MOVS     r0,r4
0000ae  f7fffffe          BL       _WriteUnsigned
0000b2  0004              MOVS     r4,r0
;;;115      *sBuffer++     = ':';
0000b4  203a              MOVS     r0,#0x3a
0000b6  7020              STRB     r0,[r4,#0]
0000b8  1c64              ADDS     r4,r4,#1
;;;116      sBuffer        = _WriteUnsigned(sBuffer, Time % 1000, 3);
0000ba  217d              MOVS     r1,#0x7d
0000bc  00c9              LSLS     r1,r1,#3
0000be  0030              MOVS     r0,r6
0000c0  f7fffffe          BL       __aeabi_idivmod
0000c4  000d              MOVS     r5,r1
0000c6  2203              MOVS     r2,#3
0000c8  0020              MOVS     r0,r4
0000ca  f7fffffe          BL       _WriteUnsigned
0000ce  0004              MOVS     r4,r0
;;;117      *sBuffer++     = ' ';
0000d0  2020              MOVS     r0,#0x20
0000d2  7020              STRB     r0,[r4,#0]
0000d4  1c64              ADDS     r4,r4,#1
;;;118      *sBuffer++     = 0;
0000d6  2000              MOVS     r0,#0
0000d8  7020              STRB     r0,[r4,#0]
0000da  1c64              ADDS     r4,r4,#1
;;;119      _puts(ac);
0000dc  a801              ADD      r0,sp,#4
0000de  f7fffffe          BL       _puts
;;;120    #endif
;;;121    
;;;122    #if SHOW_TASK
;;;123    {
;;;124      const char * s;
;;;125      s = OS_GetTaskName(OS_pCurrentTask);
0000e2  4824              LDR      r0,|L1.372|
0000e4  6800              LDR      r0,[r0,#0]  ; OS_pCurrentTask
0000e6  f7fffffe          BL       OS_GetTaskName
0000ea  0005              MOVS     r5,r0
;;;126      if (s) {
0000ec  2d00              CMP      r5,#0
0000ee  d005              BEQ      |L1.252|
;;;127        _puts(s);
0000f0  0028              MOVS     r0,r5
0000f2  f7fffffe          BL       _puts
;;;128        _puts(" - ");
0000f6  a020              ADR      r0,|L1.376|
0000f8  f7fffffe          BL       _puts
                  |L1.252|
;;;129      }
;;;130    }
;;;131    #endif
;;;132    }
0000fc  b006              ADD      sp,sp,#0x18
0000fe  bc70              POP      {r4-r6}
000100  bc08              POP      {r3}
000102  4718              BX       r3
;;;133    
                          ENDP

                  USBH_Panic PROC
;;;141    */
;;;142    void USBH_Panic(const char * s) {
000104  0004              MOVS     r4,r0
;;;143      USBH_OS_DisableInterrupt();
000106  f7fffffe          BL       USBH_OS_DisableInterrupt
;;;144    #if USBH_DEBUG > 1
;;;145      _puts("*** Fatal error, System halted: ");
00010a  a01c              ADR      r0,|L1.380|
00010c  f7fffffe          BL       _puts
;;;146      _puts(s);
000110  0020              MOVS     r0,r4
000112  f7fffffe          BL       _puts
;;;147      _puts("\n");
000116  a022              ADR      r0,|L1.416|
000118  f7fffffe          BL       _puts
;;;148    #endif
;;;149      while (1);
00011c  46c0              MOV      r8,r8
                  |L1.286|
00011e  e7fe              B        |L1.286|
;;;150    }
;;;151    
                          ENDP

                  USBH_Log PROC
;;;165    */
;;;166    void USBH_Log(const char * s) {
000120  b510              PUSH     {r4,lr}
000122  0004              MOVS     r4,r0
;;;167      USBH_OS_DisableInterrupt();
000124  f7fffffe          BL       USBH_OS_DisableInterrupt
;;;168      _ShowStamp();
000128  f7fffffe          BL       _ShowStamp
;;;169      _puts(s);
00012c  0020              MOVS     r0,r4
00012e  f7fffffe          BL       _puts
;;;170      _puts("\n");
000132  a01b              ADR      r0,|L1.416|
000134  f7fffffe          BL       _puts
;;;171      USBH_OS_EnableInterrupt();
000138  f7fffffe          BL       USBH_OS_EnableInterrupt
;;;172    }
00013c  bc10              POP      {r4}
00013e  bc08              POP      {r3}
000140  4718              BX       r3
;;;173    
                          ENDP

                  USBH_Warn PROC
;;;185    */
;;;186    void USBH_Warn(const char * s) {
000142  b510              PUSH     {r4,lr}
000144  0004              MOVS     r4,r0
;;;187      USBH_OS_DisableInterrupt();
000146  f7fffffe          BL       USBH_OS_DisableInterrupt
;;;188      _ShowStamp();
00014a  f7fffffe          BL       _ShowStamp
;;;189      _puts("*** Warning *** ");
00014e  a015              ADR      r0,|L1.420|
000150  f7fffffe          BL       _puts
;;;190      _puts(s);
000154  0020              MOVS     r0,r4
000156  f7fffffe          BL       _puts
;;;191      _puts("\n");
00015a  a011              ADR      r0,|L1.416|
00015c  f7fffffe          BL       _puts
;;;192      USBH_OS_EnableInterrupt();
000160  f7fffffe          BL       USBH_OS_EnableInterrupt
;;;193    }
000164  bc10              POP      {r4}
000166  bc08              POP      {r3}
000168  4718              BX       r3
;;;194    
                          ENDP

00016a  0000              DCW      0x0000
                  |L1.364|
                          DCD      __stdout
                  |L1.368|
                          DCD      OS_Time
                  |L1.372|
                          DCD      OS_pCurrentTask
                  |L1.376|
000178  202d2000          DCB      " - ",0
                  |L1.380|
00017c  2a2a2a20          DCB      "*** Fatal error, System halted: ",0
000180  46617461
000184  6c206572
000188  726f722c
00018c  20537973
000190  74656d20
000194  68616c74
000198  65643a20
00019c  00      
00019d  00                DCB      0
00019e  00                DCB      0
00019f  00                DCB      0
                  |L1.416|
0001a0  0a00              DCB      "\n",0
0001a2  00                DCB      0
0001a3  00                DCB      0
                  |L1.420|
0001a4  2a2a2a20          DCB      "*** Warning *** ",0
0001a8  5761726e
0001ac  696e6720
0001b0  2a2a2a20
0001b4  00      
0001b5  00                DCB      0
0001b6  00                DCB      0
0001b7  00                DCB      0
