; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--thumb --list --debug -c --asm --interleave -o.\output\lpc2478_ea\debug_flash_j-link\obj\ip_configio.o --asm_dir=.\Output\LPC2478_EA\Debug_FLASH_J-Link\LST\ --list_dir=.\Output\LPC2478_EA\Debug_FLASH_J-Link\LST\ --depend=.\output\lpc2478_ea\debug_flash_j-link\obj\ip_configio.d --feedback=.\Output\LPC2478_EA\Debug_FLASH_J-Link\OBJ\Start_LPC2478_EA.fed --apcs=interwork -O0 -IApplication\SEGGERDEMO -IApplication\SEGGERDEMO\Src -ISetup -IInc -IConfig -IFS -IIP -IIP\IP_FS\FS_RO\Generated -IGUI -IOS -IUSB -IUSBH -I"C:\Program Files (x86)\Keil\V473\ARM\RV31\INC" -I"C:\Program Files (x86)\Keil\V473\ARM\CMSIS\Include" -I"C:\Program Files (x86)\Keil\V473\ARM\Inc\Philips" -DDEBUG=1 --omf_browse=.\output\lpc2478_ea\debug_flash_j-link\obj\ip_configio.crf Config\IP_ConfigIO.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _puts PROC
;;;48     */
;;;49     static void _puts(const char * s) {
000000  b570              PUSH     {r4-r6,lr}
000002  0004              MOVS     r4,r0
;;;50       char c;
;;;51       for (;;) {
000004  46c0              MOV      r8,r8
                  |L1.6|
;;;52        c = *s++;
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
;;;53        if (c == 0) {
00000a  2d00              CMP      r5,#0
00000c  d100              BNE      |L1.16|
;;;54          break;
00000e  e004              B        |L1.26|
                  |L1.16|
;;;55        }
;;;56     #if USE_DCC
;;;57        JLINKDCC_SendChar(c);
;;;58     #else
;;;59        putchar(c);
000010  493c              LDR      r1,|L1.260|
000012  0028              MOVS     r0,r5
000014  f7fffffe          BL       putc
000018  e7f5              B        |L1.6|
                  |L1.26|
00001a  46c0              MOV      r8,r8                 ;54
;;;60     #endif
;;;61       }
;;;62     }
00001c  bc70              POP      {r4-r6}
00001e  bc08              POP      {r3}
000020  4718              BX       r3
;;;63     
                          ENDP

                  _WriteUnsigned PROC
;;;67     */
;;;68     static char * _WriteUnsigned(char * s, U32 v, int NumDigits) {
000022  b5f7              PUSH     {r0-r2,r4-r7,lr}
000024  b082              SUB      sp,sp,#8
000026  0005              MOVS     r5,r0
000028  000e              MOVS     r6,r1
;;;69       unsigned Base;
;;;70       unsigned Div;
;;;71       U32 Digit;
;;;72     
;;;73       Digit = 1;
00002a  2401              MOVS     r4,#1
;;;74       Base  = 10;
00002c  200a              MOVS     r0,#0xa
00002e  9001              STR      r0,[sp,#4]
;;;75       //
;;;76       // Count how many digits are required
;;;77       //
;;;78       while (((v / Digit) >= Base) | (NumDigits-- > 1)) {
000030  e001              B        |L1.54|
                  |L1.50|
;;;79         Digit *= Base;
000032  9801              LDR      r0,[sp,#4]
000034  4344              MULS     r4,r0,r4
                  |L1.54|
000036  0021              MOVS     r1,r4                 ;78
000038  0030              MOVS     r0,r6                 ;78
00003a  f7fffffe          BL       __aeabi_uidivmod
00003e  9901              LDR      r1,[sp,#4]            ;78
000040  4288              CMP      r0,r1                 ;78
000042  d301              BCC      |L1.72|
000044  2101              MOVS     r1,#1                 ;78
000046  e000              B        |L1.74|
                  |L1.72|
000048  2100              MOVS     r1,#0                 ;78
                  |L1.74|
00004a  9804              LDR      r0,[sp,#0x10]         ;78
00004c  1e42              SUBS     r2,r0,#1              ;78
00004e  9204              STR      r2,[sp,#0x10]         ;78
000050  2801              CMP      r0,#1                 ;78
000052  dd01              BLE      |L1.88|
000054  2001              MOVS     r0,#1                 ;78
000056  e000              B        |L1.90|
                  |L1.88|
000058  2000              MOVS     r0,#0                 ;78
                  |L1.90|
00005a  4301              ORRS     r1,r1,r0              ;78
00005c  d1e9              BNE      |L1.50|
;;;80       }
;;;81       //
;;;82       // Output digits
;;;83       //
;;;84       do {
00005e  46c0              MOV      r8,r8
                  |L1.96|
;;;85         Div = v / Digit;
000060  0021              MOVS     r1,r4
000062  0030              MOVS     r0,r6
000064  f7fffffe          BL       __aeabi_uidivmod
000068  0007              MOVS     r7,r0
;;;86         v  -= Div * Digit;
00006a  0038              MOVS     r0,r7
00006c  4360              MULS     r0,r4,r0
00006e  1a36              SUBS     r6,r6,r0
;;;87         *s++ = (char)('0' + Div);
000070  0038              MOVS     r0,r7
000072  3030              ADDS     r0,r0,#0x30
000074  7028              STRB     r0,[r5,#0]
000076  1c6d              ADDS     r5,r5,#1
;;;88         Digit /= Base;
000078  0020              MOVS     r0,r4
00007a  9901              LDR      r1,[sp,#4]
00007c  f7fffffe          BL       __aeabi_uidivmod
000080  0004              MOVS     r4,r0
;;;89       } while (Digit);
000082  2c00              CMP      r4,#0
000084  d1ec              BNE      |L1.96|
;;;90       *s = 0;
000086  7028              STRB     r0,[r5,#0]
;;;91       return s;
000088  0028              MOVS     r0,r5
;;;92     }
00008a  b005              ADD      sp,sp,#0x14
00008c  bcf0              POP      {r4-r7}
00008e  bc08              POP      {r3}
000090  4718              BX       r3
;;;93     
                          ENDP

                  _ShowStamp PROC
;;;100    */
;;;101    static void _ShowStamp(void) {
000092  b570              PUSH     {r4-r6,lr}
000094  b086              SUB      sp,sp,#0x18
;;;102    #if SHOW_TIME
;;;103      {
;;;104        I32 Time;
;;;105        char ac[20];
;;;106        char * sBuffer = &ac[0];
000096  ac01              ADD      r4,sp,#4
;;;107        Time = OS_GetTime32();
000098  481b              LDR      r0,|L1.264|
00009a  6805              LDR      r5,[r0,#0]  ; OS_Time
;;;108        sBuffer = _WriteUnsigned(sBuffer, Time / 1000, 0);
00009c  217d              MOVS     r1,#0x7d
00009e  00c9              LSLS     r1,r1,#3
0000a0  0028              MOVS     r0,r5
0000a2  f7fffffe          BL       __aeabi_idivmod
0000a6  0006              MOVS     r6,r0
0000a8  2200              MOVS     r2,#0
0000aa  0031              MOVS     r1,r6
0000ac  0020              MOVS     r0,r4
0000ae  f7fffffe          BL       _WriteUnsigned
0000b2  0004              MOVS     r4,r0
;;;109        *sBuffer++ = ':';
0000b4  203a              MOVS     r0,#0x3a
0000b6  7020              STRB     r0,[r4,#0]
0000b8  1c64              ADDS     r4,r4,#1
;;;110        sBuffer = _WriteUnsigned(sBuffer, Time % 1000, 3);
0000ba  217d              MOVS     r1,#0x7d
0000bc  00c9              LSLS     r1,r1,#3
0000be  0028              MOVS     r0,r5
0000c0  f7fffffe          BL       __aeabi_idivmod
0000c4  000e              MOVS     r6,r1
0000c6  2203              MOVS     r2,#3
0000c8  0020              MOVS     r0,r4
0000ca  f7fffffe          BL       _WriteUnsigned
0000ce  0004              MOVS     r4,r0
;;;111        *sBuffer++ = ' ';
0000d0  2020              MOVS     r0,#0x20
0000d2  7020              STRB     r0,[r4,#0]
0000d4  1c64              ADDS     r4,r4,#1
;;;112        *sBuffer++ = 0;
0000d6  2000              MOVS     r0,#0
0000d8  7020              STRB     r0,[r4,#0]
0000da  1c64              ADDS     r4,r4,#1
;;;113        _puts(ac);
0000dc  a801              ADD      r0,sp,#4
0000de  f7fffffe          BL       _puts
;;;114      }
;;;115    #endif
;;;116    
;;;117    #if SHOW_TASK
;;;118      {
;;;119        const char * s;
;;;120        s = OS_GetTaskName(NULL);
0000e2  2000              MOVS     r0,#0
0000e4  f7fffffe          BL       OS_GetTaskName
0000e8  0004              MOVS     r4,r0
;;;121        if (s) {
0000ea  2c00              CMP      r4,#0
0000ec  d005              BEQ      |L1.250|
;;;122          _puts(s);
0000ee  0020              MOVS     r0,r4
0000f0  f7fffffe          BL       _puts
;;;123          _puts(" - ");
0000f4  a005              ADR      r0,|L1.268|
0000f6  f7fffffe          BL       _puts
                  |L1.250|
;;;124        }
;;;125      }
;;;126    #endif
;;;127    }
0000fa  b006              ADD      sp,sp,#0x18
0000fc  bc70              POP      {r4-r6}
0000fe  bc08              POP      {r3}
000100  4718              BX       r3
;;;128    
                          ENDP

000102  0000              DCW      0x0000
                  |L1.260|
                          DCD      __stdout
                  |L1.264|
                          DCD      OS_Time
                  |L1.268|
00010c  202d2000          DCB      " - ",0

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  IP_Panic PROC
;;;138    */
;;;139    void IP_Panic(const char * s) {
000000  0004              MOVS     r4,r0
;;;140      (void)s;
;;;141      IP_OS_DisableInterrupt();
000002  f7fffffe          BL       IP_OS_DisableInterrupt
;;;142    #if IP_DEBUG > 1
;;;143      _puts("*** Fatal error, System halted: ");
000006  a005              ADR      r0,|L2.28|
000008  f7fffffe          BL       _puts
;;;144      _puts(s);
00000c  0020              MOVS     r0,r4
00000e  f7fffffe          BL       _puts
;;;145      _puts("\n");
000012  a00b              ADR      r0,|L2.64|
000014  f7fffffe          BL       _puts
;;;146    #endif
;;;147      while (1);
000018  46c0              MOV      r8,r8
                  |L2.26|
00001a  e7fe              B        |L2.26|
;;;148    }
;;;149    
                          ENDP

                  |L2.28|
00001c  2a2a2a20          DCB      "*** Fatal error, System halted: ",0
000020  46617461
000024  6c206572
000028  726f722c
00002c  20537973
000030  74656d20
000034  68616c74
000038  65643a20
00003c  00      
00003d  00                DCB      0
00003e  00                DCB      0
00003f  00                DCB      0
                  |L2.64|
000040  0a00              DCB      "\n",0
000042  00                DCB      0
000043  00                DCB      0

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  IP_Log PROC
;;;138    */
;;;139    void IP_Panic(const char * s) {
000000  b510              PUSH     {r4,lr}
;;;140      (void)s;
;;;141      IP_OS_DisableInterrupt();
000002  0004              MOVS     r4,r0
000004  f7fffffe          BL       IP_OS_DisableInterrupt
;;;142    #if IP_DEBUG > 1
;;;143      _puts("*** Fatal error, System halted: ");
000008  f7fffffe          BL       _ShowStamp
;;;144      _puts(s);
00000c  0020              MOVS     r0,r4
00000e  f7fffffe          BL       _puts
;;;145      _puts("\n");
000012  a004              ADR      r0,|L3.36|
000014  f7fffffe          BL       _puts
;;;146    #endif
;;;147      while (1);
000018  f7fffffe          BL       IP_OS_EnableInterrupt
00001c  bc10              POP      {r4}
00001e  bc08              POP      {r3}
000020  4718              BX       r3
;;;148    }
;;;149    
                          ENDP

000022  0000              DCW      0x0000
                  |L3.36|
000024  0a00              DCB      "\n",0
000026  00                DCB      0
000027  00                DCB      0

                          AREA ||area_number.4||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.text||
                  IP_Warn PROC
;;;138    */
;;;139    void IP_Panic(const char * s) {
000000  b510              PUSH     {r4,lr}
;;;140      (void)s;
;;;141      IP_OS_DisableInterrupt();
000002  0004              MOVS     r4,r0
000004  f7fffffe          BL       IP_OS_DisableInterrupt
;;;142    #if IP_DEBUG > 1
;;;143      _puts("*** Fatal error, System halted: ");
000008  f7fffffe          BL       _ShowStamp
;;;144      _puts(s);
00000c  a006              ADR      r0,|L4.40|
00000e  f7fffffe          BL       _puts
;;;145      _puts("\n");
000012  0020              MOVS     r0,r4
000014  f7fffffe          BL       _puts
;;;146    #endif
;;;147      while (1);
000018  a008              ADR      r0,|L4.60|
00001a  f7fffffe          BL       _puts
00001e  f7fffffe          BL       IP_OS_EnableInterrupt
000022  bc10              POP      {r4}
000024  bc08              POP      {r3}
000026  4718              BX       r3
;;;148    }
;;;149    
                          ENDP

                  |L4.40|
000028  2a2a2a20          DCB      "*** Warning *** ",0
00002c  5761726e
000030  696e6720
000034  2a2a2a20
000038  00      
000039  00                DCB      0
00003a  00                DCB      0
00003b  00                DCB      0
                  |L4.60|
00003c  0a00              DCB      "\n",0
00003e  00                DCB      0
00003f  00                DCB      0
