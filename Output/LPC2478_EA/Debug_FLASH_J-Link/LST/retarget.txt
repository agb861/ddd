; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--thumb --list --debug -c --asm --interleave -o.\output\lpc2478_ea\debug_flash_j-link\obj\retarget.o --asm_dir=.\Output\LPC2478_EA\Debug_FLASH_J-Link\LST\ --list_dir=.\Output\LPC2478_EA\Debug_FLASH_J-Link\LST\ --depend=.\output\lpc2478_ea\debug_flash_j-link\obj\retarget.d --feedback=.\Output\LPC2478_EA\Debug_FLASH_J-Link\OBJ\Start_LPC2478_EA.fed --apcs=interwork -O0 -IApplication\SEGGERDEMO -IApplication\SEGGERDEMO\Src -ISetup -IInc -IConfig -IFS -IIP -IIP\IP_FS\FS_RO\Generated -IGUI -IOS -IUSB -IUSBH -I"C:\Program Files (x86)\Keil\V473\ARM\RV31\INC" -I"C:\Program Files (x86)\Keil\V473\ARM\CMSIS\Include" -I"C:\Program Files (x86)\Keil\V473\ARM\Inc\Philips" -DDEBUG=1 --omf_browse=.\output\lpc2478_ea\debug_flash_j-link\obj\retarget.crf Setup\Retarget.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  fputc PROC
;;;60     
;;;61     int fputc(int ch, FILE *f)
000000  4770              BX       lr
;;;62     {
;;;63         /* Place your implementation of fputc here     */
;;;64         /* e.g. write a character to a UART, or to the */
;;;65         /* debugger console with SWI WriteC            */
;;;66     
;;;67     #if 0  // Implement your output routine here
;;;68         char tempch = ch;
;;;69     #ifdef USE_SERIAL_PORT
;;;70         sendchar( &tempch);
;;;71     #else
;;;72         WriteC( &tempch );
;;;73     #endif
;;;74     #endif
;;;75         return ch;
;;;76     }
;;;77     
                          ENDP

                  _sys_exit PROC
;;;78     int ferror(FILE *f)
;;;79     {   /* Your implementation of ferror */
;;;80         return EOF;
000002  46c0              MOV      r8,r8
                  |L1.4|
000004  e7fe              B        |L1.4|
;;;81     }
;;;82     
                          ENDP

                  __user_initial_stackheap PROC
;;;77     
;;;78     int ferror(FILE *f)
;;;79     {   /* Your implementation of ferror */
;;;80         return EOF;
;;;81     }
000006  b4ff              PUSH     {r0-r7}
000008  0004              MOVS     r4,r0
00000a  000d              MOVS     r5,r1
00000c  0016              MOVS     r6,r2
00000e  001f              MOVS     r7,r3
000010  4806              LDR      r0,|L1.44|
000012  9000              STR      r0,[sp,#0]
000014  4806              LDR      r0,|L1.48|
000016  9002              STR      r0,[sp,#8]
000018  4806              LDR      r0,|L1.52|
00001a  9001              STR      r0,[sp,#4]
00001c  4806              LDR      r0,|L1.56|
00001e  9003              STR      r0,[sp,#0xc]
000020  4668              MOV      r0,sp
000022  c80f              LDM      r0,{r0-r3}
000024  b004              ADD      sp,sp,#0x10
000026  bcf0              POP      {r4-r7}
000028  4770              BX       lr
;;;82     
                          ENDP

00002a  0000              DCW      0x0000
                  |L1.44|
                          DCD      ||Image$$HEAP$$ZI$$Base||
                  |L1.48|
                          DCD      ||Image$$HEAP$$ZI$$Limit||
                  |L1.52|
                          DCD      ||Image$$CSTACK$$ZI$$Limit||
                  |L1.56|
                          DCD      ||Image$$CSTACK$$ZI$$Base||

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.2||, ||.text||
                  ferror PROC
;;;77     
;;;78     int ferror(FILE *f)
000000  0001              MOVS     r1,r0
;;;79     {   /* Your implementation of ferror */
;;;80         return EOF;
000002  2000              MOVS     r0,#0
000004  43c0              MVNS     r0,r0
;;;81     }
000006  4770              BX       lr
;;;82     
                          ENDP


                          AREA ||area_number.3||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.3||, ||.text||
                          REQUIRE _printf_percent
                  _ttywrch PROC
;;;77     
;;;78     int ferror(FILE *f)
000000  b538              PUSH     {r3-r5,lr}
;;;79     {   /* Your implementation of ferror */
;;;80         return EOF;
000002  0004              MOVS     r4,r0
000004  0620              LSLS     r0,r4,#24
;;;81     }
000006  0e00              LSRS     r0,r0,#24
000008  9000              STR      r0,[sp,#0]
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       __2printf
000010  bc38              POP      {r3-r5}
000012  bc08              POP      {r3}
000014  4718              BX       r3
;;;82     
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  __stdout
                          DCD      0x00000000
