; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--thumb --list -c --asm --interleave -o.\output\lpc2478_ea\release_flash_j-link\obj\ip_fs_fs.o --asm_dir=.\Output\LPC2478_EA\Release_FLASH_J-Link\LST\ --list_dir=.\Output\LPC2478_EA\Release_FLASH_J-Link\LST\ --depend=.\output\lpc2478_ea\release_flash_j-link\obj\ip_fs_fs.d --apcs=interwork -O3 -IApplication\SEGGERDEMO -IApplication\SEGGERDEMO\Src -ISetup -IInc -IConfig -IFS -IIP -IIP\IP_FS\FS_RO\Generated -IGUI -IOS -IUSB -IUSBH -I"C:\Program Files (x86)\Keil\V473\ARM\RV31\INC" -I"C:\Program Files (x86)\Keil\V473\ARM\CMSIS\Include" -I"C:\Program Files (x86)\Keil\V473\ARM\Inc\Philips" IP\IP_FS\emFile\IP_FS_FS.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  _InitIfRequired PROC
;;;45     */
;;;46     static void _InitIfRequired(void) {
000000  b510              PUSH     {r4,lr}
;;;47       if (_IsInited == 0) {
000002  4c85              LDR      r4,|L1.536|
000004  7820              LDRB     r0,[r4,#0]  ; _IsInited
000006  2800              CMP      r0,#0
000008  d113              BNE      |L1.50|
;;;48         FS_Init();
00000a  f7fffffe          BL       FS_Init
;;;49         FS_FormatLLIfRequired(_sVolumeName);
00000e  6860              LDR      r0,[r4,#4]  ; _sVolumeName
000010  f7fffffe          BL       FS_FormatLLIfRequired
;;;50         //
;;;51         // Check if volume needs to be high level formatted.
;;;52         //
;;;53         if (FS_IsHLFormatted(_sVolumeName) == 0) {
000014  6860              LDR      r0,[r4,#4]  ; _sVolumeName
000016  f7fffffe          BL       FS_IsHLFormatted
00001a  2800              CMP      r0,#0
00001c  d107              BNE      |L1.46|
;;;54           printf("High level formatting: %s\n", _sVolumeName);
00001e  6861              LDR      r1,[r4,#4]  ; _sVolumeName
000020  a07e              ADR      r0,|L1.540|
000022  f7fffffe          BL       __2printf
;;;55           FS_Format(_sVolumeName, NULL);
000026  6860              LDR      r0,[r4,#4]  ; _sVolumeName
000028  2100              MOVS     r1,#0
00002a  f7fffffe          BL       FS_Format
                  |L1.46|
;;;56         }
;;;57         //
;;;58         // Enable long file name support if LFN package is available.
;;;59         // LFN is an optional emFile package!
;;;60         //
;;;61     //    FS_FAT_SupportLFN();
;;;62         _IsInited = 1;
00002e  2001              MOVS     r0,#1
000030  7020              STRB     r0,[r4,#0]
                  |L1.50|
;;;63       }
;;;64     }
000032  bc10              POP      {r4}
000034  bc08              POP      {r3}
000036  4718              BX       r3
;;;65     
                          ENDP

                  _FS_Open PROC
;;;110    */
;;;111    static void * _FS_Open  (const char *sFilename) {
000038  b510              PUSH     {r4,lr}
00003a  0004              MOVS     r4,r0
00003c  b0a0              SUB      sp,sp,#0x80
;;;112      char acAbsFilename[MAX_PATH];
;;;113    
;;;114      _InitIfRequired();         // Perform automatic initialisation so that explicit call to FS_Init is not required
00003e  f7fffffe          BL       _InitIfRequired
;;;115      _ConvertPath(sFilename, acAbsFilename, sizeof(acAbsFilename));
000042  2280              MOVS     r2,#0x80
000044  0020              MOVS     r0,r4
000046  4669              MOV      r1,sp
000048  f7fffffe          BL       _ConvertPath
;;;116      return FS_FOpen(acAbsFilename, "r");
00004c  a17a              ADR      r1,|L1.568|
00004e  4668              MOV      r0,sp
000050  f7fffffe          BL       FS_FOpen
                  |L1.84|
;;;117    }
000054  b020              ADD      sp,sp,#0x80
000056  e7ec              B        |L1.50|
;;;118    
                          ENDP

                  _Close PROC
;;;122    */
;;;123    static int _Close (void * hFile) {
000058  b510              PUSH     {r4,lr}
00005a  0004              MOVS     r4,r0
;;;124      _InitIfRequired();         // Perform automatic initialisation so that explicit call to FS_Init is not required
00005c  f7fffffe          BL       _InitIfRequired
;;;125      return FS_FClose((FS_FILE*) hFile);
000060  0020              MOVS     r0,r4
000062  f7fffffe          BL       FS_FClose
;;;126    }
000066  e7e4              B        |L1.50|
;;;127    
                          ENDP

                  _ReadAt PROC
;;;131    */
;;;132    static int _ReadAt(void * hFile, void *pDest, U32 Pos, U32 NumBytes) {
000068  b5f8              PUSH     {r3-r7,lr}
00006a  001e              MOVS     r6,r3
00006c  0017              MOVS     r7,r2
00006e  000c              MOVS     r4,r1
000070  0005              MOVS     r5,r0
;;;133      _InitIfRequired();         // Perform automatic initialisation so that explicit call to FS_Init is not required
000072  f7fffffe          BL       _InitIfRequired
;;;134      FS_FSeek((FS_FILE*) hFile, Pos, FS_SEEK_SET);
000076  2200              MOVS     r2,#0
000078  0039              MOVS     r1,r7
00007a  0028              MOVS     r0,r5
00007c  f7fffffe          BL       FS_FSeek
;;;135      FS_Read((FS_FILE*) hFile, pDest, NumBytes);
000080  0032              MOVS     r2,r6
000082  0021              MOVS     r1,r4
000084  0028              MOVS     r0,r5
000086  f7fffffe          BL       FS_Read
;;;136      return 0;
00008a  2000              MOVS     r0,#0
                  |L1.140|
;;;137    }
00008c  bcf8              POP      {r3-r7}
00008e  bc08              POP      {r3}
000090  4718              BX       r3
;;;138    
                          ENDP

                  _GetLen PROC
;;;142    */
;;;143    static long _GetLen(void * hFile) {
000092  b510              PUSH     {r4,lr}
000094  0004              MOVS     r4,r0
;;;144      _InitIfRequired();         // Perform automatic initialisation so that explicit call to FS_Init is not required
000096  f7fffffe          BL       _InitIfRequired
;;;145      return FS_GetFileSize((FS_FILE*) hFile);
00009a  0020              MOVS     r0,r4
00009c  f7fffffe          BL       FS_GetFileSize
;;;146    
;;;147    }
0000a0  e7c7              B        |L1.50|
;;;148    
                          ENDP

                  _ForEachDirEntry PROC
;;;152    */
;;;153    static void _ForEachDirEntry (void * pContext, const char * sDir, void (*pf) (void * pContext, void * pFileEntry)) {
0000a2  b570              PUSH     {r4-r6,lr}
0000a4  0014              MOVS     r4,r2
0000a6  000e              MOVS     r6,r1
0000a8  0005              MOVS     r5,r0
0000aa  b0d0              SUB      sp,sp,#0x140
;;;154      FS_FIND_DATA fd;
;;;155      char acDirname[MAX_PATH];
;;;156      char acFilename[MAX_PATH];
;;;157    
;;;158      _InitIfRequired();         // Perform automatic initialisation so that explicit call to FS_Init is not required
0000ac  f7fffffe          BL       _InitIfRequired
;;;159      _ConvertPath(sDir, acDirname, sizeof(acDirname));
0000b0  2280              MOVS     r2,#0x80
0000b2  0030              MOVS     r0,r6
0000b4  4669              MOV      r1,sp
0000b6  f7fffffe          BL       _ConvertPath
;;;160      if (FS_FindFirstFile(&fd, acDirname, acFilename, sizeof(acFilename)) == 0) {
0000ba  2380              MOVS     r3,#0x80
0000bc  aa2f              ADD      r2,sp,#0xbc
0000be  4669              MOV      r1,sp
0000c0  a820              ADD      r0,sp,#0x80
0000c2  f7fffffe          BL       FS_FindFirstFile
0000c6  2800              CMP      r0,#0
0000c8  d108              BNE      |L1.220|
                  |L1.202|
;;;161        do {
;;;162          pf(pContext, &fd);
0000ca  0028              MOVS     r0,r5
0000cc  a920              ADD      r1,sp,#0x80
0000ce  f7fffffe          BL       __ARM_common_call_via_r4
;;;163        } while (FS_FindNextFile (&fd));
0000d2  a820              ADD      r0,sp,#0x80
0000d4  f7fffffe          BL       FS_FindNextFile
0000d8  2800              CMP      r0,#0
0000da  d1f6              BNE      |L1.202|
                  |L1.220|
;;;164      }
;;;165      FS_FindClose(&fd);
0000dc  a820              ADD      r0,sp,#0x80
0000de  f7fffffe          BL       FS_FindClose
;;;166    }
0000e2  b050              ADD      sp,sp,#0x140
                  |L1.228|
0000e4  bc70              POP      {r4-r6}
0000e6  bc08              POP      {r3}
0000e8  4718              BX       r3
;;;167    
                          ENDP

                  _GetDirEntryFilename PROC
;;;171    */
;;;172    static void _GetDirEntryFilename(void * pFileEntry, char * sFilename, U32 SizeofBuffer) {
0000ea  b570              PUSH     {r4-r6,lr}
0000ec  0016              MOVS     r6,r2
0000ee  000d              MOVS     r5,r1
0000f0  0004              MOVS     r4,r0
;;;173      FS_FIND_DATA * pFD;
;;;174    
;;;175      _InitIfRequired();         // Perform automatic initialisation so that explicit call to FS_Init is not required
0000f2  f7fffffe          BL       _InitIfRequired
;;;176      pFD = (FS_FIND_DATA *)pFileEntry;
;;;177      strncpy(sFilename, pFD->sFileName, SizeofBuffer);
0000f6  6961              LDR      r1,[r4,#0x14]
0000f8  0032              MOVS     r2,r6
0000fa  0028              MOVS     r0,r5
0000fc  f7fffffe          BL       strncpy
;;;178      * (sFilename + SizeofBuffer - 1) = 0;
000100  2100              MOVS     r1,#0
000102  19a8              ADDS     r0,r5,r6
000104  3820              SUBS     r0,r0,#0x20
000106  77c1              STRB     r1,[r0,#0x1f]
;;;179    }
000108  e7ec              B        |L1.228|
;;;180    
                          ENDP

                  _GetDirEntryFileSize PROC
;;;184    */
;;;185    static U32 _GetDirEntryFileSize (void * pFileEntry, U32 * pFileSizeHigh) {
00010a  b510              PUSH     {r4,lr}
00010c  0004              MOVS     r4,r0
;;;186      FS_FIND_DATA * pFD;
;;;187    
;;;188      _InitIfRequired();         // Perform automatic initialisation so that explicit call to FS_Init is not required
00010e  f7fffffe          BL       _InitIfRequired
;;;189      pFD = (FS_FIND_DATA *)pFileEntry;
;;;190      return pFD->FileSize;
000112  6920              LDR      r0,[r4,#0x10]
;;;191    }
000114  e78d              B        |L1.50|
;;;192    
                          ENDP

                  _GetDirEntryFileTime PROC
;;;196    */
;;;197    static U32 _GetDirEntryFileTime (void * pFileEntry) {
000116  b510              PUSH     {r4,lr}
000118  0004              MOVS     r4,r0
;;;198      FS_FIND_DATA * pFD;
;;;199    
;;;200      _InitIfRequired();         // Perform automatic initialisation so that explicit call to FS_Init is not required
00011a  f7fffffe          BL       _InitIfRequired
;;;201      pFD = (FS_FIND_DATA *)pFileEntry;
;;;202      return pFD->LastWriteTime;
00011e  68e0              LDR      r0,[r4,#0xc]
;;;203    }
000120  e787              B        |L1.50|
;;;204    
                          ENDP

                  _GetDirEntryAttributes PROC
;;;211    */
;;;212    static int  _GetDirEntryAttributes (void * pFileEntry) {
000122  b510              PUSH     {r4,lr}
000124  0004              MOVS     r4,r0
;;;213      FS_FIND_DATA * pFD;
;;;214    
;;;215      _InitIfRequired();         // Perform automatic initialisation so that explicit call to FS_Init is not required
000126  f7fffffe          BL       _InitIfRequired
;;;216      pFD = (FS_FIND_DATA *)pFileEntry;
;;;217      return (pFD->Attributes & FS_ATTR_DIRECTORY) ? 1 : 0;
00012a  7820              LDRB     r0,[r4,#0]
00012c  06c0              LSLS     r0,r0,#27
00012e  0fc0              LSRS     r0,r0,#31
;;;218    }
000130  e77f              B        |L1.50|
;;;219    
                          ENDP

                  _Create PROC
;;;223    */
;;;224    static void * _Create (const char * sFilename) {
000132  b510              PUSH     {r4,lr}
000134  0004              MOVS     r4,r0
000136  b0a0              SUB      sp,sp,#0x80
;;;225      char acAbsFilename[MAX_PATH];
;;;226    
;;;227      _InitIfRequired();         // Perform automatic initialisation so that explicit call to FS_Init is not required
000138  f7fffffe          BL       _InitIfRequired
;;;228      _ConvertPath(sFilename, acAbsFilename, sizeof(acAbsFilename));
00013c  2280              MOVS     r2,#0x80
00013e  0020              MOVS     r0,r4
000140  4669              MOV      r1,sp
000142  f7fffffe          BL       _ConvertPath
;;;229      return FS_FOpen(acAbsFilename, "wb");
000146  a13d              ADR      r1,|L1.572|
000148  4668              MOV      r0,sp
00014a  f7fffffe          BL       FS_FOpen
;;;230    }
00014e  e781              B        |L1.84|
;;;231    
                          ENDP

                  _DeleteFile PROC
;;;236    */
;;;237    static void * _DeleteFile (const char *sFilename) {
000150  b510              PUSH     {r4,lr}
000152  0004              MOVS     r4,r0
000154  b0a0              SUB      sp,sp,#0x80
;;;238      char acAbsFilename[MAX_PATH];
;;;239    
;;;240      _InitIfRequired();         // Perform automatic initialisation so that explicit call to FS_Init is not required
000156  f7fffffe          BL       _InitIfRequired
;;;241      _ConvertPath(sFilename, acAbsFilename, sizeof(acAbsFilename));
00015a  2280              MOVS     r2,#0x80
00015c  0020              MOVS     r0,r4
00015e  4669              MOV      r1,sp
000160  f7fffffe          BL       _ConvertPath
;;;242      return (void*)FS_Remove(acAbsFilename);
000164  4668              MOV      r0,sp
000166  f7fffffe          BL       FS_Remove
;;;243    }
00016a  e773              B        |L1.84|
;;;244    
                          ENDP

                  _RenameFile PROC
;;;248    */
;;;249    static int _RenameFile (const char *sOldFilename, const char *sNewFilename) {
00016c  b530              PUSH     {r4,r5,lr}
00016e  000d              MOVS     r5,r1
000170  0004              MOVS     r4,r0
000172  b0c1              SUB      sp,sp,#0x104
;;;250      char acAbsOldFilename[MAX_PATH];
;;;251      char acAbsNewFilename[MAX_PATH];
;;;252    
;;;253      _InitIfRequired();         // Perform automatic initialisation so that explicit call to FS_Init is not required
000174  f7fffffe          BL       _InitIfRequired
;;;254      _ConvertPath(sOldFilename, acAbsOldFilename, sizeof(acAbsOldFilename));
000178  2280              MOVS     r2,#0x80
00017a  0020              MOVS     r0,r4
00017c  4669              MOV      r1,sp
00017e  f7fffffe          BL       _ConvertPath
;;;255      _ConvertPath(sNewFilename, acAbsNewFilename, sizeof(acAbsNewFilename));
000182  2280              MOVS     r2,#0x80
000184  0028              MOVS     r0,r5
000186  a920              ADD      r1,sp,#0x80
000188  f7fffffe          BL       _ConvertPath
;;;256      return FS_Rename(acAbsOldFilename, acAbsNewFilename);
00018c  a920              ADD      r1,sp,#0x80
00018e  4668              MOV      r0,sp
000190  f7fffffe          BL       FS_Rename
;;;257    }
000194  b041              ADD      sp,sp,#0x104
000196  bc30              POP      {r4,r5}
000198  bc08              POP      {r3}
00019a  4718              BX       r3
;;;258    
                          ENDP

                  _WriteAt PROC
;;;262    */
;;;263    static int    _WriteAt (void * hFile, void *pBuffer, U32 Pos, U32 NumBytes) {
00019c  b5f8              PUSH     {r3-r7,lr}
00019e  001e              MOVS     r6,r3
0001a0  0017              MOVS     r7,r2
0001a2  000c              MOVS     r4,r1
0001a4  0005              MOVS     r5,r0
;;;264      _InitIfRequired();         // Perform automatic initialisation so that explicit call to FS_Init is not required
0001a6  f7fffffe          BL       _InitIfRequired
;;;265      FS_FSeek((FS_FILE*) hFile, Pos, FS_SEEK_SET);
0001aa  2200              MOVS     r2,#0
0001ac  0039              MOVS     r1,r7
0001ae  0028              MOVS     r0,r5
0001b0  f7fffffe          BL       FS_FSeek
;;;266      return FS_Write((FS_FILE*) hFile, pBuffer, NumBytes);
0001b4  0032              MOVS     r2,r6
0001b6  0021              MOVS     r1,r4
0001b8  0028              MOVS     r0,r5
0001ba  f7fffffe          BL       FS_Write
;;;267    }
0001be  e765              B        |L1.140|
;;;268    
                          ENDP

                  _MKDir PROC
;;;272    */
;;;273    static int _MKDir (const char * sDirname) {
0001c0  b510              PUSH     {r4,lr}
0001c2  0004              MOVS     r4,r0
0001c4  b0a0              SUB      sp,sp,#0x80
;;;274      char acAbsDirname[MAX_PATH];
;;;275    
;;;276      _InitIfRequired();         // Perform automatic initialisation so that explicit call to FS_Init is not required
0001c6  f7fffffe          BL       _InitIfRequired
;;;277      _ConvertPath(sDirname, acAbsDirname, sizeof(acAbsDirname));
0001ca  2280              MOVS     r2,#0x80
0001cc  0020              MOVS     r0,r4
0001ce  4669              MOV      r1,sp
0001d0  f7fffffe          BL       _ConvertPath
;;;278      return FS_MkDir(acAbsDirname);
0001d4  4668              MOV      r0,sp
0001d6  f7fffffe          BL       FS_MkDir
;;;279    }
0001da  e73b              B        |L1.84|
;;;280    
                          ENDP

                  _RMDir PROC
;;;284    */
;;;285    static int _RMDir (const char * sDirname) {
0001dc  b510              PUSH     {r4,lr}
0001de  0004              MOVS     r4,r0
0001e0  b0a0              SUB      sp,sp,#0x80
;;;286      char acAbsDirname[MAX_PATH];
;;;287    
;;;288      _InitIfRequired();         // Perform automatic initialisation so that explicit call to FS_Init is not required
0001e2  f7fffffe          BL       _InitIfRequired
;;;289      _ConvertPath(sDirname, acAbsDirname, sizeof(acAbsDirname));
0001e6  2280              MOVS     r2,#0x80
0001e8  0020              MOVS     r0,r4
0001ea  4669              MOV      r1,sp
0001ec  f7fffffe          BL       _ConvertPath
;;;290      return FS_RmDir(acAbsDirname);
0001f0  4668              MOV      r0,sp
0001f2  f7fffffe          BL       FS_RmDir
;;;291    }
0001f6  e72d              B        |L1.84|
;;;292    
                          ENDP

                  _ConvertPath PROC
                  |L1.504|
;;;85     */
;;;86     static int _ConvertPath(const char * sFilename, char * sOutFilename, U32 BufferSize) {
0001f8  1e52              SUBS     r2,r2,#1
;;;87       char c;
;;;88     
;;;89       do {
;;;90         if (--BufferSize <= 0) {
0001fa  d009              BEQ      |L1.528|
;;;91           break;                  // Buffer full. We have to stop.
;;;92         }
;;;93         c = *sFilename++;
0001fc  7803              LDRB     r3,[r0,#0]
0001fe  1c40              ADDS     r0,r0,#1
;;;94         if (c == 0) {
000200  2b00              CMP      r3,#0
000202  d005              BEQ      |L1.528|
;;;95           break;                  // End of string
;;;96         }
;;;97         if (c == '/') {
000204  2b2f              CMP      r3,#0x2f
000206  d100              BNE      |L1.522|
;;;98           c = '\\';
000208  235c              MOVS     r3,#0x5c
                  |L1.522|
;;;99         }
;;;100        *sOutFilename++ = c;
00020a  700b              STRB     r3,[r1,#0]
00020c  1c49              ADDS     r1,r1,#1
;;;101      } while (1);
00020e  e7f3              B        |L1.504|
                  |L1.528|
;;;102      *sOutFilename++ = 0;
000210  2000              MOVS     r0,#0
000212  7008              STRB     r0,[r1,#0]
;;;103      return 0;
;;;104    }
000214  4770              BX       lr
;;;105    
                          ENDP

000216  0000              DCW      0x0000
                  |L1.536|
                          DCD      ||.data||
                  |L1.540|
00021c  48696768          DCB      "High level formatting: %s\n",0
000220  206c6576
000224  656c2066
000228  6f726d61
00022c  7474696e
000230  673a2025
000234  730a00  
000237  00                DCB      0
                  |L1.568|
000238  7200              DCB      "r",0
00023a  00                DCB      0
00023b  00                DCB      0
                  |L1.572|
00023c  776200            DCB      "wb",0
00023f  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  IP_FS_FS
                          DCD      _FS_Open
                          DCD      _Close
                          DCD      _ReadAt
                          DCD      _GetLen
                          DCD      _ForEachDirEntry
                          DCD      _GetDirEntryFilename
                          DCD      _GetDirEntryFileSize
                          DCD      _GetDirEntryFileTime
                          DCD      _GetDirEntryAttributes
                          DCD      _Create
                          DCD      _DeleteFile
                          DCD      _RenameFile
                          DCD      _WriteAt
                          DCD      _MKDir
                          DCD      _RMDir

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=0

000000  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=2

                  _IsInited
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  _sVolumeName
                          DCD      ||.conststring||

                          AREA ||i.__ARM_common_call_via_r4||, COMGROUP=__ARM_common_call_via_r4, CODE, READONLY, ALIGN=1

                  __ARM_common_call_via_r4 PROC
000000  4720              BX       r4
                          ENDP

