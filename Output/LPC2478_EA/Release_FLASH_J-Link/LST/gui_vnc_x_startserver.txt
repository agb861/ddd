; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--thumb --list -c --asm --interleave -o.\output\lpc2478_ea\release_flash_j-link\obj\gui_vnc_x_startserver.o --asm_dir=.\Output\LPC2478_EA\Release_FLASH_J-Link\LST\ --list_dir=.\Output\LPC2478_EA\Release_FLASH_J-Link\LST\ --depend=.\output\lpc2478_ea\release_flash_j-link\obj\gui_vnc_x_startserver.d --apcs=interwork -O3 -IApplication\SEGGERDEMO -IApplication\SEGGERDEMO\Src -ISetup -IInc -IConfig -IFS -IIP -IIP\IP_FS\FS_RO\Generated -IGUI -IOS -IUSB -IUSBH -I"C:\Program Files (x86)\Keil\V473\ARM\RV31\INC" -I"C:\Program Files (x86)\Keil\V473\ARM\CMSIS\Include" -I"C:\Program Files (x86)\Keil\V473\ARM\Inc\Philips" GUI\GUI_VNC_X_StartServer.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Send PROC
;;;62     */
;;;63     static int _Send(const U8 * buf, int len, void * pConnectionInfo) {
000000  b510              PUSH     {r4,lr}
000002  0014              MOVS     r4,r2
;;;64       int r;
;;;65     
;;;66       r = send((long)pConnectionInfo, (const char *)buf, len, 0);
000004  000a              MOVS     r2,r1
000006  0001              MOVS     r1,r0
000008  2300              MOVS     r3,#0
00000a  0020              MOVS     r0,r4
00000c  f7fffffe          BL       t_send
                  |L1.16|
;;;67       return r;
;;;68     }
000010  bc10              POP      {r4}
000012  bc08              POP      {r3}
000014  4718              BX       r3
;;;69     
                          ENDP

                  _Recv PROC
;;;78     */
;;;79     static int _Recv(U8 * buf, int len, void * pConnectionInfo) {
000016  b510              PUSH     {r4,lr}
000018  0014              MOVS     r4,r2
;;;80       return recv((long)pConnectionInfo, (char *)buf, len, 0);
00001a  000a              MOVS     r2,r1
00001c  0001              MOVS     r1,r0
00001e  2300              MOVS     r3,#0
000020  0020              MOVS     r0,r4
000022  f7fffffe          BL       t_recv
;;;81     }
000026  e7f3              B        |L1.16|
;;;82     
                          ENDP

                  _ServerTask PROC
;;;115    */
;;;116    static void _ServerTask(void) {
000028  482f              LDR      r0,|L1.232|
;;;117      int s, Sock, AddrLen;
;;;118      U16 Port;
;;;119    
;;;120      //
;;;121      // Prepare socket (one time setup)
;;;122      //
;;;123      Port = 5900 + _Context.ServerIndex; // Default port for VNC is is 590x, where x is the 0-based layer index
00002a  4930              LDR      r1,|L1.236|
00002c  8c00              LDRH     r0,[r0,#0x20]  ; _Context
00002e  2702              MOVS     r7,#2
000030  b086              SUB      sp,sp,#0x18           ;116
000032  1840              ADDS     r0,r0,r1
000034  0400              LSLS     r0,r0,#16
000036  0c00              LSRS     r0,r0,#16
000038  0a06              LSRS     r6,r0,#8
00003a  0600              LSLS     r0,r0,#24
00003c  0c00              LSRS     r0,r0,#16
00003e  4306              ORRS     r6,r6,r0
000040  2500              MOVS     r5,#0
                  |L1.66|
000042  2200              MOVS     r2,#0
000044  2101              MOVS     r1,#1
000046  2002              MOVS     r0,#2
000048  f7fffffe          BL       t_socket
00004c  0004              MOVS     r4,r0
00004e  4668              MOV      r0,sp
000050  9500              STR      r5,[sp,#0]
000052  9501              STR      r5,[sp,#4]
000054  9502              STR      r5,[sp,#8]
000056  9503              STR      r5,[sp,#0xc]
000058  8007              STRH     r7,[r0,#0]
00005a  8046              STRH     r6,[r0,#2]
00005c  2210              MOVS     r2,#0x10
00005e  0020              MOVS     r0,r4
000060  4669              MOV      r1,sp
000062  f7fffffe          BL       t_bind
000066  2101              MOVS     r1,#1
000068  0020              MOVS     r0,r4
00006a  f7fffffe          BL       t_listen
;;;124      //
;;;125      // Loop until we get a socket into listening state
;;;126      //
;;;127      do {
;;;128        s = _ListenAtTcpAddr(Port);
;;;129        if (s != -1) {
00006e  1c60              ADDS     r0,r4,#1
000070  d019              BEQ      |L1.166|
000072  2710              MOVS     r7,#0x10
                  |L1.116|
;;;130          break;
;;;131        }
;;;132        OS_Delay(100); // Try again
;;;133      } while (1);
;;;134      //
;;;135      // Loop once per client and create a thread for the actual server
;;;136      //
;;;137      while (1) {
;;;138        //
;;;139        // Wait for an incoming connection
;;;140        //
;;;141        AddrLen = sizeof(_Addr);
;;;142        if ((Sock = accept(s, (struct sockaddr*)&_Addr, &AddrLen)) == SOCKET_ERROR) {
000074  491c              LDR      r1,|L1.232|
000076  0020              MOVS     r0,r4
000078  3154              ADDS     r1,r1,#0x54
00007a  aa04              ADD      r2,sp,#0x10
00007c  9704              STR      r7,[sp,#0x10]
00007e  f7fffffe          BL       t_accept
000082  0006              MOVS     r6,r0
000084  1c40              ADDS     r0,r0,#1
000086  d0f5              BEQ      |L1.116|
;;;143          continue; // Error
;;;144        }
;;;145        //
;;;146        // Run the actual server
;;;147        //
;;;148        GUI_VNC_Process(&_Context, _Send, _Recv, (void *)Sock);
000088  4a19              LDR      r2,|L1.240|
00008a  491a              LDR      r1,|L1.244|
00008c  4816              LDR      r0,|L1.232|
00008e  0033              MOVS     r3,r6
000090  f7fffffe          BL       GUI_VNC_Process
;;;149        //
;;;150        // Close the connection
;;;151        //
;;;152        closesocket(Sock);
000094  0030              MOVS     r0,r6
000096  f7fffffe          BL       t_socketclose
;;;153        memset(&_Addr, 0, sizeof(struct sockaddr_in));
00009a  4813              LDR      r0,|L1.232|
00009c  6545              STR      r5,[r0,#0x54]  ; _Addr
00009e  6585              STR      r5,[r0,#0x58]  ; _Addr
0000a0  65c5              STR      r5,[r0,#0x5c]  ; _Addr
0000a2  6605              STR      r5,[r0,#0x60]         ;143  ; _Addr
0000a4  e7e6              B        |L1.116|
                  |L1.166|
0000a6  2064              MOVS     r0,#0x64              ;132
0000a8  f7fffffe          BL       OS_Delay
0000ac  e7c9              B        |L1.66|
;;;154      }
;;;155    }
;;;156    
                          ENDP

                  GUI_VNC_X_StartServer PROC
;;;177    */
;;;178    int GUI_VNC_X_StartServer(int LayerIndex, int ServerIndex) {
0000ae  b53e              PUSH     {r1-r5,lr}
0000b0  000c              MOVS     r4,r1
;;;179      //
;;;180      // Init VNC context and attach to layer (so context is updated if the display-layer-contents change
;;;181      //
;;;182      GUI_VNC_AttachToLayer(&_Context, LayerIndex);
0000b2  0001              MOVS     r1,r0
0000b4  480c              LDR      r0,|L1.232|
0000b6  f7fffffe          BL       GUI_VNC_AttachToLayer
;;;183      _Context.ServerIndex = ServerIndex;
0000ba  480b              LDR      r0,|L1.232|
;;;184      //
;;;185      // Create task for VNC Server
;;;186      //
;;;187      OS_CREATETASK(&_VNCServer_TCB, "VNC Server", _ServerTask, TASKPRIO_VNC, _StackVNCServer);
0000bc  217d              MOVS     r1,#0x7d
0000be  8404              STRH     r4,[r0,#0x20]         ;183
0000c0  2202              MOVS     r2,#2
0000c2  0149              LSLS     r1,r1,#5
0000c4  3064              ADDS     r0,r0,#0x64
0000c6  466c              MOV      r4,sp
0000c8  c407              STM      r4!,{r0-r2}
0000ca  4b0b              LDR      r3,|L1.248|
0000cc  480e              LDR      r0,|L1.264|
0000ce  226e              MOVS     r2,#0x6e
0000d0  a10a              ADR      r1,|L1.252|
0000d2  f7fffffe          BL       OS_CreateTask_R
;;;188      //
;;;189      // O.k., server has been started
;;;190      //
;;;191      return 0;
;;;192    }
0000d6  bc3e              POP      {r1-r5}
0000d8  bc08              POP      {r3}
0000da  2000              MOVS     r0,#0                 ;191
0000dc  4718              BX       r3
;;;193    
                          ENDP

                  GUI_VNC_X_getpeername PROC
;;;204    */
;;;205    void GUI_VNC_X_getpeername(U32 * Addr) {
0000de  4902              LDR      r1,|L1.232|
;;;206      *Addr = _Addr.sin_addr.s_addr;
0000e0  3154              ADDS     r1,r1,#0x54
0000e2  6849              LDR      r1,[r1,#4]  ; _Addr
0000e4  6001              STR      r1,[r0,#0]
;;;207    }
0000e6  4770              BX       lr
;;;208    
                          ENDP

                  |L1.232|
                          DCD      ||.bss||
                  |L1.236|
                          DCD      0x0000170c
                  |L1.240|
                          DCD      _Recv
                  |L1.244|
                          DCD      _Send
                  |L1.248|
                          DCD      _ServerTask
                  |L1.252|
0000fc  564e4320          DCB      "VNC Server",0
000100  53657276
000104  657200  
000107  00                DCB      0
                  |L1.264|
                          DCD      ||.bss||+0x1004

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  _Context
                          %        84
                  _Addr
                          %        16
                  _StackVNCServer
                          %        4000
                  _VNCServer_TCB
                          %        36
