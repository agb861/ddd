; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--thumb --list -c --asm --interleave -o.\output\lpc2478_ea\release_flash_j-link\obj\usbh_configio.o --asm_dir=.\Output\LPC2478_EA\Release_FLASH_J-Link\LST\ --list_dir=.\Output\LPC2478_EA\Release_FLASH_J-Link\LST\ --depend=.\output\lpc2478_ea\release_flash_j-link\obj\usbh_configio.d --apcs=interwork -O3 -IApplication\SEGGERDEMO -IApplication\SEGGERDEMO\Src -ISetup -IInc -IConfig -IFS -IIP -IIP\IP_FS\FS_RO\Generated -IGUI -IOS -IUSB -IUSBH -I"C:\Program Files (x86)\Keil\V473\ARM\RV31\INC" -I"C:\Program Files (x86)\Keil\V473\ARM\CMSIS\Include" -I"C:\Program Files (x86)\Keil\V473\ARM\Inc\Philips" Config\USBH_ConfigIO.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _WriteUnsigned PROC
;;;76     */
;;;77     static char * _WriteUnsigned(char * s, U32 v, int NumDigits) {
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
000002  0017              MOVS     r7,r2
000004  0005              MOVS     r5,r0
;;;78       unsigned   Base;
;;;79       unsigned   Div;
;;;80       U32        Digit;
;;;81       Digit    = 1;
000006  2401              MOVS     r4,#1
;;;82       Base     = 10;
000008  260a              MOVS     r6,#0xa
00000a  e000              B        |L1.14|
                  |L1.12|
;;;83       //
;;;84       // Count how many digits are required
;;;85       //
;;;86       while (((v / Digit) >= Base) | (NumDigits-- > 1)) {
;;;87         Digit *= Base;
00000c  4374              MULS     r4,r6,r4
                  |L1.14|
00000e  9801              LDR      r0,[sp,#4]            ;86
000010  0021              MOVS     r1,r4                 ;86
000012  f7fffffe          BL       __aeabi_uidivmod
000016  42b0              CMP      r0,r6                 ;86
000018  d301              BCC      |L1.30|
00001a  2001              MOVS     r0,#1                 ;86
00001c  e000              B        |L1.32|
                  |L1.30|
00001e  2000              MOVS     r0,#0                 ;86
                  |L1.32|
000020  0039              MOVS     r1,r7                 ;86
000022  1e7f              SUBS     r7,r7,#1              ;86
000024  2901              CMP      r1,#1                 ;86
000026  dd01              BLE      |L1.44|
000028  2101              MOVS     r1,#1                 ;86
00002a  e000              B        |L1.46|
                  |L1.44|
00002c  2100              MOVS     r1,#0                 ;86
                  |L1.46|
00002e  4308              ORRS     r0,r0,r1              ;86
000030  d1ec              BNE      |L1.12|
                  |L1.50|
;;;88       }
;;;89       //
;;;90       // Output digits
;;;91       //
;;;92       do {
;;;93         Div = v / Digit;
000032  9801              LDR      r0,[sp,#4]
000034  0021              MOVS     r1,r4
000036  f7fffffe          BL       __aeabi_uidivmod
00003a  0001              MOVS     r1,r0
;;;94         v  -= Div * Digit;
00003c  4361              MULS     r1,r4,r1
00003e  9a01              LDR      r2,[sp,#4]
;;;95         *s++ = (char)('0' + Div);
000040  3030              ADDS     r0,r0,#0x30
000042  1a51              SUBS     r1,r2,r1              ;94
000044  9101              STR      r1,[sp,#4]
000046  7028              STRB     r0,[r5,#0]
000048  1c6d              ADDS     r5,r5,#1
;;;96         Digit /= Base;
00004a  0031              MOVS     r1,r6
00004c  0020              MOVS     r0,r4
00004e  f7fffffe          BL       __aeabi_uidivmod
000052  0004              MOVS     r4,r0
;;;97       } while (Digit);
000054  d1ed              BNE      |L1.50|
;;;98       *s = 0;
000056  7028              STRB     r0,[r5,#0]
;;;99       return s;
000058  0028              MOVS     r0,r5
;;;100    }
00005a  bcfe              POP      {r1-r7}
00005c  bc08              POP      {r3}
00005e  4718              BX       r3
;;;101    
                          ENDP

                  _ShowStamp PROC
;;;107    */
;;;108    static void _ShowStamp(void) {
000060  b530              PUSH     {r4,r5,lr}
;;;109    #if SHOW_TIME
;;;110      I32    Time;
;;;111      char   ac[20];
;;;112      char * sBuffer = &ac[0];
;;;113      Time           = OS_GetTime32();
000062  482e              LDR      r0,|L1.284|
000064  b085              SUB      sp,sp,#0x14           ;108
000066  6800              LDR      r0,[r0,#0]  ; OS_Time
000068  466d              MOV      r5,sp                 ;112
;;;114      sBuffer        = _WriteUnsigned(sBuffer, Time / 1000, 0);
00006a  217d              MOVS     r1,#0x7d
00006c  00c9              LSLS     r1,r1,#3
00006e  f7fffffe          BL       __aeabi_idivmod
000072  000c              MOVS     r4,r1
000074  0001              MOVS     r1,r0
000076  2200              MOVS     r2,#0
000078  0028              MOVS     r0,r5
00007a  f7fffffe          BL       _WriteUnsigned
;;;115      *sBuffer++     = ':';
00007e  213a              MOVS     r1,#0x3a
000080  7001              STRB     r1,[r0,#0]
000082  1c40              ADDS     r0,r0,#1
000084  0021              MOVS     r1,r4
;;;116      sBuffer        = _WriteUnsigned(sBuffer, Time % 1000, 3);
000086  2203              MOVS     r2,#3
000088  f7fffffe          BL       _WriteUnsigned
;;;117      *sBuffer++     = ' ';
00008c  2120              MOVS     r1,#0x20
00008e  7001              STRB     r1,[r0,#0]
;;;118      *sBuffer++     = 0;
000090  2100              MOVS     r1,#0
000092  7041              STRB     r1,[r0,#1]
;;;119      _puts(ac);
000094  4668              MOV      r0,sp
000096  f7fffffe          BL       _puts
;;;120    #endif
;;;121    
;;;122    #if SHOW_TASK
;;;123    {
;;;124      const char * s;
;;;125      s = OS_GetTaskName(OS_pCurrentTask);
00009a  4821              LDR      r0,|L1.288|
00009c  6800              LDR      r0,[r0,#0]  ; OS_pCurrentTask
00009e  f7fffffe          BL       OS_GetTaskName
;;;126      if (s) {
0000a2  2800              CMP      r0,#0
0000a4  d004              BEQ      |L1.176|
;;;127        _puts(s);
0000a6  f7fffffe          BL       _puts
;;;128        _puts(" - ");
0000aa  a01e              ADR      r0,|L1.292|
0000ac  f7fffffe          BL       _puts
                  |L1.176|
;;;129      }
;;;130    }
;;;131    #endif
;;;132    }
0000b0  b005              ADD      sp,sp,#0x14
0000b2  bc30              POP      {r4,r5}
0000b4  bc08              POP      {r3}
0000b6  4718              BX       r3
;;;133    
                          ENDP

                  USBH_Panic PROC
;;;141    */
;;;142    void USBH_Panic(const char * s) {
0000b8  f7fffffe          BL       USBH_OS_DisableInterrupt
                  |L1.188|
;;;143      USBH_OS_DisableInterrupt();
;;;144    #if USBH_DEBUG > 1
;;;145      _puts("*** Fatal error, System halted: ");
;;;146      _puts(s);
;;;147      _puts("\n");
;;;148    #endif
;;;149      while (1);
0000bc  e7fe              B        |L1.188|
;;;150    }
;;;151    
                          ENDP

                  USBH_Log PROC
;;;165    */
;;;166    void USBH_Log(const char * s) {
0000be  b510              PUSH     {r4,lr}
0000c0  0004              MOVS     r4,r0
;;;167      USBH_OS_DisableInterrupt();
0000c2  f7fffffe          BL       USBH_OS_DisableInterrupt
;;;168      _ShowStamp();
0000c6  f7fffffe          BL       _ShowStamp
;;;169      _puts(s);
0000ca  0020              MOVS     r0,r4
0000cc  f7fffffe          BL       _puts
;;;170      _puts("\n");
0000d0  a015              ADR      r0,|L1.296|
0000d2  f7fffffe          BL       _puts
;;;171      USBH_OS_EnableInterrupt();
0000d6  f7fffffe          BL       USBH_OS_EnableInterrupt
                  |L1.218|
;;;172    }
0000da  bc10              POP      {r4}
0000dc  bc08              POP      {r3}
0000de  4718              BX       r3
;;;173    
                          ENDP

                  USBH_Warn PROC
;;;185    */
;;;186    void USBH_Warn(const char * s) {
0000e0  b510              PUSH     {r4,lr}
0000e2  0004              MOVS     r4,r0
;;;187      USBH_OS_DisableInterrupt();
0000e4  f7fffffe          BL       USBH_OS_DisableInterrupt
;;;188      _ShowStamp();
0000e8  f7fffffe          BL       _ShowStamp
;;;189      _puts("*** Warning *** ");
0000ec  a00f              ADR      r0,|L1.300|
0000ee  f7fffffe          BL       _puts
;;;190      _puts(s);
0000f2  0020              MOVS     r0,r4
0000f4  f7fffffe          BL       _puts
;;;191      _puts("\n");
0000f8  a00b              ADR      r0,|L1.296|
0000fa  f7fffffe          BL       _puts
;;;192      USBH_OS_EnableInterrupt();
0000fe  f7fffffe          BL       USBH_OS_EnableInterrupt
;;;193    }
000102  e7ea              B        |L1.218|
;;;194    
                          ENDP

                  _puts PROC
;;;50     */
;;;51     static void _puts(const char * s) {
000104  b510              PUSH     {r4,lr}
000106  0004              MOVS     r4,r0
                  |L1.264|
;;;52       char c;
;;;53     
;;;54     #if USE_EMBOS_VIEW
;;;55       OS_SendString(s);
;;;56     #else
;;;57       for (;;) {
;;;58         c = *s++;
000108  7820              LDRB     r0,[r4,#0]
00010a  1c64              ADDS     r4,r4,#1
;;;59         if (c == 0) {
00010c  2800              CMP      r0,#0
00010e  d0e4              BEQ      |L1.218|
;;;60           break;
;;;61         }
;;;62     #if USE_DCC
;;;63         JLINKDCC_SendChar(c);
;;;64     #else
;;;65         putchar(c);
000110  490b              LDR      r1,|L1.320|
000112  f7fffffe          BL       putc
000116  e7f7              B        |L1.264|
;;;66     #endif
;;;67       }
;;;68     #endif
;;;69     }
000118  e7df              B        |L1.218|
;;;70     
                          ENDP

00011a  0000              DCW      0x0000
                  |L1.284|
                          DCD      OS_Time
                  |L1.288|
                          DCD      OS_pCurrentTask
                  |L1.292|
000124  202d2000          DCB      " - ",0
                  |L1.296|
000128  0a00              DCB      "\n",0
00012a  00                DCB      0
00012b  00                DCB      0
                  |L1.300|
00012c  2a2a2a20          DCB      "*** Warning *** ",0
000130  5761726e
000134  696e6720
000138  2a2a2a20
00013c  00      
00013d  00                DCB      0
00013e  00                DCB      0
00013f  00                DCB      0
                  |L1.320|
                          DCD      __stdout
