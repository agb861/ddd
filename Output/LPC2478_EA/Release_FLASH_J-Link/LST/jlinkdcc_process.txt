; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--thumb --list -c --asm --interleave -o.\output\lpc2478_ea\release_flash_j-link\obj\jlinkdcc_process.o --asm_dir=.\Output\LPC2478_EA\Release_FLASH_J-Link\LST\ --list_dir=.\Output\LPC2478_EA\Release_FLASH_J-Link\LST\ --depend=.\output\lpc2478_ea\release_flash_j-link\obj\jlinkdcc_process.d --apcs=interwork -O3 -IApplication\SEGGERDEMO -IApplication\SEGGERDEMO\Src -ISetup -IInc -IConfig -IFS -IIP -IIP\IP_FS\FS_RO\Generated -IGUI -IOS -IUSB -IUSBH -I"C:\Program Files (x86)\Keil\V473\ARM\RV31\INC" -I"C:\Program Files (x86)\Keil\V473\ARM\CMSIS\Include" -I"C:\Program Files (x86)\Keil\V473\ARM\Inc\Philips" Util\JLINKDCC_Process.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _HandleRead PROC
;;;239    */
;;;240    static void _HandleRead(void) {
000000  b510              PUSH     {r4,lr}
;;;241      U32 Data;
;;;242    
;;;243      if ((_ReadDCCStat() & 1) == 0) {       // Data or command received ?
000002  f7fffffe          BL       CP14_ReadDCCStat
000006  07c0              LSLS     r0,r0,#31
000008  d014              BEQ      |L1.52|
;;;244        return;      // Nothing received
;;;245      }
;;;246    
;;;247      Data = _ReadDCC();
00000a  f7fffffe          BL       CP14_ReadDCC
;;;248      //
;;;249      // If item received does not have the command-flag set, it is the new addr.
;;;250      //
;;;251      if ((Data & DCC_OP_COMMAND) == 0) {
;;;252        _Addr = Data;
00000e  49a0              LDR      r1,|L1.656|
000010  07c2              LSLS     r2,r0,#31             ;251
000012  d012              BEQ      |L1.58|
;;;253        return;
;;;254      }
;;;255      //
;;;256      // If item received is a terminal out command,
;;;257      //
;;;258      if ((Data & 0xFF000000) == 0x93000000) {
000014  0e02              LSRS     r2,r0,#24
000016  2a93              CMP      r2,#0x93
000018  d011              BEQ      |L1.62|
;;;259        unsigned Channel;
;;;260        Channel = (Data >> 19) & 0x1F;
;;;261        if (_pfOnRx[Channel]) {
;;;262          _pfOnRx[Channel](Channel, (Data >> 1) & 0xFF);
;;;263        }
;;;264        return;
;;;265      }
;;;266      //
;;;267      // We received a new command.
;;;268      //
;;;269      _Command = Data;
;;;270      if (_Command & DCC_OP_ODD_ADDR) {
00001a  2800              CMP      r0,#0
00001c  6108              STR      r0,[r1,#0x10]  ; _Command
00001e  da03              BGE      |L1.40|
;;;271        _Addr |= 1;
000020  694a              LDR      r2,[r1,#0x14]  ; _Addr
000022  2301              MOVS     r3,#1
000024  431a              ORRS     r2,r2,r3
000026  614a              STR      r2,[r1,#0x14]  ; _Addr
                  |L1.40|
000028  0102              LSLS     r2,r0,#4
;;;272      }
;;;273      if (_Command & (DCC_OP_READ_U32 | DCC_OP_READ_U16 | DCC_OP_READ_U8 | DCC_OP_GET_CAPS)) {
00002a  0f12              LSRS     r2,r2,#28
00002c  d015              BEQ      |L1.90|
;;;274        _NumReadItems = (_Command >> 2) & 0xffff;
00002e  0380              LSLS     r0,r0,#14
000030  0c00              LSRS     r0,r0,#16
000032  8088              STRH     r0,[r1,#4]
                  |L1.52|
;;;275      } else {
;;;276        // Clear before write
;;;277        JLINKDCC_AbortOccurred = 0;
;;;278    
;;;279        if (_Command & DCC_OP_WRITE_U32) {
;;;280          _Data |= (_Command << 14) & 0xffff0000;
;;;281        } else {
;;;282          _Data = (_Command >> 2) & 0xffff;
;;;283        }
;;;284        if (_Command & DCC_OP_WRITE_U8) {
;;;285          *(U8*)_Addr = _Data;
;;;286          _Addr += 1;
;;;287        }
;;;288        if (_Command & DCC_OP_WRITE_U16) {
;;;289          *(U16*)_Addr = _Data;
;;;290          _Addr += 2;
;;;291        }
;;;292        if (_Command & DCC_OP_WRITE_U32) {
;;;293          *(U32*)_Addr =_Data;
;;;294          _Addr += 4;
;;;295        }
;;;296      }
;;;297    }
000034  bc10              POP      {r4}
000036  bc08              POP      {r3}
000038  4718              BX       r3
                  |L1.58|
00003a  6148              STR      r0,[r1,#0x14]         ;253  ; _Addr
00003c  e7fa              B        |L1.52|
                  |L1.62|
00003e  0201              LSLS     r1,r0,#8              ;260
000040  0eca              LSRS     r2,r1,#27             ;260
000042  4993              LDR      r1,|L1.656|
000044  0093              LSLS     r3,r2,#2              ;260
000046  3124              ADDS     r1,r1,#0x24           ;261
000048  58cb              LDR      r3,[r1,r3]            ;261
00004a  2b00              CMP      r3,#0                 ;261
00004c  d0f2              BEQ      |L1.52|
00004e  05c0              LSLS     r0,r0,#23             ;262
000050  0e01              LSRS     r1,r0,#24             ;262
000052  0010              MOVS     r0,r2                 ;262
000054  f7fffffe          BL       __ARM_common_call_via_r3
000058  e7ec              B        |L1.52|
                  |L1.90|
00005a  2200              MOVS     r2,#0                 ;277
00005c  708a              STRB     r2,[r1,#2]            ;277
00005e  00c2              LSLS     r2,r0,#3              ;277
000060  d505              BPL      |L1.110|
000062  0382              LSLS     r2,r0,#14             ;280
000064  6a0b              LDR      r3,[r1,#0x20]         ;280  ; _Data
000066  0c12              LSRS     r2,r2,#16             ;280
000068  0412              LSLS     r2,r2,#16             ;280
00006a  431a              ORRS     r2,r2,r3              ;280
00006c  e001              B        |L1.114|
                  |L1.110|
00006e  0382              LSLS     r2,r0,#14             ;282
000070  0c12              LSRS     r2,r2,#16             ;282
                  |L1.114|
000072  620a              STR      r2,[r1,#0x20]         ;284  ; _Data
000074  0042              LSLS     r2,r0,#1              ;284
000076  d504              BPL      |L1.130|
000078  8c0b              LDRH     r3,[r1,#0x20]         ;285  ; _Data
00007a  694a              LDR      r2,[r1,#0x14]         ;286  ; _Addr
00007c  1c54              ADDS     r4,r2,#1              ;286
00007e  7013              STRB     r3,[r2,#0]            ;285
000080  614c              STR      r4,[r1,#0x14]         ;286  ; _Addr
                  |L1.130|
000082  0082              LSLS     r2,r0,#2              ;286
000084  d504              BPL      |L1.144|
000086  8c0b              LDRH     r3,[r1,#0x20]         ;289  ; _Data
000088  694a              LDR      r2,[r1,#0x14]         ;290  ; _Addr
00008a  1c94              ADDS     r4,r2,#2              ;290
00008c  8013              STRH     r3,[r2,#0]            ;289
00008e  614c              STR      r4,[r1,#0x14]         ;290  ; _Addr
                  |L1.144|
000090  00c0              LSLS     r0,r0,#3              ;292
000092  d5cf              BPL      |L1.52|
000094  6948              LDR      r0,[r1,#0x14]         ;294  ; _Addr
000096  6a0b              LDR      r3,[r1,#0x20]         ;293  ; _Data
000098  1d02              ADDS     r2,r0,#4              ;294
00009a  6003              STR      r3,[r0,#0]            ;294
00009c  614a              STR      r2,[r1,#0x14]         ;294  ; _Addr
00009e  e7c9              B        |L1.52|
;;;298    
                          ENDP

                  _HandleWrite PROC
;;;305    */
;;;306    static void _HandleWrite(void) {
0000a0  b5f8              PUSH     {r3-r7,lr}
;;;307      U32 Data;
;;;308      int DCCBusy;
;;;309      int NumBytes;
;;;310    
;;;311      Data = 0;
0000a2  2400              MOVS     r4,#0
;;;312      DCCBusy = _ReadDCCStat() & 2;
0000a4  f7fffffe          BL       CP14_ReadDCCStat
0000a8  2102              MOVS     r1,#2
0000aa  4208              TST      r0,r1
;;;313      if (DCCBusy) {                  // Can we send data ?
0000ac  d115              BNE      |L1.218|
;;;314        return;                       // If not, we are done.
;;;315      }
;;;316    
;;;317      if (_ActiveChannel) {
0000ae  4d78              LDR      r5,|L1.656|
0000b0  2600              MOVS     r6,#0
0000b2  68af              LDR      r7,[r5,#8]  ; _ActiveChannel
0000b4  2f00              CMP      r7,#0
0000b6  d013              BEQ      |L1.224|
;;;318        U32 Channel;
;;;319    
;;;320        Channel = _ActiveChannel;
;;;321        _ActiveChannel = 0;
;;;322        if (_WritePendingNB) {
0000b8  60ae              STR      r6,[r5,#8]  ; _ActiveChannel
0000ba  7828              LDRB     r0,[r5,#0]  ; _WritePendingNB
0000bc  2800              CMP      r0,#0
0000be  d003              BEQ      |L1.200|
;;;323          _WriteDCC(_PendingPacketNB);
0000c0  68e8              LDR      r0,[r5,#0xc]  ; _PendingPacketNB
0000c2  f7fffffe          BL       CP14_WriteDCC
;;;324          _WritePendingNB = 0;
0000c6  702e              STRB     r6,[r5,#0]
                  |L1.200|
;;;325        }
;;;326        if (_pfOnTx[Channel]) {
0000c8  4871              LDR      r0,|L1.656|
0000ca  00b9              LSLS     r1,r7,#2              ;324
0000cc  302c              ADDS     r0,r0,#0x2c
0000ce  5841              LDR      r1,[r0,r1]
0000d0  2900              CMP      r1,#0
0000d2  d002              BEQ      |L1.218|
;;;327          _pfOnTx[Channel](Channel);
0000d4  0038              MOVS     r0,r7
0000d6  f7fffffe          BL       __ARM_common_call_via_r1
                  |L1.218|
;;;328        }
;;;329        return;
;;;330      }
;;;331    
;;;332      //
;;;333      // Check if a data item is pending
;;;334      //
;;;335      if (_WritePending) {
;;;336        _WriteDCC(_Data);
;;;337        _WritePending = 0;
;;;338        return;
;;;339      }
;;;340      //
;;;341      // Check if a read command is pending
;;;342      //
;;;343      if (_NumReadItems) {
;;;344        if (_Command & DCC_OP_GET_CAPS) {
;;;345          Data = (DCC_CONFIG | DCC_SIGNATURE);
;;;346          Data |= (JLINKDCC_AbortOccurred << 8);  // write abort status
;;;347          JLINKDCC_AbortOccurred = 0;
;;;348        } else {
;;;349    
;;;350          // Clear before next read
;;;351          JLINKDCC_AbortOccurred = 0;
;;;352    
;;;353          if (_Command & DCC_OP_READ_U8) {
;;;354            Data = *(U8*)_Addr;
;;;355            _Addr += 1;
;;;356          } else if (_Command & DCC_OP_READ_U16) {
;;;357            Data = *(U16*)_Addr;
;;;358            _Addr += 2;
;;;359          } else if (_Command & DCC_OP_READ_U32) {
;;;360            Data = *(U32*)_Addr;
;;;361            _Addr += 4;
;;;362            if ((Data & 0xFF800000) == 0x93800000) {    // Do we need to use the escape sequence and split it up into 2 transfers ?
;;;363              _Data = 0x93c10000 | (Data >> 16);
;;;364              Data  = 0x93c00000 | (Data & 0xFFFF);
;;;365              _WritePending = 1;
;;;366            }
;;;367          }
;;;368          if (JLINKDCC_AbortOccurred) {
;;;369            Data = 0x93c20000;          // read abort status
;;;370            _WritePending = 0;
;;;371            JLINKDCC_AbortOccurred = 0; // clear it
;;;372          }
;;;373        }
;;;374    
;;;375        _WriteDCC(Data);
;;;376        _NumReadItems--;
;;;377        return;
;;;378      }
;;;379      //
;;;380      // Handle terminal out. Up to 2 bytes in one 32-bit unit
;;;381      //
;;;382      NumBytes = _WrPos - _RdPos;
;;;383      if (NumBytes < 0) {
;;;384        NumBytes += sizeof(_acBuffer);
;;;385      }
;;;386      if (NumBytes) {
;;;387        int i;
;;;388        if (NumBytes > 2) {
;;;389          NumBytes = 2;
;;;390        }
;;;391        if (NumBytes == 2) {
;;;392          Data = 0x93A00000;
;;;393        } else {
;;;394          Data = 0x93800000;
;;;395        }
;;;396        for (i = 0; i < NumBytes; i++) {
;;;397          Data |= _acBuffer[_RdPos] << (8*i);
;;;398          _RdPos++;
;;;399          if (_RdPos == sizeof(_acBuffer)) {
;;;400            _RdPos = 0;
;;;401          }
;;;402        }
;;;403        _WriteDCC(Data);
;;;404      }
;;;405    }
0000da  bcf8              POP      {r3-r7}
0000dc  bc08              POP      {r3}
0000de  4718              BX       r3
                  |L1.224|
0000e0  78e8              LDRB     r0,[r5,#3]            ;335  ; _WritePending
0000e2  2800              CMP      r0,#0                 ;335
0000e4  d004              BEQ      |L1.240|
0000e6  6a28              LDR      r0,[r5,#0x20]         ;336  ; _Data
0000e8  f7fffffe          BL       CP14_WriteDCC
0000ec  70ee              STRB     r6,[r5,#3]            ;337
0000ee  e7f4              B        |L1.218|
                  |L1.240|
0000f0  88a8              LDRH     r0,[r5,#4]            ;343  ; _NumReadItems
0000f2  2800              CMP      r0,#0                 ;343
0000f4  d032              BEQ      |L1.348|
0000f6  6928              LDR      r0,[r5,#0x10]         ;344  ; _Command
0000f8  0101              LSLS     r1,r0,#4              ;344
0000fa  d505              BPL      |L1.264|
0000fc  78a9              LDRB     r1,[r5,#2]            ;346  ; JLINKDCC_AbortOccurred
0000fe  4865              LDR      r0,|L1.660|
000100  70ae              STRB     r6,[r5,#2]            ;347
000102  020c              LSLS     r4,r1,#8              ;346
000104  4304              ORRS     r4,r4,r0              ;346
000106  e022              B        |L1.334|
                  |L1.264|
000108  0141              LSLS     r1,r0,#5              ;353
00010a  70ae              STRB     r6,[r5,#2]            ;351
00010c  d503              BPL      |L1.278|
00010e  6968              LDR      r0,[r5,#0x14]         ;355  ; _Addr
000110  7804              LDRB     r4,[r0,#0]            ;354
000112  1c41              ADDS     r1,r0,#1              ;355
000114  e004              B        |L1.288|
                  |L1.278|
000116  0181              LSLS     r1,r0,#6              ;356
000118  d504              BPL      |L1.292|
00011a  6968              LDR      r0,[r5,#0x14]         ;358  ; _Addr
00011c  8804              LDRH     r4,[r0,#0]            ;357
00011e  1c81              ADDS     r1,r0,#2              ;358
                  |L1.288|
000120  6169              STR      r1,[r5,#0x14]         ;355  ; _Addr
000122  e014              B        |L1.334|
                  |L1.292|
000124  01c0              LSLS     r0,r0,#7              ;359
000126  d512              BPL      |L1.334|
000128  6968              LDR      r0,[r5,#0x14]         ;361  ; _Addr
00012a  6804              LDR      r4,[r0,#0]            ;361
00012c  1d01              ADDS     r1,r0,#4              ;361
00012e  0de0              LSRS     r0,r4,#23             ;362
000130  6169              STR      r1,[r5,#0x14]         ;362  ; _Addr
000132  0001              MOVS     r1,r0                 ;362
000134  39ff              SUBS     r1,r1,#0xff           ;362
000136  3928              SUBS     r1,r1,#0x28           ;362
000138  d109              BNE      |L1.334|
00013a  4957              LDR      r1,|L1.664|
00013c  0c20              LSRS     r0,r4,#16             ;363
00013e  1840              ADDS     r0,r0,r1              ;363
000140  6228              STR      r0,[r5,#0x20]         ;364  ; _Data
000142  4956              LDR      r1,|L1.668|
000144  0420              LSLS     r0,r4,#16             ;364
000146  0c00              LSRS     r0,r0,#16             ;364
000148  1844              ADDS     r4,r0,r1              ;364
00014a  2001              MOVS     r0,#1                 ;365
00014c  70e8              STRB     r0,[r5,#3]            ;365
                  |L1.334|
00014e  0020              MOVS     r0,r4                 ;375
000150  f7fffffe          BL       CP14_WriteDCC
000154  88a8              LDRH     r0,[r5,#4]            ;376  ; _NumReadItems
000156  1e40              SUBS     r0,r0,#1              ;376
000158  80a8              STRH     r0,[r5,#4]            ;376
00015a  e7be              B        |L1.218|
                  |L1.348|
00015c  69aa              LDR      r2,[r5,#0x18]         ;382  ; _RdPos
00015e  69e8              LDR      r0,[r5,#0x1c]         ;382  ; _WrPos
000160  2401              MOVS     r4,#1                 ;384
000162  02a4              LSLS     r4,r4,#10             ;384
000164  1a81              SUBS     r1,r0,r2              ;382
000166  d500              BPL      |L1.362|
000168  1909              ADDS     r1,r1,r4              ;384
                  |L1.362|
00016a  2900              CMP      r1,#0                 ;386
00016c  d0b5              BEQ      |L1.218|
00016e  2902              CMP      r1,#2                 ;388
000170  dd01              BLE      |L1.374|
000172  2102              MOVS     r1,#2                 ;389
000174  e004              B        |L1.384|
                  |L1.374|
000176  2902              CMP      r1,#2                 ;391
000178  d002              BEQ      |L1.384|
00017a  4849              LDR      r0,|L1.672|
                  |L1.380|
00017c  2300              MOVS     r3,#0                 ;396
00017e  e00b              B        |L1.408|
                  |L1.384|
000180  4848              LDR      r0,|L1.676|
000182  e7fb              B        |L1.380|
                  |L1.388|
000184  4e48              LDR      r6,|L1.680|
000186  00df              LSLS     r7,r3,#3              ;397
000188  5cb6              LDRB     r6,[r6,r2]            ;397
00018a  40be              LSLS     r6,r6,r7              ;397
00018c  4330              ORRS     r0,r0,r6              ;397
00018e  1c52              ADDS     r2,r2,#1              ;398
000190  42a2              CMP      r2,r4                 ;399
000192  d100              BNE      |L1.406|
000194  2200              MOVS     r2,#0                 ;400
                  |L1.406|
000196  1c5b              ADDS     r3,r3,#1              ;396
                  |L1.408|
000198  428b              CMP      r3,r1                 ;396
00019a  dbf3              BLT      |L1.388|
00019c  61aa              STR      r2,[r5,#0x18]         ;403  ; _RdPos
00019e  f7fffffe          BL       CP14_WriteDCC
0001a2  e79a              B        |L1.218|
;;;406    
                          ENDP

                  JLINKDCC_Process PROC
;;;423    */
;;;424    void JLINKDCC_Process(void) {
0001a4  b510              PUSH     {r4,lr}
;;;425      //
;;;426      // Avoid problems if this code is called from multiple threads or interrupts
;;;427      //
;;;428      if (JLINKDCC_IsInHandler) {
0001a6  4c3a              LDR      r4,|L1.656|
0001a8  7860              LDRB     r0,[r4,#1]  ; JLINKDCC_IsInHandler
0001aa  2800              CMP      r0,#0
0001ac  d107              BNE      |L1.446|
;;;429        return;
;;;430      }
;;;431      JLINKDCC_IsInHandler = 1;
0001ae  2001              MOVS     r0,#1
0001b0  7060              STRB     r0,[r4,#1]
;;;432      _HandleRead();
0001b2  f7fffffe          BL       _HandleRead
;;;433      _HandleWrite();
0001b6  f7fffffe          BL       _HandleWrite
;;;434       JLINKDCC_IsInHandler = 0;
0001ba  2000              MOVS     r0,#0
0001bc  7060              STRB     r0,[r4,#1]
                  |L1.446|
;;;435    }
0001be  e739              B        |L1.52|
;;;436    
                          ENDP

                  JLINKDCC_SendChar PROC
;;;443    */
;;;444    void JLINKDCC_SendChar(char c) {
0001c0  b410              PUSH     {r4}
;;;445      int Pos;
;;;446    
;;;447      Pos = _WrPos + 1;
0001c2  4933              LDR      r1,|L1.656|
;;;448      if (Pos == sizeof(_acBuffer)) {
0001c4  2401              MOVS     r4,#1
0001c6  69cb              LDR      r3,[r1,#0x1c]         ;447  ; _WrPos
0001c8  02a4              LSLS     r4,r4,#10
0001ca  1c5a              ADDS     r2,r3,#1              ;447
0001cc  42a2              CMP      r2,r4
0001ce  d100              BNE      |L1.466|
;;;449        Pos = 0;
0001d0  2200              MOVS     r2,#0
                  |L1.466|
;;;450      }
;;;451      if (Pos == _RdPos) {
0001d2  698c              LDR      r4,[r1,#0x18]  ; _RdPos
0001d4  42a2              CMP      r2,r4
0001d6  d002              BEQ      |L1.478|
;;;452        return;
;;;453      }
;;;454      _acBuffer[_WrPos] = c;
0001d8  4c33              LDR      r4,|L1.680|
0001da  54e0              STRB     r0,[r4,r3]
;;;455      _WrPos = Pos;
0001dc  61ca              STR      r2,[r1,#0x1c]  ; _WrPos
                  |L1.478|
;;;456    }
0001de  bc10              POP      {r4}
0001e0  4770              BX       lr
;;;457    
                          ENDP

                  JLINKDCC_SendString PROC
;;;464    */
;;;465    void JLINKDCC_SendString(const char * s) {
0001e2  b510              PUSH     {r4,lr}
0001e4  0004              MOVS     r4,r0
                  |L1.486|
;;;466      char c;
;;;467      while (1) {
;;;468        c = *s++;
0001e6  7820              LDRB     r0,[r4,#0]
0001e8  1c64              ADDS     r4,r4,#1
;;;469        if (c == 0) {
0001ea  2800              CMP      r0,#0
0001ec  d002              BEQ      |L1.500|
;;;470          break;
;;;471        }
;;;472        JLINKDCC_SendChar(c);
0001ee  f7fffffe          BL       JLINKDCC_SendChar
0001f2  e7f8              B        |L1.486|
                  |L1.500|
;;;473      }
;;;474    }
0001f4  e71e              B        |L1.52|
;;;475    
                          ENDP

                  JLINKDCC_SendCharOnChannelNB PROC
;;;485    */
;;;486    void JLINKDCC_SendCharOnChannelNB(unsigned Channel, U8 Data) {
0001f6  b570              PUSH     {r4-r6,lr}
0001f8  0006              MOVS     r6,r0
;;;487      U32 DCCPacket;
;;;488      int DCCBusy;
;;;489    
;;;490      DCCPacket = 0x93800000 | (Channel << 16);
0001fa  0404              LSLS     r4,r0,#16
0001fc  4828              LDR      r0,|L1.672|
0001fe  4304              ORRS     r4,r4,r0
;;;491      DCCPacket |= Data;
000200  430c              ORRS     r4,r4,r1
;;;492      DCCBusy = _ReadDCCStat() & 2;
000202  f7fffffe          BL       CP14_ReadDCCStat
;;;493      if (DCCBusy == 0) {
;;;494        _WriteDCC(DCCPacket);
;;;495      } else {
;;;496        _WritePendingNB = 1;
000206  4d22              LDR      r5,|L1.656|
000208  2102              MOVS     r1,#2                 ;492
00020a  4208              TST      r0,r1                 ;492
00020c  d006              BEQ      |L1.540|
00020e  2001              MOVS     r0,#1
000210  7028              STRB     r0,[r5,#0]
;;;497        _PendingPacketNB = DCCPacket;
000212  60ec              STR      r4,[r5,#0xc]  ; _PendingPacketNB
                  |L1.532|
;;;498      }
;;;499      _ActiveChannel = Channel;
;;;500    }
000214  60ae              STR      r6,[r5,#8]  ; _ActiveChannel
000216  bc70              POP      {r4-r6}
000218  bc08              POP      {r3}
00021a  4718              BX       r3
                  |L1.540|
00021c  0020              MOVS     r0,r4                 ;494
00021e  f7fffffe          BL       CP14_WriteDCC
000222  e7f7              B        |L1.532|
;;;501    
                          ENDP

                  JLINKDCC_SendOnChannel PROC
;;;510    */
;;;511    void JLINKDCC_SendOnChannel(unsigned Channel, U8 * pData, int NumItems) {
000224  b5f8              PUSH     {r3-r7,lr}
000226  0014              MOVS     r4,r2
000228  000d              MOVS     r5,r1
;;;512      U32 Data;
;;;513    
;;;514      if (Channel == DCC_CHANNEL_TERMINAL)  {
00022a  2800              CMP      r0,#0
00022c  d020              BEQ      |L1.624|
;;;515        while (NumItems-- > 0) {
;;;516          Data = *pData++;
;;;517          JLINKDCC_SendChar(Data);
;;;518        }
;;;519      } else {
;;;520        while (NumItems-- > 0) {
;;;521          Data = *pData++;
;;;522          if  (NumItems > 0) {
;;;523            Data |= *pData++ << 8;
;;;524            NumItems--;
;;;525            Data |= 0x200000;
;;;526          }
;;;527          Data |= 0x93800000;
00022e  4f1c              LDR      r7,|L1.672|
;;;528          Data |= Channel << 16;
000230  0406              LSLS     r6,r0,#16
                  |L1.562|
000232  0020              MOVS     r0,r4                 ;520
000234  1e64              SUBS     r4,r4,#1              ;520
000236  2800              CMP      r0,#0                 ;520
000238  dd1e              BLE      |L1.632|
00023a  7828              LDRB     r0,[r5,#0]            ;521
00023c  1c6d              ADDS     r5,r5,#1              ;521
00023e  2c00              CMP      r4,#0                 ;522
000240  dd07              BLE      |L1.594|
000242  7829              LDRB     r1,[r5,#0]            ;523
000244  1c6d              ADDS     r5,r5,#1              ;523
000246  1e64              SUBS     r4,r4,#1              ;524
000248  0209              LSLS     r1,r1,#8              ;523
00024a  4308              ORRS     r0,r0,r1              ;523
00024c  2101              MOVS     r1,#1                 ;525
00024e  0549              LSLS     r1,r1,#21             ;525
000250  4308              ORRS     r0,r0,r1              ;525
                  |L1.594|
000252  4338              ORRS     r0,r0,r7              ;527
000254  4330              ORRS     r0,r0,r6
000256  9000              STR      r0,[sp,#0]
                  |L1.600|
;;;529          while (_ReadDCCStat() & 2);       // Wait until we can send data
000258  f7fffffe          BL       CP14_ReadDCCStat
00025c  0780              LSLS     r0,r0,#30
00025e  d4fb              BMI      |L1.600|
;;;530          _WriteDCC(Data);
000260  9800              LDR      r0,[sp,#0]
000262  f7fffffe          BL       CP14_WriteDCC
000266  e7e4              B        |L1.562|
                  |L1.616|
000268  7828              LDRB     r0,[r5,#0]            ;516
00026a  1c6d              ADDS     r5,r5,#1              ;516
00026c  f7fffffe          BL       JLINKDCC_SendChar
                  |L1.624|
000270  0020              MOVS     r0,r4                 ;515
000272  1e64              SUBS     r4,r4,#1              ;515
000274  2800              CMP      r0,#0                 ;515
000276  dcf7              BGT      |L1.616|
                  |L1.632|
;;;531        }
;;;532      }
;;;533    }
000278  e72f              B        |L1.218|
;;;534    
                          ENDP

                  JLINKDCC_SetpfOnRx PROC
;;;539    */
;;;540    void JLINKDCC_SetpfOnRx(unsigned Channel, void (* pf)(unsigned Channel, U8 Data)) {
00027a  4a05              LDR      r2,|L1.656|
;;;541      _pfOnRx[Channel] = pf;
00027c  0080              LSLS     r0,r0,#2
00027e  3224              ADDS     r2,r2,#0x24
000280  5011              STR      r1,[r2,r0]
;;;542    }
000282  4770              BX       lr
;;;543    
                          ENDP

                  JLINKDCC_SetpfOnTx PROC
;;;548    */
;;;549    void JLINKDCC_SetpfOnTx(unsigned Channel, void (* pf)(unsigned Channel)) {
000284  4a02              LDR      r2,|L1.656|
;;;550      _pfOnTx[Channel] = pf;
000286  0080              LSLS     r0,r0,#2
000288  322c              ADDS     r2,r2,#0x2c
00028a  5011              STR      r1,[r2,r0]
;;;551    }
00028c  4770              BX       lr
;;;552    
                          ENDP

00028e  0000              DCW      0x0000
                  |L1.656|
                          DCD      ||.data||
                  |L1.660|
                          DCD      0x91ca00ff
                  |L1.664|
                          DCD      0x93c10000
                  |L1.668|
                          DCD      0x93c00000
                  |L1.672|
                          DCD      0x93800000
                  |L1.676|
                          DCD      0x93a00000
                  |L1.680|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  _acBuffer
                          %        1024

                          AREA ||.data||, DATA, ALIGN=2

                  _WritePendingNB
000000  00                DCB      0x00
                  JLINKDCC_IsInHandler
000001  00                DCB      0x00
                  JLINKDCC_AbortOccurred
000002  00                DCB      0x00
                  _WritePending
000003  00                DCB      0x00
                  _NumReadItems
000004  00000000          DCB      0x00,0x00,0x00,0x00
                  _ActiveChannel
                          DCD      0x00000000
                  _PendingPacketNB
                          DCD      0x00000000
                  _Command
                          DCD      0x00000000
                  _Addr
                          DCD      0x00000000
                  _RdPos
                          DCD      0x00000000
                  _WrPos
                          DCD      0x00000000
                  _Data
                          DCD      0x00000000
                  _pfOnRx
                          %        8
                  _pfOnTx
                          %        8

                          AREA ||i.__ARM_common_call_via_r1||, COMGROUP=__ARM_common_call_via_r1, CODE, READONLY, ALIGN=1

                  __ARM_common_call_via_r1 PROC
000000  4708              BX       r1
                          ENDP


                          AREA ||i.__ARM_common_call_via_r3||, COMGROUP=__ARM_common_call_via_r3, CODE, READONLY, ALIGN=1

                  __ARM_common_call_via_r3 PROC
000000  4718              BX       r3
                          ENDP

