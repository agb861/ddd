; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--thumb --list -c --asm --interleave -o.\output\lpc2478_ea\release_flash_j-link\obj\gui_x_touch.o --asm_dir=.\Output\LPC2478_EA\Release_FLASH_J-Link\LST\ --list_dir=.\Output\LPC2478_EA\Release_FLASH_J-Link\LST\ --depend=.\output\lpc2478_ea\release_flash_j-link\obj\gui_x_touch.d --apcs=interwork -O3 -IApplication\SEGGERDEMO -IApplication\SEGGERDEMO\Src -ISetup -IInc -IConfig -IFS -IIP -IIP\IP_FS\FS_RO\Generated -IGUI -IOS -IUSB -IUSBH -I"C:\Program Files (x86)\Keil\V473\ARM\RV31\INC" -I"C:\Program Files (x86)\Keil\V473\ARM\CMSIS\Include" -I"C:\Program Files (x86)\Keil\V473\ARM\Inc\Philips" Setup\GUI_X_Touch.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _SPI_Send PROC
;;;69     */
;;;70     static unsigned char _SPI_Send(unsigned char Data) {
000000  4946              LDR      r1,|L1.284|
;;;71       unsigned int FailsafeCnt;
;;;72     
;;;73       SPI_S0SPDR = Data;
000002  6088              STR      r0,[r1,#8]
;;;74       FailsafeCnt = 0;
;;;75       while(((SPI_S0SPSR & 0x80) == 0) && (FailsafeCnt < 5000)) {
000004  4a46              LDR      r2,|L1.288|
000006  2000              MOVS     r0,#0                 ;74
000008  e000              B        |L1.12|
                  |L1.10|
;;;76         FailsafeCnt++;
00000a  1c40              ADDS     r0,r0,#1
                  |L1.12|
00000c  684b              LDR      r3,[r1,#4]            ;75
00000e  061b              LSLS     r3,r3,#24             ;75
000010  d401              BMI      |L1.22|
000012  4290              CMP      r0,r2                 ;75
000014  d3f9              BCC      |L1.10|
                  |L1.22|
;;;77       }
;;;78       if (FailsafeCnt >= 5000) {
000016  4290              CMP      r0,r2
000018  d303              BCC      |L1.34|
;;;79         SPI_S0SPCCR = 57;
00001a  2039              MOVS     r0,#0x39
00001c  60c8              STR      r0,[r1,#0xc]
;;;80         SPI_S0SPCR  = 0x38;
00001e  2038              MOVS     r0,#0x38
000020  6008              STR      r0,[r1,#0]
                  |L1.34|
;;;81       }
;;;82       return SPI_S0SPDR;
000022  6888              LDR      r0,[r1,#8]
000024  0600              LSLS     r0,r0,#24
000026  0e00              LSRS     r0,r0,#24
;;;83     }
000028  4770              BX       lr
;;;84     
                          ENDP

                  _IsTouch PROC
;;;90     */
;;;91     static U8 _IsTouch(void) {
00002a  b5f8              PUSH     {r3-r7,lr}
;;;92       U32 Z1;
;;;93       U32 Z2;
;;;94       U32 x;
;;;95       U32 Pressure;
;;;96     
;;;97       //Read x value
;;;98       ACTIVATE_CS();
00002c  4d3d              LDR      r5,|L1.292|
00002e  2401              MOVS     r4,#1
000030  0524              LSLS     r4,r4,#20
000032  60ec              STR      r4,[r5,#0xc]
;;;99       _SPI_Send(0x83 | 0x50 | 0x00);
000034  20d3              MOVS     r0,#0xd3
000036  f7fffffe          BL       _SPI_Send
;;;100      x   = ((U32)_SPI_Send(0x00)) << 8;
00003a  2000              MOVS     r0,#0
00003c  f7fffffe          BL       _SPI_Send
000040  0206              LSLS     r6,r0,#8
;;;101      x  |= (U32)_SPI_Send(0x00);
000042  2000              MOVS     r0,#0
000044  f7fffffe          BL       _SPI_Send
000048  4330              ORRS     r0,r0,r6
;;;102      x >>= 3;
00004a  08c0              LSRS     r0,r0,#3
;;;103      DEACTIVATE_CS();
00004c  9000              STR      r0,[sp,#0]
00004e  606c              STR      r4,[r5,#4]
;;;104    
;;;105      //Read Z1 value
;;;106      ACTIVATE_CS();
000050  60ec              STR      r4,[r5,#0xc]
;;;107      _SPI_Send(0x83 | 0x30 | 0x00);
000052  20b3              MOVS     r0,#0xb3
000054  f7fffffe          BL       _SPI_Send
;;;108      Z1   = ((U32)_SPI_Send(0x00)) << 8;
000058  2000              MOVS     r0,#0
00005a  f7fffffe          BL       _SPI_Send
00005e  0206              LSLS     r6,r0,#8
;;;109      Z1  |= (U32)_SPI_Send(0x00);
000060  2000              MOVS     r0,#0
000062  f7fffffe          BL       _SPI_Send
000066  4330              ORRS     r0,r0,r6
;;;110      Z1 >>= 3;
000068  08c6              LSRS     r6,r0,#3
;;;111      DEACTIVATE_CS();
00006a  606c              STR      r4,[r5,#4]
;;;112    
;;;113      //Read Z2 value
;;;114      ACTIVATE_CS();
00006c  60ec              STR      r4,[r5,#0xc]
;;;115      _SPI_Send(0x83 | 0x40 | 0x00);
00006e  20c3              MOVS     r0,#0xc3
000070  f7fffffe          BL       _SPI_Send
;;;116      Z2  = ((U32)_SPI_Send(0x00)) << 8;
000074  2000              MOVS     r0,#0
000076  f7fffffe          BL       _SPI_Send
00007a  0207              LSLS     r7,r0,#8
;;;117      Z2 |= (U32)_SPI_Send(0x00);
00007c  2000              MOVS     r0,#0
00007e  f7fffffe          BL       _SPI_Send
000082  4338              ORRS     r0,r0,r7
;;;118      Z2 >>= 3;
000084  08c1              LSRS     r1,r0,#3
;;;119      DEACTIVATE_CS();
000086  606c              STR      r4,[r5,#4]
;;;120    
;;;121      //Calculate pressure
;;;122      Pressure =( x * Z2 - Z1) / Z1;
000088  9800              LDR      r0,[sp,#0]
00008a  4348              MULS     r0,r1,r0
00008c  1b80              SUBS     r0,r0,r6
00008e  0031              MOVS     r1,r6
000090  f7fffffe          BL       __aeabi_uidivmod
;;;123    
;;;124      if ((Pressure != 0) && (Pressure < 40000)) {
000094  2800              CMP      r0,#0
000096  d006              BEQ      |L1.166|
000098  4923              LDR      r1,|L1.296|
00009a  4288              CMP      r0,r1
00009c  d203              BCS      |L1.166|
;;;125        return 1;  // Touch
00009e  2001              MOVS     r0,#1
                  |L1.160|
;;;126      }
;;;127      return 0;    // No touch
;;;128    }
0000a0  bcf8              POP      {r3-r7}
0000a2  bc08              POP      {r3}
0000a4  4718              BX       r3
                  |L1.166|
0000a6  2000              MOVS     r0,#0                 ;127
0000a8  e7fa              B        |L1.160|
;;;129    
                          ENDP

                  GUI_TOUCH_X_ActivateX PROC
;;;146    */
;;;147    void GUI_TOUCH_X_ActivateX(void) {
0000aa  4770              BX       lr
;;;148    }
;;;149    
                          ENDP

                  GUI_TOUCH_X_ActivateY PROC
;;;159    */
;;;160    void GUI_TOUCH_X_ActivateY(void) {
0000ac  4770              BX       lr
;;;161    }
;;;162    
                          ENDP

                  GUI_TOUCH_X_MeasureX PROC
;;;170    */
;;;171    int  GUI_TOUCH_X_MeasureX(void) {
0000ae  b570              PUSH     {r4-r6,lr}
;;;172      int x;
;;;173    
;;;174      if (_IsTouch() == 1) {
0000b0  f7fffffe          BL       _IsTouch
0000b4  2801              CMP      r0,#1
0000b6  d004              BEQ      |L1.194|
;;;175        ACTIVATE_CS();
;;;176        _SPI_Send(0x83 | 0x50 | 0x00);
;;;177        x   = ((U32)_SPI_Send(0x00)) << 8;
;;;178        x  |= (U32)_SPI_Send(0x00);
;;;179        x >>= 3;
;;;180        DEACTIVATE_CS();
;;;181        return x;
;;;182      }
;;;183      return -1;
0000b8  2000              MOVS     r0,#0
0000ba  43c0              MVNS     r0,r0
                  |L1.188|
;;;184    }
0000bc  bc70              POP      {r4-r6}
0000be  bc08              POP      {r3}
0000c0  4718              BX       r3
                  |L1.194|
0000c2  4d18              LDR      r5,|L1.292|
0000c4  2401              MOVS     r4,#1                 ;175
0000c6  0524              LSLS     r4,r4,#20             ;175
0000c8  60ec              STR      r4,[r5,#0xc]          ;175
0000ca  20d3              MOVS     r0,#0xd3              ;176
0000cc  f7fffffe          BL       _SPI_Send
0000d0  2000              MOVS     r0,#0                 ;177
0000d2  f7fffffe          BL       _SPI_Send
0000d6  0206              LSLS     r6,r0,#8              ;177
0000d8  2000              MOVS     r0,#0                 ;178
0000da  f7fffffe          BL       _SPI_Send
0000de  4330              ORRS     r0,r0,r6              ;178
0000e0  10c0              ASRS     r0,r0,#3              ;179
0000e2  606c              STR      r4,[r5,#4]            ;180
0000e4  e7ea              B        |L1.188|
;;;185    
                          ENDP

                  GUI_TOUCH_X_MeasureY PROC
;;;193    */
;;;194    int  GUI_TOUCH_X_MeasureY(void) {
0000e6  b570              PUSH     {r4-r6,lr}
;;;195      int y;
;;;196    
;;;197      if (_IsTouch() == 1) {
0000e8  f7fffffe          BL       _IsTouch
0000ec  2801              CMP      r0,#1
0000ee  d002              BEQ      |L1.246|
;;;198        ACTIVATE_CS();
;;;199        _SPI_Send(0x83 | 0x10 | 0x00);
;;;200        y   = ((U32)_SPI_Send(0x00)) << 8;
;;;201        y  |= (U32)_SPI_Send(0x00);
;;;202        y >>= 3;
;;;203        DEACTIVATE_CS();
;;;204        return y;
;;;205      }
;;;206      return -1;
0000f0  2000              MOVS     r0,#0
0000f2  43c0              MVNS     r0,r0
;;;207    }
0000f4  e7e2              B        |L1.188|
                  |L1.246|
0000f6  4d0b              LDR      r5,|L1.292|
0000f8  2401              MOVS     r4,#1                 ;198
0000fa  0524              LSLS     r4,r4,#20             ;198
0000fc  60ec              STR      r4,[r5,#0xc]          ;198
0000fe  2093              MOVS     r0,#0x93              ;199
000100  f7fffffe          BL       _SPI_Send
000104  2000              MOVS     r0,#0                 ;200
000106  f7fffffe          BL       _SPI_Send
00010a  0206              LSLS     r6,r0,#8              ;200
00010c  2000              MOVS     r0,#0                 ;201
00010e  f7fffffe          BL       _SPI_Send
000112  4330              ORRS     r0,r0,r6              ;201
000114  10c0              ASRS     r0,r0,#3              ;202
000116  606c              STR      r4,[r5,#4]            ;203
000118  e7d0              B        |L1.188|
;;;208    
                          ENDP

00011a  0000              DCW      0x0000
                  |L1.284|
                          DCD      0xe0020000
                  |L1.288|
                          DCD      0x00001388
                  |L1.292|
                          DCD      0xe0028000
                  |L1.296|
                          DCD      0x00009c40
