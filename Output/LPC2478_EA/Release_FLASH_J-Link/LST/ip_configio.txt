; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--thumb --list -c --asm --interleave -o.\output\lpc2478_ea\release_flash_j-link\obj\ip_configio.o --asm_dir=.\Output\LPC2478_EA\Release_FLASH_J-Link\LST\ --list_dir=.\Output\LPC2478_EA\Release_FLASH_J-Link\LST\ --depend=.\output\lpc2478_ea\release_flash_j-link\obj\ip_configio.d --apcs=interwork -O3 -IApplication\SEGGERDEMO -IApplication\SEGGERDEMO\Src -ISetup -IInc -IConfig -IFS -IIP -IIP\IP_FS\FS_RO\Generated -IGUI -IOS -IUSB -IUSBH -I"C:\Program Files (x86)\Keil\V473\ARM\RV31\INC" -I"C:\Program Files (x86)\Keil\V473\ARM\CMSIS\Include" -I"C:\Program Files (x86)\Keil\V473\ARM\Inc\Philips" Config\IP_ConfigIO.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _WriteUnsigned PROC
;;;67     */
;;;68     static char * _WriteUnsigned(char * s, U32 v, int NumDigits) {
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
000002  0017              MOVS     r7,r2
000004  0005              MOVS     r5,r0
;;;69       unsigned Base;
;;;70       unsigned Div;
;;;71       U32 Digit;
;;;72     
;;;73       Digit = 1;
000006  2401              MOVS     r4,#1
;;;74       Base  = 10;
000008  260a              MOVS     r6,#0xa
00000a  e000              B        |L1.14|
                  |L1.12|
;;;75       //
;;;76       // Count how many digits are required
;;;77       //
;;;78       while (((v / Digit) >= Base) | (NumDigits-- > 1)) {
;;;79         Digit *= Base;
00000c  4374              MULS     r4,r6,r4
                  |L1.14|
00000e  9801              LDR      r0,[sp,#4]            ;78
000010  0021              MOVS     r1,r4                 ;78
000012  f7fffffe          BL       __aeabi_uidivmod
000016  42b0              CMP      r0,r6                 ;78
000018  d301              BCC      |L1.30|
00001a  2001              MOVS     r0,#1                 ;78
00001c  e000              B        |L1.32|
                  |L1.30|
00001e  2000              MOVS     r0,#0                 ;78
                  |L1.32|
000020  0039              MOVS     r1,r7                 ;78
000022  1e7f              SUBS     r7,r7,#1              ;78
000024  2901              CMP      r1,#1                 ;78
000026  dd01              BLE      |L1.44|
000028  2101              MOVS     r1,#1                 ;78
00002a  e000              B        |L1.46|
                  |L1.44|
00002c  2100              MOVS     r1,#0                 ;78
                  |L1.46|
00002e  4308              ORRS     r0,r0,r1              ;78
000030  d1ec              BNE      |L1.12|
                  |L1.50|
;;;80       }
;;;81       //
;;;82       // Output digits
;;;83       //
;;;84       do {
;;;85         Div = v / Digit;
000032  9801              LDR      r0,[sp,#4]
000034  0021              MOVS     r1,r4
000036  f7fffffe          BL       __aeabi_uidivmod
00003a  0001              MOVS     r1,r0
;;;86         v  -= Div * Digit;
00003c  4361              MULS     r1,r4,r1
00003e  9a01              LDR      r2,[sp,#4]
;;;87         *s++ = (char)('0' + Div);
000040  3030              ADDS     r0,r0,#0x30
000042  1a51              SUBS     r1,r2,r1              ;86
000044  9101              STR      r1,[sp,#4]
000046  7028              STRB     r0,[r5,#0]
000048  1c6d              ADDS     r5,r5,#1
;;;88         Digit /= Base;
00004a  0031              MOVS     r1,r6
00004c  0020              MOVS     r0,r4
00004e  f7fffffe          BL       __aeabi_uidivmod
000052  0004              MOVS     r4,r0
;;;89       } while (Digit);
000054  d1ed              BNE      |L1.50|
;;;90       *s = 0;
000056  7028              STRB     r0,[r5,#0]
;;;91       return s;
000058  0028              MOVS     r0,r5
;;;92     }
00005a  bcfe              POP      {r1-r7}
00005c  bc08              POP      {r3}
00005e  4718              BX       r3
;;;93     
                          ENDP

                  _ShowStamp PROC
;;;100    */
;;;101    static void _ShowStamp(void) {
000060  b530              PUSH     {r4,r5,lr}
;;;102    #if SHOW_TIME
;;;103      {
;;;104        I32 Time;
;;;105        char ac[20];
;;;106        char * sBuffer = &ac[0];
;;;107        Time = OS_GetTime32();
000062  482d              LDR      r0,|L1.280|
000064  b085              SUB      sp,sp,#0x14           ;101
000066  6800              LDR      r0,[r0,#0]  ; OS_Time
000068  466d              MOV      r5,sp                 ;106
;;;108        sBuffer = _WriteUnsigned(sBuffer, Time / 1000, 0);
00006a  217d              MOVS     r1,#0x7d
00006c  00c9              LSLS     r1,r1,#3
00006e  f7fffffe          BL       __aeabi_idivmod
000072  000c              MOVS     r4,r1
000074  0001              MOVS     r1,r0
000076  2200              MOVS     r2,#0
000078  0028              MOVS     r0,r5
00007a  f7fffffe          BL       _WriteUnsigned
;;;109        *sBuffer++ = ':';
00007e  213a              MOVS     r1,#0x3a
000080  7001              STRB     r1,[r0,#0]
000082  1c40              ADDS     r0,r0,#1
000084  0021              MOVS     r1,r4
;;;110        sBuffer = _WriteUnsigned(sBuffer, Time % 1000, 3);
000086  2203              MOVS     r2,#3
000088  f7fffffe          BL       _WriteUnsigned
;;;111        *sBuffer++ = ' ';
00008c  2120              MOVS     r1,#0x20
00008e  7001              STRB     r1,[r0,#0]
;;;112        *sBuffer++ = 0;
000090  2100              MOVS     r1,#0
000092  7041              STRB     r1,[r0,#1]
;;;113        _puts(ac);
000094  4668              MOV      r0,sp
000096  f7fffffe          BL       _puts
;;;114      }
;;;115    #endif
;;;116    
;;;117    #if SHOW_TASK
;;;118      {
;;;119        const char * s;
;;;120        s = OS_GetTaskName(NULL);
00009a  2000              MOVS     r0,#0
00009c  f7fffffe          BL       OS_GetTaskName
;;;121        if (s) {
0000a0  2800              CMP      r0,#0
0000a2  d004              BEQ      |L1.174|
;;;122          _puts(s);
0000a4  f7fffffe          BL       _puts
;;;123          _puts(" - ");
0000a8  a01c              ADR      r0,|L1.284|
0000aa  f7fffffe          BL       _puts
                  |L1.174|
;;;124        }
;;;125      }
;;;126    #endif
;;;127    }
0000ae  b005              ADD      sp,sp,#0x14
0000b0  bc30              POP      {r4,r5}
0000b2  bc08              POP      {r3}
0000b4  4718              BX       r3
;;;128    
                          ENDP

                  IP_Panic PROC
;;;138    */
;;;139    void IP_Panic(const char * s) {
0000b6  f7fffffe          BL       IP_OS_DisableInterrupt
                  |L1.186|
;;;140      (void)s;
;;;141      IP_OS_DisableInterrupt();
;;;142    #if IP_DEBUG > 1
;;;143      _puts("*** Fatal error, System halted: ");
;;;144      _puts(s);
;;;145      _puts("\n");
;;;146    #endif
;;;147      while (1);
0000ba  e7fe              B        |L1.186|
;;;148    }
;;;149    
                          ENDP

                  IP_Log PROC
;;;166    */
;;;167    void IP_Log(const char * s) {
0000bc  b510              PUSH     {r4,lr}
0000be  0004              MOVS     r4,r0
;;;168    
;;;169      IP_OS_DisableInterrupt();
0000c0  f7fffffe          BL       IP_OS_DisableInterrupt
;;;170      _ShowStamp();
0000c4  f7fffffe          BL       _ShowStamp
;;;171      _puts(s);
0000c8  0020              MOVS     r0,r4
0000ca  f7fffffe          BL       _puts
;;;172      _puts("\n");
0000ce  a014              ADR      r0,|L1.288|
0000d0  f7fffffe          BL       _puts
;;;173      IP_OS_EnableInterrupt();
0000d4  f7fffffe          BL       IP_OS_EnableInterrupt
                  |L1.216|
;;;174    }
0000d8  bc10              POP      {r4}
0000da  bc08              POP      {r3}
0000dc  4718              BX       r3
;;;175    
                          ENDP

                  IP_Warn PROC
;;;187    */
;;;188    void IP_Warn(const char * s) {
0000de  b510              PUSH     {r4,lr}
0000e0  0004              MOVS     r4,r0
;;;189      IP_OS_DisableInterrupt();
0000e2  f7fffffe          BL       IP_OS_DisableInterrupt
;;;190      _ShowStamp();
0000e6  f7fffffe          BL       _ShowStamp
;;;191      _puts("*** Warning *** ");
0000ea  a00e              ADR      r0,|L1.292|
0000ec  f7fffffe          BL       _puts
;;;192      _puts(s);
0000f0  0020              MOVS     r0,r4
0000f2  f7fffffe          BL       _puts
;;;193      _puts("\n");
0000f6  a00a              ADR      r0,|L1.288|
0000f8  f7fffffe          BL       _puts
;;;194      IP_OS_EnableInterrupt();
0000fc  f7fffffe          BL       IP_OS_EnableInterrupt
;;;195    }
000100  e7ea              B        |L1.216|
;;;196    
                          ENDP

                  _puts PROC
;;;48     */
;;;49     static void _puts(const char * s) {
000102  b510              PUSH     {r4,lr}
000104  0004              MOVS     r4,r0
                  |L1.262|
;;;50       char c;
;;;51       for (;;) {
;;;52        c = *s++;
000106  7820              LDRB     r0,[r4,#0]
000108  1c64              ADDS     r4,r4,#1
;;;53        if (c == 0) {
00010a  2800              CMP      r0,#0
00010c  d0e4              BEQ      |L1.216|
;;;54          break;
;;;55        }
;;;56     #if USE_DCC
;;;57        JLINKDCC_SendChar(c);
;;;58     #else
;;;59        putchar(c);
00010e  490a              LDR      r1,|L1.312|
000110  f7fffffe          BL       putc
000114  e7f7              B        |L1.262|
;;;60     #endif
;;;61       }
;;;62     }
000116  e7df              B        |L1.216|
;;;63     
                          ENDP

                  |L1.280|
                          DCD      OS_Time
                  |L1.284|
00011c  202d2000          DCB      " - ",0
                  |L1.288|
000120  0a00              DCB      "\n",0
000122  00                DCB      0
000123  00                DCB      0
                  |L1.292|
000124  2a2a2a20          DCB      "*** Warning *** ",0
000128  5761726e
00012c  696e6720
000130  2a2a2a20
000134  00      
000135  00                DCB      0
000136  00                DCB      0
000137  00                DCB      0
                  |L1.312|
                          DCD      __stdout
